<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Sean McPherson</title>
    <subtitle>Sean McPherson is a software engineer and educator focused on front-end development.</subtitle>
    <link href="https://seanmcp.com/feed/feed.xml" rel="self"/>
    <link href="https://seanmcp.com/"/>
    <updated>2022-09-06T14:18:37Z</updated>
    <id>https://seanmcp.com/</id>
    <author>
        <name>Sean McPherson</name>
        <email>sean@seanmcp.com</email>
    </author>
        
        <entry>
            <title>How to create a render prop component</title>
            <link href="https://seanmcp.com/articles/create-a-render-prop-component/"/>
            <updated>2018-10-09T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/create-a-render-prop-component/</id>
            <content type="html">&lt;p&gt;It‚Äôs been a year since Michael Jackson published ‚ÄúUse a Render Prop!‚Äù, which encouraged using render props instead of higher order components (HOCs). Since then, ‚Äúrender props‚Äù has grown into a bigger and bigger buzzword in the React community.&lt;/p&gt;
&lt;p&gt;If you are new to React or just new to the concept, the look of a render prop can be a little daunting. &lt;a href=&quot;https://www.react-spring.io/docs/props/spring&quot;&gt;Checkout this example from &lt;code&gt;react-spring&lt;/code&gt;&lt;/a&gt;‚Äôs documentation:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Spring &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react-spring&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Spring from&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; to&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;i will fade &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;-- Here&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Spring&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If that makes perfect sense to you, awesome üéâ! Skip this article and get back to coding. If not, don‚Äôt worry; I didn‚Äôt get it at first either. Stick around, and I‚Äôll attempt to break down render props and show you how to make your own.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;background&quot; tabindex=&quot;-1&quot;&gt;Background&lt;/h2&gt;
&lt;h3 id=&quot;what-is-a-render-prop%3F&quot; tabindex=&quot;-1&quot;&gt;What is a render prop?&lt;/h3&gt;
&lt;p&gt;At its core, render prop is ‚Äúa simple technique for sharing code between React components using a prop whose value is a function.‚Äù&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/create-a-render-prop-component/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; Instead of passing a string or object, you pass a function as a prop.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Name&lt;br /&gt;    renderProp&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Passing a function as a prop!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code above won‚Äôt accomplish much‚Ää-‚Ääthe arrow function just returns a string‚Ää-‚Ääbut it introduces a new paradigm. What if, within &lt;code&gt;Name&lt;/code&gt; we pass some data to our &lt;code&gt;props.renderProp&lt;/code&gt; function?&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Sean&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderProp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;code&gt;Name&lt;/code&gt; renders, it calls &lt;code&gt;props.renderProp&lt;/code&gt; and passes some data; in this case, a string with my name.&lt;/p&gt;
&lt;p&gt;We have designed our &lt;code&gt;Name&lt;/code&gt; component with the sole purpose of storing the &lt;code&gt;name&lt;/code&gt; data and passing it on to the &lt;code&gt;props.renderProps&lt;/code&gt; function. The is the secret sauce that makes render props so powerful.&lt;/p&gt;
&lt;p&gt;Going back to the implementation of &lt;code&gt;Name&lt;/code&gt;, the function I pass to &lt;code&gt;renderProp&lt;/code&gt; can look for this data as a parameter:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Name&lt;br /&gt;    renderProp&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello, my name is &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;code&gt;Nam&lt;/code&gt;e is called, it creates variable &lt;code&gt;name&lt;/code&gt; with the value ‚ÄòSean‚Äô, then calls the &lt;code&gt;props.renderProp&lt;/code&gt; function and passes &lt;code&gt;name&lt;/code&gt;. Finally, it returns a string that reads &lt;code&gt;Hello, my name is Sean!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But we aren‚Äôt just limited to strings; this is React! You can return JSX in your function to render new elements in the VirtualDOM:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Name&lt;br /&gt;    renderProp&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; my name is &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That‚Äôs it! Render props provide us a method of passing props from a parent component to a child via function props. Using these same principles, we can create useful and reusable ‚Äúlogic‚Äù components to implement in any application.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I called our prop &lt;code&gt;renderProp&lt;/code&gt;, but there is nothing special about that name; you can use whatever name you want. I‚Äôll give you my recommendation for passing function props later on.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-does-render-props-replace%3F&quot; tabindex=&quot;-1&quot;&gt;What does render props replace?&lt;/h3&gt;
&lt;p&gt;In most use cases, render props will replace HOCs. If we wanted to accomplish the above example with an HOC, we might use something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;withName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Component name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Sean&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then our parent component would be passed to &lt;code&gt;withName&lt;/code&gt;, usually during the export. Once that is done, we could access &lt;code&gt;props.name&lt;/code&gt; and render our greeting:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; my name is &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;withName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;App&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works, and certainly has &lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Freact-redux.js.org%2Fdocs%2Fconnect-extracting-data-with-mapstatetoprops&quot;&gt;its use cases&lt;/a&gt;, but can introduce issues such as naming collisions. I recommend &lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fcdb.reacttraining.com%2Fuse-a-render-prop-50de598f11ce&quot;&gt;Jackson‚Äôs article for a more detailed dive into render props and HOCs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;how-to&quot; tabindex=&quot;-1&quot;&gt;How To&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Note: Facebook provides an &lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Freactjs.org%2Fdocs%2Frender-props.html&quot;&gt;introduction to render props in their React documentation&lt;/a&gt;. It is a useful resource, but their example was contrived and therefore difficult to reapply to new scenarios. Here I will provide a tried-and-true example that I have utilized in multiple projects.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;setting-up-our-app&quot; tabindex=&quot;-1&quot;&gt;Setting up our app&lt;/h3&gt;
&lt;p&gt;Let‚Äôs imagine you‚Äôre creating an application with drawer menu. Most of the time the menu is hidden, but when you hit a toggle button, the menu opens. Within the menu, you want to have an accordion that reveals additional links when open. In order to accomplish this, you might do something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;menuIsOpen&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;menuIsOpen&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Menu toggle&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;main&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token constant&quot;&gt;MENU&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;main&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;toggle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;menuIsOpen&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;menuIsOpen &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We made &lt;code&gt;App&lt;/code&gt; a stateful component and keep track of a boolean for the menu. Additionally, we added a &lt;code&gt;toggle&lt;/code&gt; method to open and close the menu.&lt;/p&gt;
&lt;p&gt;Now we need to create Menu:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Menu&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;socialsIsOpen&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;menu&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token constant&quot;&gt;CLOSE&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Menu&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token constant&quot;&gt;SOCIALS&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;socialsIsOpen &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;‚ñ¥&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;‚ñæ&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;socialsIsOpen &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Socials &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;toggle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;socialsIsOpen&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;socialsIsOpen &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Look familiar? We &lt;strong&gt;reused the state from &lt;code&gt;App&lt;/code&gt;&lt;/strong&gt; (üö© red flag no 1) so that we could keep track of whether or not to display our &lt;code&gt;Socials&lt;/code&gt; component (just an unordered list of links). &lt;code&gt;Menu&lt;/code&gt; needed to be toggled too, so we &lt;strong&gt;copy and pasted the method from &lt;code&gt;App&lt;/code&gt;&lt;/strong&gt; (üö© red flag no. 2).&lt;/p&gt;
&lt;p&gt;This works, but there are two main problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;üëé &lt;strong&gt;Not DRY&lt;/strong&gt;: In order to achieve the same function in two different components, I needed to repeat myself by copying and pasting the state and toggle method.&lt;/li&gt;
&lt;li&gt;üëé &lt;strong&gt;Not extensible&lt;/strong&gt;: Imagine I want to add another toggle feature to my app. What do I need to do? Copy and paste the necessary state and method again, which compounds my problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fortunately, we can solve both of these problems easily with a simple render prop component.&lt;/p&gt;
&lt;h3 id=&quot;creating-a-render-prop&quot; tabindex=&quot;-1&quot;&gt;Creating a render prop&lt;/h3&gt;
&lt;p&gt;The purpose of our render prop component will be to manage an open and closed state. It will also need a method to toggle the state like the examples above. Then it will take the state and method and pass it as arguments to a prop.&lt;/p&gt;
&lt;p&gt;My preference for render props is to use a Component‚Äôs &lt;code&gt;children&lt;/code&gt; prop. This allows us to utilize opening and closing tags‚Ää-‚Ääa familiar convention in React‚Ää-‚Ääand makes indentation a little more manageable.&lt;/p&gt;
&lt;p&gt;Our render prop component looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Open&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;toggle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOpen &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; renderProps &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOpen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggle&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;function&#39;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;renderProps&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like the previous examples, I am keeping track of an ‚Äúopen‚Äù state and toggling it with a method. Here I simplified the name of the boolean in the state to &lt;code&gt;isOpen&lt;/code&gt; because our component doesn‚Äôt care what is and is not open. The only thing &lt;code&gt;Open&lt;/code&gt; cares about is whether or not &lt;code&gt;isOpen&lt;/code&gt; is true or false.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Render props components do not care about presentational logic. Their sole purpose is to keep track of simple bits of data and pass it¬†on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;toggle&lt;/code&gt; method is the same as previous examples.&lt;/p&gt;
&lt;p&gt;Within the &lt;code&gt;render&lt;/code&gt; method, I create a &lt;code&gt;renderProps&lt;/code&gt; object with which I can pass on the current value of &lt;code&gt;isOpen&lt;/code&gt; and my &lt;code&gt;toggle&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Finally I do a quick &lt;code&gt;typeof&lt;/code&gt; check while returning. If &lt;code&gt;this.props.children&lt;/code&gt; is a function, as I expect, then it will pass &lt;code&gt;renderProps&lt;/code&gt; as an argument. If not, then it will fail softly by simply returning &lt;code&gt;this.props.children&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can optionally do some type-checking to ensure that &lt;code&gt;children&lt;/code&gt; is a function, but I chose not to add an additional library here.&lt;/p&gt;
&lt;h3 id=&quot;implementing-our-render-prop&quot; tabindex=&quot;-1&quot;&gt;Implementing our render prop&lt;/h3&gt;
&lt;p&gt;Now that we have abstracted the open/close logic to &lt;code&gt;Open&lt;/code&gt;, we can clean up our App component:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Open&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;openProps&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;openProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOpen&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;NewMenu toggle&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;openProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;main&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;br /&gt;                        onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;openProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                        type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token constant&quot;&gt;MENU&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Welcome &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;main&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Open&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We pass &lt;code&gt;Open&lt;/code&gt; a child function that looks for our render props. Now I just need to switch out all references to &lt;code&gt;this.state.menuIsOpen&lt;/code&gt; and &lt;code&gt;this.toggle&lt;/code&gt; to refer to &lt;code&gt;openProps&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Notice that &lt;code&gt;App&lt;/code&gt; no longer needs a state; we can convert it to a functional component and let &lt;code&gt;Open&lt;/code&gt; do all the work.&lt;/p&gt;
&lt;p&gt;Next, let‚Äôs do the same thing with &lt;code&gt;Menu&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Menu&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Open&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;openProps&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;menu&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token constant&quot;&gt;CLOSE&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Menu&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;openProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggle&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token constant&quot;&gt;SOCIALS&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;openProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOpen &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;‚ñ¥&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;‚ñæ&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;openProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOpen &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Socials &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Open&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Likewise, we were able to simplify Menu by converting it to a functional component as well. This may not seem like a big deal now, but it will be increasingly important as an application scales.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The fewer states and methods that you need to manage, the¬†better.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can see our render prop live, in all its glory, here on CodeSandbox:&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/x5j1pl90o?fontsize=14&amp;hidenavigation=1&amp;theme=dark&amp;view=preview&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;How to create a render prop component&quot; allow=&quot;geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb&quot; sandbox=&quot;allow-modals allow-forms allow-popups allow-scripts allow-same-origin&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;review&quot; tabindex=&quot;-1&quot;&gt;Review&lt;/h2&gt;
&lt;p&gt;The render props technique is a great way to abstract reusable logic into specialized components. These components pass their logic/data/methods as arguments to functions passed as props.&lt;/p&gt;
&lt;p&gt;Utilizing render props components solves the two problems above:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;üëç &lt;strong&gt;DRY&lt;/strong&gt;: The only code repeated is &lt;code&gt;&amp;lt;Open&amp;gt;&lt;/code&gt;. You‚Äôll never have to write another &lt;code&gt;toggle&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;üëç &lt;strong&gt;Extensible&lt;/strong&gt;: Next time you want to add opening and closing to your app, all you need to add is &lt;code&gt;Open&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that we‚Äôve reviewed, let‚Äôs take a look back at that original example from &lt;code&gt;react-spring&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Spring &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react-spring&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Spring from&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; to&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;i will fade &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;-- Here&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Spring&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that this &lt;code&gt;Spring&lt;/code&gt; component is passed a &lt;code&gt;this.props.children&lt;/code&gt; function. It then gives some data, in this case a style object, to that function as an argument. Finally, those &lt;code&gt;styles&lt;/code&gt; are applied to the &lt;code&gt;div&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Not bad, right? Now that you‚Äôve mastered render props, make sure to check out this curated list of awesome render props. In the words of Captain Planet, ‚ÄúThe power is yours!‚Äù&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I hope this article helped; I know I learned a lot while writing it. Let me know if you have any &lt;a href=&quot;https://seanmcp.com/articles/create-a-render-prop-component/#comment-link&quot;&gt;questions about or problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/render-props.html&quot;&gt;https://reactjs.org/docs/render-props.html&lt;/a&gt; &lt;a href=&quot;https://seanmcp.com/articles/create-a-render-prop-component/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Why a blog?</title>
            <link href="https://seanmcp.com/articles/why-a-blog/"/>
            <updated>2018-12-04T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/why-a-blog/</id>
            <content type="html">&lt;p&gt;For over a year and half I have been happily blogging on Medium. I was quick to sign up when the platform first launched (and snag that elusive &lt;a href=&quot;https://medium.com/@seanmcp&quot;&gt;@seanmcp&lt;/a&gt; handle) but was slow to start writing.&lt;/p&gt;
&lt;p&gt;Then, in the summer of 2017, I enrolled in the Iron Yard and was encouraged to blog my process. After looking at Blogger for a minute (seriously), I settled on Medium. I appreciated the design esthetic and attention to typographical detail. Composing was simple and I found code blocks quite useful.&lt;/p&gt;
&lt;p&gt;I never really settled into a consistent writing schedule but did find some success writing about JavaScript and React. My most popular article, &lt;a href=&quot;https://medium.com/@seanmcp/%EF%B8%8F-how-to-use-emojis-in-react-d23bbf608bf7&quot;&gt;‚ÄúHow to use emojis in React‚Äù&lt;/a&gt;, continues to receive ‚Äúapplause‚Äù six months after I published.&lt;/p&gt;
&lt;p&gt;All that is to say, Medium was a perfectly suitable platform for what I needed. And it still is a good platform, but my needs have changed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@nikitonsky/medium-is-a-poor-choice-for-blogging-bb0048d19133&quot;&gt;Recent&lt;/a&gt; &lt;a href=&quot;https://twitter.com/dan_abramov/status/1068903909119483904&quot;&gt;criticism&lt;/a&gt; &lt;a href=&quot;https://twitter.com/snookca/status/1068866664257732608&quot;&gt;of Medium&lt;/a&gt; aside, ownership of my content was the biggest catalyst for looking elsewhere. Medium is popular now, but will it be in two years? Five years? Ten years? Will we be reading Medium posts about terraforming when we colonize the moon? Or will Medium‚Äôs popularity wane and be shuttered before we get there? No one can know.&lt;/p&gt;
&lt;p&gt;Regardless of the future of the platform, I‚Äôd like my content to live on. My goal is to help people (help people), so my words‚Äìas feeble as they are‚Äìneed to persist long enough to do that.&lt;/p&gt;
&lt;p&gt;‚ÄúThe grass withers and the flowers fade‚Äù; nothing is permanent in this life. But having more direct ownership and control of my content puts me in a better position to continue helping people for the long-run.&lt;/p&gt;
&lt;p&gt;That‚Äôs why I‚Äôm starting this blog. For the immediate future, I will be cross-posting everything I write on Medium and linking back here. After then? We‚Äôll see what the web looks like.&lt;/p&gt;
&lt;p&gt;In the meantime, thank you for stopping by. Check back weekly or subscribe with your favorite RSS reader.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>2018 into 2019</title>
            <link href="https://seanmcp.com/articles/2018-into-2019/"/>
            <updated>2018-12-31T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/2018-into-2019/</id>
            <content type="html">&lt;p&gt;As 2018 comes to a close, I was inspired by &lt;a href=&quot;https://www.taniarascia.com/2018-into-2019/&quot;&gt;Tania Rascia&lt;/a&gt; to write a year in review. I‚Äôm hoping to turn this into an annual opportunity to reflect on the successes, failures, and challenges from the previous year, and set goals for the next.&lt;/p&gt;
&lt;p&gt;2018 was probably the most eventful year of my life, edging 2014 in which I graduated from college, married, and received my first teaching position. I‚Äôve attempted to list all of the major events and accomplishments of the past year in mostly chronological order.&lt;/p&gt;
&lt;h2 id=&quot;2018-in-review&quot; tabindex=&quot;-1&quot;&gt;2018 in review&lt;/h2&gt;
&lt;p&gt;Last year, I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Received three tech job offers&lt;/strong&gt;: Node developer with a crypto company, QA with CNN Politics, and React Developer with TSYS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accepted my first software developer position&lt;/strong&gt;: TSYS offered a contract-to-hire position that worked well for my family&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployed two apps&lt;/strong&gt;: &lt;a href=&quot;https://seanmcp.github.io/dice-roller/&quot;&gt;Dice Roller&lt;/a&gt; and &lt;a href=&quot;https://seanmcp.github.io/contraction-tracker/&quot;&gt;Contraction Tracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attended two conferences&lt;/strong&gt;: NG ATL, and Connect Tech&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Became a father&lt;/strong&gt;: My first child was born in March, changing our lives forever&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Converted from contract to salaried employee&lt;/strong&gt;: After a three-month trial, TSYS was happy to offer me an official position with the company&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Organized&lt;/strong&gt; &lt;a href=&quot;https://www.meetup.com/jrdevsatl/&quot;&gt;&lt;strong&gt;Jr Devs&lt;/strong&gt;&lt;/a&gt;: a Meetup for learners with over 200 members&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gave a lightning talk at a Meetup&lt;/strong&gt;: &lt;a href=&quot;https://github.com/jr-devs/meetup/blob/master/events/june-2018.md&quot;&gt;Intro to CSS Animations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learned some Python&lt;/strong&gt;: created a few scripts, a Flask app for gaming, and a text-based adventure game &lt;a href=&quot;https://github.com/SeanMcP/rimoria&quot;&gt;Rimoria&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Created two NPM packages&lt;/strong&gt;: &lt;a href=&quot;https://www.npmjs.com/package/vanilla-include&quot;&gt;vanilla-include&lt;/a&gt; and &lt;a href=&quot;https://www.npmjs.com/package/nodify-string&quot;&gt;nodify-string&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Represented TSYS&lt;/strong&gt; at a job fair&lt;/li&gt;
&lt;li&gt;Worked on an application at work in &lt;strong&gt;React Native&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Launched a Chrome extension&lt;/strong&gt;: &lt;a href=&quot;https://chrome.google.com/webstore/detail/popsicle-sticks-random-st/lnckbgaeagindapiodcmccfokcmnfecm&quot;&gt;Popsicle Sticks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Helped TSYS create an &lt;a href=&quot;https://medium.com/tsys-engineering&quot;&gt;&lt;strong&gt;engineering blog&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/tsys&quot;&gt;&lt;strong&gt;GitHub organization&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Published &lt;strong&gt;12 articles&lt;/strong&gt; (including two on this website)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After sitting down and writing it all out, I am impressed with the things that I have accomplished in 2018. Especially considering how uncertain I was about continuing my search for work in the tech industry by the end of 2017.&lt;/p&gt;
&lt;p&gt;Last year was a long stretch of giving from God: blessed be the name of the LORD (&lt;a href=&quot;https://www.biblegateway.com/passage/?search=Job+1&amp;amp;version=NKJV&quot;&gt;read Job 1&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;previewing-2019&quot; tabindex=&quot;-1&quot;&gt;Previewing 2019&lt;/h2&gt;
&lt;p&gt;Looking forward to next year, there are several things that I want to learn and do. I am going to list some general goals, followed by measurable ways that I can accomplish them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Python&lt;/strong&gt;: I want to dive deeper in Python applications, including environments and dependencies, by &lt;strong&gt;deploying a Python app&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine learning&lt;/strong&gt;: TSYS is interested in integrating ML into their applications, so I will &lt;strong&gt;complete a course&lt;/strong&gt; in either Udacity or Udemy&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Module bundlers&lt;/strong&gt;: I am lost (and confused) when it comes to module bundling, so I am going to de-mystify bundlers by publishing React &lt;strong&gt;setup guides for Webpack, Parcel, and Rollup&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NPM Packages&lt;/strong&gt;: I want to learn about creating and maintaining open-source software by publishing &lt;strong&gt;two new packages&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tooling&lt;/strong&gt;: I want to investigate tooling options for React development that streamline the process and &lt;strong&gt;create a personalized dot files repo&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Publish more articles&lt;/strong&gt;: It is my mission to help people, and one way to do that is to publish &lt;strong&gt;24 articles (bi-monthly)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jr Devs Meetup&lt;/strong&gt;: I want to partner with a coding bootcamp to provide &lt;strong&gt;instructors at every meeting&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speaking&lt;/strong&gt;: I want to create a deck and &lt;strong&gt;present at another Meetup&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Husband&lt;/strong&gt;: I want to take dating my wife seriously and &lt;strong&gt;schedule a babysitter four times a year&lt;/strong&gt; for real dates&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Father&lt;/strong&gt;: I want to use the time I have with my son more productively, &lt;strong&gt;going on father-son outings twice a month&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faith&lt;/strong&gt;: I want to &lt;strong&gt;continue teaching Sunday school&lt;/strong&gt;, lead &lt;strong&gt;family worship every evening&lt;/strong&gt;, and &lt;strong&gt;read/reflect on the Bible daily&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Personal&lt;/strong&gt;: Dad bod is a real thing and is only around the corner, so I want to &lt;strong&gt;exercise 6 days a week&lt;/strong&gt; (don‚Äôt forget a &lt;a href=&quot;https://www.biblegateway.com/passage/?search=Ex+20%3A8-11&amp;amp;version=NKJV&quot;&gt;day of rest&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Soccer&lt;/strong&gt;: I want to find room in the family schedule to &lt;strong&gt;play a pick-up game every week&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I could go on longer, but twelve seems like a fitting number. I am going to check back on these goals throughout the year and track my progress in a different article.&lt;/p&gt;
&lt;h2 id=&quot;how-was-your-year%3F&quot; tabindex=&quot;-1&quot;&gt;How was your year?&lt;/h2&gt;
&lt;p&gt;As I mentioned above, this is not a new or unique idea. But I think it‚Äôs a good one, and I encourage you to give it a try. You might be pleasantly surprise (like I was), at how much you‚Äôve accomplished.&lt;/p&gt;
&lt;p&gt;If not, then ask yourself: What can I do to help myself accomplish my goals next year? You don‚Äôt need to be a super hero; just try to be a little better than you were the day before.&lt;/p&gt;
&lt;p&gt;I hope this was half as inspiring to you as it was helpful to me. Happy new year! üéâ&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Accessibility Wednesday</title>
            <link href="https://seanmcp.com/articles/accessibility-wednesday/"/>
            <updated>2019-02-06T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/accessibility-wednesday/</id>
            <content type="html">&lt;p&gt;In the fall of 2018, I had the good pleasure of attending the &lt;a href=&quot;https://connect.tech/&quot;&gt;Connect.Tech&lt;/a&gt; conference in Atlanta, GA. There were great talks about React, user experience design, and exciting new features for JavaScript.&lt;/p&gt;
&lt;p&gt;But the sessions that had the greatest impact on me were all focused on accessibility.&lt;/p&gt;
&lt;h2 id=&quot;accessibility-is-important&quot; tabindex=&quot;-1&quot;&gt;Accessibility is important&lt;/h2&gt;
&lt;p&gt;It might seem obvious to you, but I needed to hear that loudly proclaimed from the keynote stage.&lt;/p&gt;
&lt;p&gt;Accessibility isn‚Äôt just about our friends and neighbors with disabilities; it‚Äôs about making applications that work well for everyone. &lt;a href=&quot;https://ssir.org/articles/entry/the_curb_cut_effect&quot;&gt;The Curb Cut Effect&lt;/a&gt; is a perfect example about how accommodations make everyone‚Äôs lives easier.&lt;/p&gt;
&lt;p&gt;I was treating accessibility as if it was icing on a cake‚Äìsomething that was nice to have but not essential. Unfortunately, it was that type of thinking that allows inaccessible apps to flourish.&lt;/p&gt;
&lt;p&gt;Accessibility is not a feature; it‚Äôs part of the product. If our app isn‚Äôt accessible, then it isn‚Äôt done.&lt;/p&gt;
&lt;h2 id=&quot;%E2%80%9Cwhoa%2C-what-was-i-doing-before%3F%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;‚ÄúWhoa, what was I doing before?‚Äù&lt;/h2&gt;
&lt;p&gt;Hearing all that was like a light switch being flipped in my mind‚Äìand with that came loads of guilt and regret for all the neighbors I had neglected for the decade I had been developing. I felt especially convicted by my experiences in my previous career.&lt;/p&gt;
&lt;p&gt;Before becoming a developer, I studied education in college and spent three years working as a teacher. The importance of creating an inclusive environment and the value of accommodations was drilled into us early on, and we studied how great accommodations increase learning outcomes for all students.&lt;/p&gt;
&lt;p&gt;Further yet, I had seen those benefits first hand while working in over a dozen schools across Pennsylvania and Georgia.&lt;/p&gt;
&lt;p&gt;If accessibility was so important to my previous career, why wouldn‚Äôt it be the same in my new one as a developer?&lt;/p&gt;
&lt;h2 id=&quot;%E2%80%9Cokay%E2%80%A6-now-what%3F%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;‚ÄúOkay‚Ä¶ now what?‚Äù&lt;/h2&gt;
&lt;p&gt;Impressed with a sudden desire to make all the things accessible, I left the conference and looked online for resources to help.&lt;/p&gt;
&lt;p&gt;I first tried to read the &lt;a href=&quot;https://www.w3.org/TR/WCAG21/&quot;&gt;Web Content Accessibility Guidelines 2.1&lt;/a&gt;, which weren‚Äôt as difficult to grasp as I had feared. Even so, the content was dense and a tough slog for a newbie.&lt;/p&gt;
&lt;p&gt;Seeking more digestible information, I found other resources on W3C to be helpful, especially &lt;a href=&quot;https://www.w3.org/WAI/roles/developers/&quot;&gt;those specifically for developers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was working with React Native at the time, so I created &lt;a href=&quot;https://github.com/SeanMcP/awesome-react-native-accessibility&quot;&gt;Awesome React Native Accessibility&lt;/a&gt;, a repo with a list of mobile-specific resources. Progress on that halted when I switched to a React project at work.&lt;/p&gt;
&lt;p&gt;At this point, I was starting to feel a little overwhelmed. Everywhere I looked were categories, rules, laws, practices, and oodles of examples of companies doing it wrong. It all seemed like too much.&lt;/p&gt;
&lt;h2 id=&quot;accessibility-is-hard&quot; tabindex=&quot;-1&quot;&gt;Accessibility is hard&lt;/h2&gt;
&lt;p&gt;I was beginning to think that maybe accessibility was too difficult, too technical, too intricate for me. And I‚Äôm sure that I am not alone in having thought that.&lt;/p&gt;
&lt;p&gt;But the reality is that developing for accessibility is a skill. And just like any other skill, it requires little bites and regular practice. Over time you will improve, and eventually what seemed difficult will become second nature.&lt;/p&gt;
&lt;p&gt;There is a reason we don‚Äôt learn to walk by running. Our brains weren‚Äôt designed to work that way. As the father of a now-cruising baby, I feel particularly qualified to say that learning to walk is hard work. It‚Äôs filled with failures, bumps, and bruises. Same with riding a bike, learning to read, or adjusting to a AAC device.&lt;/p&gt;
&lt;p&gt;You will fail at first (and second and third), but as long as you persevere, you can be successful. You can learn. You can grow.&lt;/p&gt;
&lt;h2 id=&quot;let%E2%80%99s-learn-about-accessibility&quot; tabindex=&quot;-1&quot;&gt;Let‚Äôs learn about accessibility&lt;/h2&gt;
&lt;p&gt;I am determined: I want to become an accessible developer. I want to bake accessibility in for as many neighbors as possible into every application on which I work.&lt;/p&gt;
&lt;p&gt;In order to meet that goal, I need to learn more about accessibility. And that‚Äôs where this article comes in. This is the kick-off to a series called ‚ÄúAccessibility Wednesday‚Äù where I will share accessibility tid-bits for developers.&lt;/p&gt;
&lt;p&gt;These won‚Äôt be full articles‚Äìneither you nor I have time for that. Rather, I‚Äôll share images, links, and code samples on Twitter with the hashtag &lt;a href=&quot;https://twitter.com/hashtag/a11ywednesday&quot;&gt;#a11ywednesday&lt;/a&gt;. Everything will be available in &lt;a href=&quot;https://github.com/SeanMcP/accessibility-wednesday&quot;&gt;a GitHub repo&lt;/a&gt; for easy reference.&lt;/p&gt;
&lt;h2 id=&quot;remember%3A-i%E2%80%99m-no-expert-(yet)&quot; tabindex=&quot;-1&quot;&gt;Remember: I‚Äôm no expert (yet)&lt;/h2&gt;
&lt;p&gt;Since I am not an authoritative resource on accessibility, I will make sure to include references and citations to every applicable tidbit. Is MLA formatting still a thing? (s/o PurdueOWL)&lt;/p&gt;
&lt;p&gt;This is a learning exercise for me as much as it is for everyone else. With that in mind, I will almost certainly make mistakes. All of us fall short of the target. That‚Äôs why I encourage you to help me correct my mistakes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/SeanMcP/accessibility-wednesday/issues/new&quot;&gt;File an issue&lt;/a&gt; on GitHub referencing the tip in question, or‚Äìbetter yet‚Äìmake a pull request with the fix. I happily welcome any and all contributions the the project.&lt;/p&gt;
&lt;p&gt;If you notice the mistake &lt;a href=&quot;https://twitter.com/snmcp&quot;&gt;on Twitter&lt;/a&gt;, please respond or direct message to let me know. I will remove the tweet, make the correction, and share the updated information later.&lt;/p&gt;
&lt;h2 id=&quot;stronger-together&quot; tabindex=&quot;-1&quot;&gt;Stronger together&lt;/h2&gt;
&lt;p&gt;As time goes on, I‚Äôm hoping that Accessibility Wednesday grows into a catalog of useful information for developers of all levels to make more accessible applications. We know that there is power in our collective knowledge.&lt;/p&gt;
&lt;p&gt;As a wise man once penned, ‚Äúwith great power there must also come‚Äìgreat responsibility!‚Äù&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/accessibility-wednesday/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; Let‚Äôs use our power for good and make the web more accessible for everyone.&lt;/p&gt;
&lt;p&gt;Join the discussion &lt;a href=&quot;https://twitter.com/hashtag/a11ywednesday&quot;&gt;on Twitter&lt;/a&gt; or &lt;a href=&quot;https://github.com/SeanMcP/accessibility-wednesday&quot;&gt;GitHub&lt;/a&gt;. I look forward to learning and sharing with you all!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I learned while writing this article that the original phrase from Spider-Man is slightly different than the modern variation. &lt;a href=&quot;http://www.quotecounterquote.com/2012/07/with-great-power-comes-great.html&quot;&gt;(source)&lt;/a&gt; &lt;a href=&quot;https://seanmcp.com/articles/accessibility-wednesday/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Convert class components to functions with React Hooks</title>
            <link href="https://seanmcp.com/articles/convert-class-component-to-function-with-hooks/"/>
            <updated>2019-02-06T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/convert-class-component-to-function-with-hooks/</id>
            <content type="html">&lt;p&gt;Last year, the React team announced hooks, a feature to more easily abstract logic into reusable components. On the day of the announcement, &lt;a href=&quot;https://medium.com/@seanmcp/refactoring-a-render-prop-with-hooks-fc22ed537199&quot;&gt;I wrote and article&lt;/a&gt; explaining how to refactor a render prop component with hook.&lt;/p&gt;
&lt;p&gt;Starting this week with release of &lt;a href=&quot;https://reactjs.org/blog/2019/02/06/react-v16.8.0.html&quot;&gt;React v16.8&lt;/a&gt;, &lt;strong&gt;you can now add hooks in your projects&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Today, I want to look at a typical class component and demonstrate how you can covert it into a functional component with React hooks. Let‚Äôs jump in.&lt;/p&gt;
&lt;h2 id=&quot;terminology&quot; tabindex=&quot;-1&quot;&gt;Terminology&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: Skip this section if you‚Äôre familiar with class and functional React components.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôm going to use the terms ‚Äúclass‚Äù and ‚Äúfunctional‚Äù components to refer to the modern options for creating components. A class component looks something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassExample&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;greeting&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;greeting&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Class components have access to internal state; default, custom, and lifecycle methods; and a &lt;code&gt;this&lt;/code&gt; to reference. These components have been the powerhouses of React development throughout its history.&lt;/p&gt;
&lt;p&gt;The aptly named functional components are functions that return JSX. Here‚Äôs a typical example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;FunctionalExample&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; greeting &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Howdy&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;greeting&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Functional components lack an internal state, methods, and &lt;code&gt;this&lt;/code&gt;. In order to access passed props, we refer to the &lt;code&gt;props&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;Because they contain less internal logic, functional components are sometimes referred to as ‚Äúdumb‚Äù or ‚Äúpresentational‚Äù components.&lt;/p&gt;
&lt;p&gt;Although different in composition, class and functional components are used in the same manner. Let‚Äôs reference both examples from above in a hypothetical parent component:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ClassExample name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Sean&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;FunctionalExample name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;partner&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the parent‚Äôs perspective, the two types of components are identical. To understand how React internally understands and processes these two different types of components, I recommend Dan Abramov‚Äôs &lt;a href=&quot;https://overreacted.io/how-does-react-tell-a-class-from-a-function/&quot;&gt;‚ÄúHow Does React Tell a Class from a Function?‚Äù&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are simplified definitions and examples, but they will provide us with a good basis for the rest of the article.&lt;/p&gt;
&lt;h2 id=&quot;class-component&quot; tabindex=&quot;-1&quot;&gt;Class component&lt;/h2&gt;
&lt;p&gt;I have a component that makes an API request on mount, stores the response in state, then renders some JSX based on the data. Here‚Äôs the code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ClassComponent&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://random.dog/woof.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;raw&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; raw&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Doggo&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A cute dog&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Fetching&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: To create this example, I looked through Todd Motto‚Äôs awesome list of &lt;a href=&quot;https://github.com/toddmotto/public-apis&quot;&gt;‚ÄúPublic APIs‚Äù&lt;/a&gt;. Check it out and give it a star if you find it useful.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I used the fetch library to keep the example straight forward (and it seemed fitting for an app that displays dog photos), but I recommend using a more robust option like &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios&lt;/a&gt; with better error handling for your applications.&lt;/p&gt;
&lt;h2 id=&quot;functional-component&quot; tabindex=&quot;-1&quot;&gt;Functional Component&lt;/h2&gt;
&lt;p&gt;Using React Hooks, we can create the same example from above using a functional component.&lt;/p&gt;
&lt;h3 id=&quot;setup&quot; tabindex=&quot;-1&quot;&gt;Setup&lt;/h3&gt;
&lt;p&gt;First, we‚Äôll create a new file for our functional code and set up a basic function. Then copy the &lt;code&gt;return&lt;/code&gt; from our class component and remove all references to &lt;code&gt;this.state&lt;/code&gt;. We need to declare a variable to prevent reference errors, so let‚Äôs call it &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;FunctionalComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token comment&quot;&gt;// We&#39;ll change this later&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Doggo&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A cute dog&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Fetching&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;useeffect&quot; tabindex=&quot;-1&quot;&gt;useEffect&lt;/h3&gt;
&lt;p&gt;In our class component, we make an AJAX request when the component mounted and stored that data in state. &lt;code&gt;componentDidMount&lt;/code&gt; and the other lifecycle methods are limited to classes. However, the React team was able to implement those features with the &lt;code&gt;useEffect&lt;/code&gt; hook.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; is a method that takes two parameters: 1) a function to call on mount, and 2) an array of variables to watch for updating.&lt;/p&gt;
&lt;p&gt;For the first parameter, we‚Äôll pass an anonymous function that calls fetch, processes the data, and logs the response. The second argument just be an empty array for now.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;FunctionalComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://random.dog/woof.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;raw&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; raw&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Doggo&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A cute dog&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Fetching&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are coding along, you should see something like the following in your console when the component mounts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ &amp;quot;url&amp;quot;: &amp;quot;https://random.dog/867580b3d005.jpg&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This shows us that our API call is working, but logging the response isn‚Äôt our goal; we need to store the data for later. Let‚Äôs revisit the &lt;code&gt;url&lt;/code&gt; variable that we created.&lt;/p&gt;
&lt;h3 id=&quot;usestate&quot; tabindex=&quot;-1&quot;&gt;useState&lt;/h3&gt;
&lt;p&gt;Now that we have the response from our API, we need to be able to capture and reference that value. In our class component, we used its state and the &lt;code&gt;setState&lt;/code&gt; method to remember that data.&lt;/p&gt;
&lt;p&gt;React‚Äôs &lt;code&gt;useState&lt;/code&gt; hook gives us access to a similar API without using a class. When calling the function and optionally passing a default value, we receive two returned variables: 1) a reference to the value, and 2) a function to update that value, respectively.&lt;/p&gt;
&lt;p&gt;Using array destructuring, we can grab those variables and assign a name according to the convention: &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;setX&lt;/code&gt;. For our example, we‚Äôll call the value &lt;code&gt;url&lt;/code&gt; and the setter function &lt;code&gt;setUrl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We‚Äôll replace our old &lt;code&gt;url&lt;/code&gt; with the results from &lt;code&gt;useState&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;FunctionalComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setUrl&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://random.dog/woof.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;raw&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; raw&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Doggo&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A cute dog&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Fetching&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;useState&lt;/code&gt;, we can quickly add basic state to our functional component.&lt;/p&gt;
&lt;p&gt;In the code above, we‚Äôre just logging the response from our API. Now we want to use the &lt;code&gt;setUrl&lt;/code&gt; function to set the value or url in our component‚Äôs state.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;FunctionalComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setUrl&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://random.dog/woof.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;raw&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; raw&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Doggo&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A cute dog&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Fetching&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let‚Äôs take a second to revisit the second parameter passed to &lt;code&gt;useEffect&lt;/code&gt;. Remember, it contains a list of variables that will trigger the effect to run again on change.&lt;/p&gt;
&lt;p&gt;Our effect depends on one outside variable: &lt;code&gt;setUrl&lt;/code&gt;. This function is generated once by &lt;code&gt;useState&lt;/code&gt;, and adding it to the array will ensure that our fetch call isn‚Äôt fired repeatedly.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/convert-class-component-to-function-with-hooks/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;FunctionalComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setUrl&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://random.dog/woof.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;raw&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; raw&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setUrl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;setUrl&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Doggo&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h2&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;img src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A cute dog&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Fetching&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;section&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That‚Äôs it! Checkout the &lt;a href=&quot;https://codesandbox.io/s/wwvmq1v407&quot;&gt;live example&lt;/a&gt; on CodeSandbox to see the two components side-by-side.&lt;/p&gt;
&lt;h2 id=&quot;comparison&quot; tabindex=&quot;-1&quot;&gt;Comparison&lt;/h2&gt;
&lt;p&gt;Let‚Äôs take a moment and consider our two components. The new functional component is a little shorter than the original class component, and the variables are shorter and easier to reference.&lt;/p&gt;
&lt;p&gt;Those are nice benefits, but I don‚Äôt find either a convincing reason to go back and convert all my class components.&lt;/p&gt;
&lt;p&gt;More important to me is the fact that &lt;strong&gt;you can now use a functional component for nearly everything in your application&lt;/strong&gt;. Since every component is functional, it makes the process of bringing in or removing state and lifecycle effects much easier.&lt;/p&gt;
&lt;h2 id=&quot;embrace-the-class-less-future&quot; tabindex=&quot;-1&quot;&gt;Embrace the class-less future&lt;/h2&gt;
&lt;p&gt;For those reasons and others, the future of React is class-less. And that‚Äôs a good thing. Hooks provide more flexibility when creating and managing components, to say nothing of &lt;a href=&quot;https://reactjs.org/docs/hooks-custom.html&quot;&gt;custom hooks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But don‚Äôt panic and convert all your class components right now; &lt;a href=&quot;https://twitter.com/dan_abramov/status/1026839679197437953&quot;&gt;‚Äúthey‚Äôll be supported for a looooong time‚Äù&lt;/a&gt;. However, when you have the opportunity to refactor a class component going forward, consider converting it into a functional component with hooks.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;A big thanks to &lt;a href=&quot;https://medium.com/@hungtrn75&quot;&gt;Hung Tran Van&lt;/a&gt; on Medium for &lt;a href=&quot;https://medium.com/@hungtrn75/an-infinite-loop-when-u-set-url-state-in-useeffect-efc4426ef4ce&quot;&gt;highlighting a previous issue with this article&lt;/a&gt;. While fixing my mistake, I found &lt;a href=&quot;https://daveceddia.com/useeffect-hook-examples/&quot;&gt;&lt;em&gt;How the useEffect Hook Works&lt;/em&gt;&lt;/a&gt; by David Ceddia to be super helpful. &lt;a href=&quot;https://seanmcp.com/articles/convert-class-component-to-function-with-hooks/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>JS Basics: Ternary Operator</title>
            <link href="https://seanmcp.com/articles/js-ternary-operator/"/>
            <updated>2019-02-08T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/js-ternary-operator/</id>
            <content type="html">&lt;p&gt;A ternary or conditional operator is like an inline if statement. In JavaScript, you can identify them by their unique use of a question mark, &lt;code&gt;?&lt;/code&gt;, and colon, &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When I first started coding, I found ternary operators more than a little confusing, so let‚Äôs try to unpack them. Look at this common example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Todo &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isDone &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Todo--done&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have a snippet from a React to-do app with a ternary operator. The class ( &lt;code&gt;className&lt;/code&gt; in JSX) is being set based on a condition in our &lt;code&gt;props&lt;/code&gt; object. Here‚Äôs how to read a ternary operator:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If &lt;code&gt;props.isDone&lt;/code&gt; is true/truthy, then return the string ‚ÄúTodo‚Äìdone‚Äù; otherwise return an empty string.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Written out, a ternary operator looks like an &lt;code&gt;if&lt;/code&gt; statement. We could express the same code like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isDone &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Todo--done&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks more familiar! Ternary operators are useful because they allow you to add inline conditions to your code. Compare the original code to our final if statement. The ternary operator is shorter, cleaner, and more efficient.&lt;/p&gt;
&lt;p&gt;MDN has a great list of other examples for you to reference. You can check them out here: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator&quot;&gt;Conditional (ternary) operators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>JS Basics: Generate a random number</title>
            <link href="https://seanmcp.com/articles/js-generate-random-number/"/>
            <updated>2019-02-11T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/js-generate-random-number/</id>
            <content type="html">&lt;p&gt;Whether you are simulating a die roll or pulling any index from an array, computers can be used to generate a random number. In JavaScript, random numbers require a combination of methods on the &lt;code&gt;Math&lt;/code&gt; object that can be a little tricky to understand your first time through.&lt;/p&gt;
&lt;h2 id=&quot;random-die-roll&quot; tabindex=&quot;-1&quot;&gt;Random die roll&lt;/h2&gt;
&lt;p&gt;Let‚Äôs say you want to create a digital six-sided die, which will give you a random number between one and six when called. Our function to simulate a die roll will look like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;rollDie&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;sides&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; sides&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;rollDie&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Every time we call the function, it will return any number from one to six, inclusive. But why? To answer that question, we need to know more about the two methods on the &lt;code&gt;Math&lt;/code&gt; object we called.&lt;/p&gt;
&lt;h2 id=&quot;math-methods&quot; tabindex=&quot;-1&quot;&gt;Math methods&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Math.random()&lt;/code&gt; is a method that generates an integer (number with a decimal) from zero to one, including zero but excluding one. The output of &lt;code&gt;Math.random()&lt;/code&gt; could be 0, 0.1, 0.2, 0.3343424587866554652345, or 0.99. Anything from zero to nearly one is a possibility.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Math.floor&lt;/code&gt; is a method that rounds an integer down to the nearest whole number. Rounding down, 0.1 becomes 0, 3.6 becomes 3, and 5.4 becomes 5. Think of it as rounding all the way down to the floor. (Note: there is also a &lt;code&gt;Math.ceil&lt;/code&gt; function for rounding up that I‚Äôll mention later).&lt;/p&gt;
&lt;p&gt;By combining these two methods, we can generate the random number for our die. Starting on the inside of our function and working outward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Math.random()&lt;/code&gt; returns an integer &lt;strong&gt;between&lt;/strong&gt; zero and nearly one: &lt;code&gt;0.16&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Next we &lt;strong&gt;multiply&lt;/strong&gt; that integer by the number of sides: &lt;code&gt;0.16 * 6 = 0.96&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then we &lt;strong&gt;round&lt;/strong&gt; that product up with &lt;code&gt;Math.floor&lt;/code&gt;: &lt;code&gt;0.96 -&amp;gt; 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finally, we &lt;strong&gt;add&lt;/strong&gt; one to get our final random number: &lt;code&gt;0 + 1 = 1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The result of our &lt;code&gt;rollDie(6)&lt;/code&gt; function is &lt;code&gt;1&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Our function allows for a varying number of sides, so you would only need to pass a different argument if you were rolling a different die (much to the satisfaction of all &lt;a href=&quot;https://en.wikipedia.org/wiki/Dungeons_%26_Dragons#Game_mechanics&quot;&gt;D&amp;amp;D players&lt;/a&gt; out there).&lt;/p&gt;
&lt;p&gt;You might even create some help functions to simplify calling different sided dice:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;rollD6&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rollDie&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;rollD12&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rollDie&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;rollD20&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rollDie&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// etc...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I used functions like these in Dice Roller, a handy dice rolling app for table-top gaming. You can &lt;a href=&quot;https://github.com/SeanMcP/dice-roller&quot;&gt;view the project‚Äôs source code here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;common-questions&quot; tabindex=&quot;-1&quot;&gt;Common questions&lt;/h2&gt;
&lt;p&gt;Here are some questions you may have (I know I did!) about our &lt;code&gt;rollDie&lt;/code&gt; function:&lt;/p&gt;
&lt;h3 id=&quot;%E2%80%9Cwhy-did-we-need-to-add-one-to-our-number%3F%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;‚ÄúWhy did we need to add one to our number?‚Äù&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Math.floor(Math.random() * 6)&lt;/code&gt; alone will generate a random number between 0 and 5. That is six options, but I‚Äôve never seen a die numbered from zero to five. We add one to the output so that it makes sense for our situation.&lt;/p&gt;
&lt;h3 id=&quot;%E2%80%9Cwouldn%E2%80%99t-using-math.ceil-make-the-%2B-1-unnecessary%3F%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;‚ÄúWouldn‚Äôt using &lt;code&gt;Math.ceil&lt;/code&gt; make the &lt;code&gt;+ 1&lt;/code&gt; unnecessary?‚Äù&lt;/h3&gt;
&lt;p&gt;In the same manner that &lt;code&gt;Math.floor&lt;/code&gt; rounded our integer down to the nearest whole number, &lt;code&gt;Math.ceil&lt;/code&gt;‚Äìshort for ‚Äúceiling‚Äù‚Äìrounds an integer up. At face value, this would simplify our solution‚Äìbut for one issue:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;Math.random()&lt;/code&gt; &lt;strong&gt;can&lt;/strong&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/js-generate-random-number/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; return a &lt;code&gt;0&lt;/code&gt;, using &lt;code&gt;Math.ceil&lt;/code&gt; would on a rare instance return an unexpected value. So it‚Äôs safer to use &lt;code&gt;Math.floor&lt;/code&gt; and add one.&lt;/p&gt;
&lt;h3 id=&quot;%E2%80%9Cdoes-the-math-always-work-out%3F%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;‚ÄúDoes the math always work out?‚Äù&lt;/h3&gt;
&lt;p&gt;I‚Äôve included a few additional examples at the bottom of this post&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/js-generate-random-number/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;. Try it out for yourself and see! &lt;span role=&quot;img&quot; aria-label=&quot;smiling face with squinting eyes emoji&quot;&gt;üòä&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;random-item-from-an-array&quot; tabindex=&quot;-1&quot;&gt;Random item from an array&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;rollDie&lt;/code&gt; works well for our dice example, but what if you want to select a random item from an array? Remember, that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Accessing_array_elements&quot;&gt;arrays are zero-indexed (MDN)&lt;/a&gt;, which means that the first item of an array is accessed with a zero (&lt;code&gt;0&lt;/code&gt;):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;first&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;second&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;third&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &#39;first&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our &lt;code&gt;rollDie&lt;/code&gt; function will never return a &lt;code&gt;0&lt;/code&gt; because we‚Äôre always adding one. By removing that addition, we can create a new function that will work well with arrays. Let‚Äôs use the code from the previous block and add:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;randomIndex&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;arrayLength&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; arrayLength&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;randomIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By calling our function and passing the length of our array, we can pull a random item from our array:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;randomIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &#39;second&#39;&lt;/span&gt;&lt;br /&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;randomIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &#39;first&#39;&lt;/span&gt;&lt;br /&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;randomIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &#39;second&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using our function in this manner is a little repetitive, so let‚Äôs create another function that will simplify the process for us:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;randomItemFrom&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;randomIndex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;randomItemFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &#39;third&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;randomItemFrom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myArray&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &#39;second&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a few handy utility functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rollDie&lt;/code&gt; for simulating a die roll with a given number of sides,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randomIndex&lt;/code&gt; for getting a valid index from an array, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;randomItemFrom&lt;/code&gt; for returning a random item from an array&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While building those, we learned about JavaScript‚Äôs &lt;code&gt;Math&lt;/code&gt; object and some of its methods: &lt;code&gt;random&lt;/code&gt;, &lt;code&gt;floor&lt;/code&gt;, and &lt;code&gt;ceil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I emphasize ‚Äúcan‚Äù because it is an &lt;a href=&quot;https://en.wikipedia.org/wiki/Edge_case&quot;&gt;edge case (Wikipedia)&lt;/a&gt;: a statistically unlikely but possible event. Programmers need to be on the lookout and account for edge cases when possible. &lt;a href=&quot;https://seanmcp.com/articles/js-generate-random-number/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Additional examples stepping through the &lt;code&gt;rollDie&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Math.random()    // 0.4
2. Multiply by 6    // 2.4
3. Math.floor       // 2
4. Add one          // 3
Random number: 3

1. Math.random()    // 0.9
2. Multiply by 6    // 5.4
3. Math.floor       // 5
4. Add one          // 6
Random number: 6

1. Math.random()    // 0.642
2. Multiply by 6    // 3.8520000000000003
3. Math.floor       // 3
4. Add one          // 4
Random number: 4
&lt;/code&gt;&lt;/pre&gt;
 &lt;a href=&quot;https://seanmcp.com/articles/js-generate-random-number/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Three reasons to learn Python</title>
            <link href="https://seanmcp.com/articles/three-reasons-to-learn-python/"/>
            <updated>2019-02-21T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/three-reasons-to-learn-python/</id>
            <content type="html">&lt;p&gt;There are tons of reasons to learn a programming language. Maybe you are new to coding and are looking for a good place to start. Maybe you‚Äôre interested in new technologies like machine learning and artificial intelligence and want to learn more. Or maybe you‚Äôre a seasoned developer who is looking to add a new language to his/her skill set.&lt;/p&gt;
&lt;p&gt;But which to choose? There are &lt;a href=&quot;https://www.quora.com/How-many-programming-languages-are-there-in-the-world&quot;&gt;hundreds of programming languages out there&lt;/a&gt;, each one vying for your attention. What should you do?&lt;/p&gt;
&lt;p&gt;Never fear, faithful reader! Here are three reasons why you (yes, you!) should learn the &lt;strong&gt;Python&lt;/strong&gt; programming language.&lt;/p&gt;
&lt;h2 id=&quot;1---versatile&quot; tabindex=&quot;-1&quot;&gt;1--‚ÄäVersatile&lt;/h2&gt;
&lt;p&gt;Python‚Äôs creator, Guido van Rossum, designed Python to be a general purpose programming language. As a result, Python can be used in a wide variety of cases: machine learning, web development, GUI development, scientific and numeric applications, software development, system administration, and more. Whatever type of programming sparks your interest, there is probably &lt;a href=&quot;https://www.python.org/about/apps/&quot;&gt;a Python application or framework for it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Major companies like Google, Instagram, Dropbox, Spotify, Reddit, Duolingo, and BitBucket; government organizations; educational institutions; and non-profits use Python for its versatility.&lt;/p&gt;
&lt;h2 id=&quot;2---beginner-friendly&quot; tabindex=&quot;-1&quot;&gt;2--‚ÄäBeginner friendly&lt;/h2&gt;
&lt;p&gt;In addition to being a general purpose programming language, Python advertises itself as being ‚Äú&lt;a href=&quot;https://docs.python.org/3.6/tutorial/appetite.html&quot;&gt;easy to use&lt;/a&gt;‚Äù. It achieves this by utilizing a simple and intuitive syntax and offering high-level data types like dictionaries.&lt;/p&gt;
&lt;p&gt;Since 1999, Python has been guided by a series of 19 principles called the ‚ÄúZen of Python.‚Äù Among these are specific guidelines to keep things simple:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Simple is better than complex.
Readability counts.
If the implementation is hard to explain, it&#39;s a bad idea.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result of this, Python is often used as the language in introductory computer science courses (notably &lt;a href=&quot;https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0001-introduction-to-computer-science-and-programming-in-python-fall-2016/index.htm&quot;&gt;MIT&lt;/a&gt;). If you are looking to learn your first language or add to a growing toolbelt, Python is a great choice.&lt;/p&gt;
&lt;h2 id=&quot;3---highly-rated&quot; tabindex=&quot;-1&quot;&gt;3--‚ÄäHighly rated&lt;/h2&gt;
&lt;p&gt;In my experience, every Python developer I have met loves working in Python. And it turns out that my anecdotal observation may be right!&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://insights.stackoverflow.com/survey/2018/&quot;&gt;StackOverlow‚Äôs Developer Survey&lt;/a&gt;‚Äì‚Ääwhich compiles user responses to demographic, technology, and work questions‚Äìshows that Python is a desirable language. It has been listed among the ‚Äú&lt;a href=&quot;https://insights.stackoverflow.com/survey/2018/##most-loved-dreaded-and-wanted&quot;&gt;Most Loved&lt;/a&gt;‚Äù languages for a while and has topped the charts in the past two years as the ‚Äú&lt;a href=&quot;https://insights.stackoverflow.com/survey/2018/&quot;&gt;Most Desired&lt;/a&gt;‚Äù language. If a lot of other developers like using Python, or want to learn Python, then it is probably going to be a good experience.&lt;/p&gt;
&lt;p&gt;[Sidebar: If you haven‚Äôt before, take the time to look over the results of the &lt;a href=&quot;https://insights.stackoverflow.com/survey/2018/&quot;&gt;2018 Developer Survey&lt;/a&gt;. It isn‚Äôt perfect, suffering from both &lt;a href=&quot;https://en.wikipedia.org/wiki/Participation_bias&quot;&gt;participation&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Response_bias&quot;&gt;response bias&lt;/a&gt;, but does open a window into the world of development.]&lt;/p&gt;
&lt;h2 id=&quot;bonus---python-jokes!&quot; tabindex=&quot;-1&quot;&gt;Bonus--‚ÄäPython jokes!&lt;/h2&gt;
&lt;p&gt;Van Rossum named the Python programming language not after the &lt;a href=&quot;https://en.wikipedia.org/wiki/Python_%28genus%29&quot;&gt;serpent genus&lt;/a&gt; (as I previously assumed) but after the British TV comedy ‚ÄúMonty Python‚Äôs Flying Circus.‚Äù According to the &lt;a href=&quot;https://docs.python.org/3.6/tutorial/appetite.html&quot;&gt;Python Software Foundation&lt;/a&gt;, ‚ÄúMaking references to Monty Python skits in documentation is not only allowed, it is encouraged!‚Äù&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.giphy.com/media/RBEUIVI6ey5Ta/giphy.webp&quot; alt=&quot;The laughing French knight from Monty Python&#39;s Holy Grail&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There you go: three (and a half) reasons why you should learn Python.&lt;/p&gt;
&lt;p&gt;If you are looking for a good place to get started, I recommend the &lt;a href=&quot;https://docs.python.org/3/&quot;&gt;Python Docs&lt;/a&gt;: they are well-written and -paced for a beginner diving into the language.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Adding accessibility checks to your React app</title>
            <link href="https://seanmcp.com/articles/adding-accessibility-checks-to-react/"/>
            <updated>2019-03-04T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/adding-accessibility-checks-to-react/</id>
            <content type="html">&lt;p&gt;&lt;strong&gt;Updated - 3/9/19&lt;/strong&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/adding-accessibility-checks-to-react/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Whether you are working for a startup, non-profit, or Fortune 500 company, accessibility is a critical component of your product. Not only it is a legal requirement in many countries&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/adding-accessibility-checks-to-react/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;, but creating accessible applications maximizes the number of potential users. And it often has a positive impact on all users (&lt;a href=&quot;https://ssir.org/articles/entry/the_curb_cut_effect&quot;&gt;read about the ‚ÄúCurb Cut Effect‚Äù&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As React developers, we have a responsibility to avoid hiding in the virtual DOM and work to ensure that the components we craft are going to work for everyone. Fortunately for us, React has &lt;a href=&quot;https://reactjs.org/docs/accessibility.html&quot;&gt;React has accessibility features built into the platform&lt;/a&gt; to make our jobs easier.&lt;/p&gt;
&lt;p&gt;In this article, we‚Äôre going to look at two additional tools than can help React developers create awesome and accessible applications for all.&lt;/p&gt;
&lt;h2 id=&quot;setup&quot; tabindex=&quot;-1&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;To demonstrate these features, I‚Äôm going to bootstrap a new project with React‚Äôs &lt;a href=&quot;https://facebook.github.io/create-react-app/&quot;&gt;Create React App&lt;/a&gt;. It‚Äôs a great way to spin up a new project and works nicely with the accessibility checks we‚Äôre going to implement.&lt;/p&gt;
&lt;p&gt;If you‚Äôre looking to add these checks to a current project, the only dependency is ESLint, which we‚Äôll look at later in this article. Now, let‚Äôs jump in!&lt;/p&gt;
&lt;h2 id=&quot;react-axe&quot; tabindex=&quot;-1&quot;&gt;React-axe&lt;/h2&gt;
&lt;p&gt;Create React App already has wonderfully helpful console messages, and react-axe is an out-of-the-box solution that adds accessibility checking to your console.&lt;/p&gt;
&lt;p&gt;React-axe is developed by Deque, the makers of the fantastic accessibility tools like the &lt;a href=&quot;https://www.deque.com/axe/&quot;&gt;Axe browser extension&lt;/a&gt; (which I highly recommend). Install it in the usual way:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add --dev react-axe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once installed, we‚Äôll check for a development environment before requiring and calling react-axe‚Äôs &lt;code&gt;axe&lt;/code&gt; function and passing certain parameters.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react-dom&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./components/App&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;development&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; axe &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;react-axe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;axe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;root&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final parameter for &lt;code&gt;axe&lt;/code&gt; is ‚Äúa timing delay in milliseconds that will be observed between each component change and the time the analysis starts‚Äù (&lt;a href=&quot;https://github.com/dequelabs/react-axe/#initialize-the-module&quot;&gt;source&lt;/a&gt;). We‚Äôll set it to 1000ms, or one second.&lt;/p&gt;
&lt;p&gt;Now if I give an element an invalid role (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;role=&amp;quot;Test&amp;quot;&lt;/code&gt;), I‚Äôm met with the following console message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;‚ñ∏ critical: ARIA roles used must conform to valid values
https://dequeuniversity.com/rules/axe/3.1/aria-roles?application=axeAPI
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Expanding the message provides a reference to the original document, and a file and line reference to fix the issue. The console errors are helpful without being overwhelming and provide all the information and resources you need to fix the issue.&lt;/p&gt;
&lt;p&gt;Console warnings are great, but let‚Äôs add another tool to help catch mistakes before they make it to the browser.&lt;/p&gt;
&lt;h2 id=&quot;jsx-a11y&quot; tabindex=&quot;-1&quot;&gt;Jsx-a11y&lt;/h2&gt;
&lt;p&gt;Jsx-a11y is an ESLint plugin that looks over your code for some key accessibility considerations. If you don‚Äôt have ESLint added to your project yet, follow their &lt;a href=&quot;https://eslint.org/docs/user-guide/getting-started&quot;&gt;get started guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you bootstrapped your React app with &lt;code&gt;create-react-app&lt;/code&gt; like I did, it already has ESLint and some of jsx-a11y‚Äôs accessibility checking included. For the sake of this article, we‚Äôre going to add the full set of rules, so we‚Äôll need to install the plugin library:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add --dev eslint-plugin-jsx-a11y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then modify the ESLint configs in your &lt;code&gt;package.json&lt;/code&gt; to match the following:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;eslintConfig&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;jsx-a11y&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;react-app&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;plugin:jsx-a11y/recommended&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we make a change that reduces our app‚Äôs accessibility, like removing the &lt;code&gt;alt&lt;/code&gt; attribute for an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, we‚Äôre met with the following lint warning:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./src/components/App/App.js
    Line 10:  img elements must have an alt prop, either with meaningful text, or an empty string for decorative images  jsx-a11y/alt-text
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more customization over which rules jsx-a11y uses, refer to &lt;a href=&quot;https://github.com/evcohen/eslint-plugin-jsx-a11y#eslint-plugin-jsx-a11y&quot;&gt;the official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are using a text editor like VS Code that features in-line linting, you can identify and fix potential accessibility issues before you even save.&lt;/p&gt;
&lt;p&gt;With these tools in place, you‚Äôre well on your way to creating more accessible React applications!&lt;/p&gt;
&lt;h2 id=&quot;a11y-react-starter&quot; tabindex=&quot;-1&quot;&gt;A11y-react-starter&lt;/h2&gt;
&lt;p&gt;I created &lt;a href=&quot;https://github.com/seanmcp/a11y-react-starter&quot;&gt;&lt;code&gt;a11y-react-starter&lt;/code&gt;&lt;/a&gt;, a lightly-configured create-react-app with both of the above accessibility tools baked in. Check it out for a reference or use it as a starting point for your next app.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By enabling these accessibility features, you‚Äôre adding the wisdom and knowledge of the many developers who have gone before you. With their help, and a little bit of learning, anyone can create accessible applications that work for all users.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;This article was initially released with a reference to a third tool for React accessibility checking: &lt;code&gt;react-a11y&lt;/code&gt;. Since publication, that library has been deprecated. The article has been updated to reflect that change. &lt;a href=&quot;https://seanmcp.com/articles/adding-accessibility-checks-to-react/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Web_accessibility#Web_accessibility_legislation&quot;&gt;Web accessibility: Web accessibility legislation&lt;/a&gt; on Wikipedia &lt;a href=&quot;https://seanmcp.com/articles/adding-accessibility-checks-to-react/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Filter out premium Medium articles</title>
            <link href="https://seanmcp.com/articles/filter-premium-medium-articles/"/>
            <updated>2019-04-08T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/filter-premium-medium-articles/</id>
            <content type="html">&lt;p&gt;Medium has received a lot of flack recently for their push to monetize the platform. And while I don‚Äôt fault them for moving some of their best articles behind a pay wall, I have no interest in subscribing to their platform.&lt;/p&gt;
&lt;p&gt;There is still a lot of high-quality free content on Medium, but you have to navigate around all of the premium content that the platform is pushing.&lt;/p&gt;
&lt;p&gt;I wanted to write a console script that would do that filtering work for me.&lt;/p&gt;
&lt;h2 id=&quot;reach-for-the-stars&quot; tabindex=&quot;-1&quot;&gt;Reach for the stars&lt;/h2&gt;
&lt;p&gt;On Medium, premium articles can be identified on the homepage by their ‚òÖ icon. Using the inspector, you can see that the star is an &lt;code&gt;svg&lt;/code&gt; element nested in a &lt;code&gt;span&lt;/code&gt; with the class &lt;code&gt;svgIcon--star&lt;/code&gt;. Bingo!&lt;/p&gt;
&lt;p&gt;Now, using the handy &lt;code&gt;querySelectorAll&lt;/code&gt;-esque selector &lt;code&gt;$$&lt;/code&gt;, we can find all the stars on the page. Our console script starts out like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;span.svgIcon--star&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we‚Äôve selected all stars, we need to iterate over them. Since we need to do something for every item in our iterable, we‚Äôll use &lt;code&gt;forEach&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;span.svgIcon--star&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Hide parent element&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we‚Äôre iterating over the stars, we need to find and hide the appropriate parent element. To do this, we‚Äôll use a neat &lt;code&gt;Element&lt;/code&gt; method called &lt;code&gt;closest&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;finding-a-parent-with-closest&quot; tabindex=&quot;-1&quot;&gt;Finding a parent with &lt;code&gt;closest&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You may be familiar with the &lt;code&gt;querySelector&lt;/code&gt; method, which starts with a given element and then searches down the DOM tree and returns the first match.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;closest&lt;/code&gt; works the same way, but in reverse. It starts with an element, then travels &lt;strong&gt;up&lt;/strong&gt; the DOM tree. This makes it the perfect method for starting with an element and looking for a specific parent.&lt;/p&gt;
&lt;p&gt;Using the inspector again, we can see that articles outside the featured section are &lt;code&gt;div&lt;/code&gt;s with the class &lt;code&gt;streamItem&lt;/code&gt;. Using &lt;code&gt;closest&lt;/code&gt;, we‚Äôll grab those elements:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;span.svgIcon--star&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  star&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.streamItem&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Hide element&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I had never used the &lt;code&gt;closest&lt;/code&gt; method before and was glad to find it. As always, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/closest&quot;&gt;I read up about it on MDN&lt;/a&gt; before using it.&lt;/p&gt;
&lt;p&gt;We‚Äôve selected the correct parent element; now we need to hide it.&lt;/p&gt;
&lt;h2 id=&quot;hiding-an-element&quot; tabindex=&quot;-1&quot;&gt;Hiding an element&lt;/h2&gt;
&lt;p&gt;Removing an element in JavaScript is more difficult than it should be. There is no &lt;code&gt;remove&lt;/code&gt; method on the global &lt;code&gt;Element&lt;/code&gt;. Instead, you need to jump up to the parent element and then use &lt;code&gt;removeChild&lt;/code&gt;. The normal strategy looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.remove-me&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think this pattern is annoying and try to avoid it whenever possible. But we could use it in our instance by first creating a variable to reference the element to be removed:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Option 1 - Remove element&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;span.svgIcon--star&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; article &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; star&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.streamItem&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  article&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;article&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is your best option if you need to remove the element from the DOM.&lt;/p&gt;
&lt;p&gt;My preferred method leaves the element in the DOM and applies CSS styles to hide it from view. We‚Äôll set the article element‚Äôs &lt;code&gt;display&lt;/code&gt; style to &lt;code&gt;&#39;none&#39;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Option 2 - Hide element&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;span.svgIcon--star&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;star&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  star&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.streamItem&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;display &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;none&#39;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unless you &lt;strong&gt;need&lt;/strong&gt; to remove and element from the DOM, the simpler solution is to just hide the element.&lt;/p&gt;
&lt;h2 id=&quot;save-for-later&quot; tabindex=&quot;-1&quot;&gt;Save for later&lt;/h2&gt;
&lt;p&gt;Chrome has a handy feature in the ‚ÄúSources‚Äù tab called snippets. Here you can save bits of code for use later.&lt;/p&gt;
&lt;p&gt;I created a snippet title ‚ÄúMedium‚Äù and saved the above code. Now when I want to filter out premium articles, I just need to run that snippet with &lt;kbd&gt;command&lt;/kbd&gt; + &lt;kbd&gt;enter&lt;/kbd&gt;.&lt;/p&gt;
&lt;h2 id=&quot;read-on&quot; tabindex=&quot;-1&quot;&gt;Read on&lt;/h2&gt;
&lt;p&gt;Now the next time I want to find an article to read on Medium, I can run the snippet and filter out premium articles.&lt;/p&gt;
&lt;p&gt;For a more reusable solution, we could turn this snippet into a browser extension, but that‚Äôs the topic of another article.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Storing data in state vs. class variable</title>
            <link href="https://seanmcp.com/articles/storing-data-in-state-vs-class-variable/"/>
            <updated>2019-04-12T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/storing-data-in-state-vs-class-variable/</id>
            <content type="html">&lt;p&gt;This past week I was working with a new coworker who has previous experience developing but is new to React. After picking up a few syntax cues, he started writing class components in what was a familiar manner for him: storing information as class variables in the constructor.&lt;/p&gt;
&lt;p&gt;The constructor from one of his components looked like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Later on, when he wanted to update the value stored on the object, he did with a simple reassignment:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;new value&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After reviewing his code, I tried to explain the ‚Äúcorrect‚Äù pattern for storing data in React. I said (something like):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I see that you‚Äôre using class variables to store information on your React component. That‚Äôs not a common pattern. Instead, we use a state object that is referenced with &lt;code&gt;this.state.whatever&lt;/code&gt;. When we want to update the data, we call &lt;code&gt;this.setState&lt;/code&gt; and pass the new information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He naturally asked why that was the case, because his code was working as is. I went into a mealy-mouthed explanation with gem quotes like ‚Äúclasses in React aren‚Äôt &lt;em&gt;true&lt;/em&gt; classes‚Äù, and ‚Äústate isn‚Äôt &lt;em&gt;actually&lt;/em&gt; stored in the component‚Äù. None of what I stumbled through answered his original question.&lt;/p&gt;
&lt;p&gt;Realizing that I was talking out of ignorance, I stopped and offered a more honest: ‚ÄúActually, I don‚Äôt really know.‚Äù Then I turned to Google to find the answer.&lt;/p&gt;
&lt;h2 id=&quot;class-variables&quot; tabindex=&quot;-1&quot;&gt;Class variables&lt;/h2&gt;
&lt;p&gt;I thought that storing class variables was almost always a bad idea. The only use cases that I had personally encountered before were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setting and clearing timeouts&lt;/li&gt;
&lt;li&gt;Storing frequently-referenced values&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, my colleague‚Äôs work showed that class variables can be used to manage and update data.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example of using class variables to create a counter:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VariableCounter&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;The count is&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;increment&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Add one&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the component is initiated, a class variable named &lt;code&gt;count&lt;/code&gt; is set to &lt;code&gt;0&lt;/code&gt;. When the &lt;code&gt;increment&lt;/code&gt; method is called, it updates &lt;code&gt;count&lt;/code&gt; by adding one to the previous value. The rest of the component is pretty standard.&lt;/p&gt;
&lt;p&gt;After writing up this simple example, I thought this code would work. But I was wrong. You can click the button as much as you want, but the &lt;code&gt;count&lt;/code&gt; value displayed in the component will never change.&lt;/p&gt;
&lt;p&gt;If you throw a breakpoint or add a &lt;code&gt;console.log&lt;/code&gt; to &lt;code&gt;increment()&lt;/code&gt;, you‚Äôd see that the method is indeed called and the value of &lt;code&gt;this.count&lt;/code&gt; is incremented, but the component never reflects the change.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That‚Äôs because React components will only re-render when there are changes to &lt;code&gt;props&lt;/code&gt; or &lt;code&gt;state&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Updating the class variable involves neither, so it does not trigger a re-render. This explains why the &lt;code&gt;count&lt;/code&gt; changes in our example, but the displayed value never updates.&lt;/p&gt;
&lt;p&gt;In order to use class variables, we need to take the responsibility of triggering the re-render when our data changes. To do that, we need to add a line to our example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;VariableCounter&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;The count is&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;increment&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Add one&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forceUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;React class components have a &lt;code&gt;forceUpdate&lt;/code&gt; method that triggers the &lt;code&gt;render&lt;/code&gt; method. By calling &lt;code&gt;this.forceUpdate()&lt;/code&gt; after incrementing our class value, we can get our displayed value to update.&lt;/p&gt;
&lt;p&gt;I had never heard of this method before, and there is a reason why: the React team doesn‚Äôt recommend using it. Here‚Äôs a line from &lt;a href=&quot;https://reactjs.org/docs/react-component.html#forceupdate&quot;&gt;the React documentation on &lt;code&gt;forceUpdate&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Normally you should try to avoid all uses of &lt;code&gt;forceUpdate()&lt;/code&gt; and only read from &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; in &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In some instances you may receive data from other sources, but otherwise &lt;strong&gt;try to avoid manually managing a component‚Äôs render&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The alternative to using class variables and forcing updates is leveraging React‚Äôs component state.&lt;/p&gt;
&lt;h2 id=&quot;component-state&quot; tabindex=&quot;-1&quot;&gt;Component State&lt;/h2&gt;
&lt;p&gt;Instead of setting our count as a class variable, let‚Äôs instead create a state object on our class and store the data there.&lt;/p&gt;
&lt;p&gt;We only need to make a few modifications to the &lt;code&gt;VariableCounter&lt;/code&gt; for our new component:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StateCounter&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;The count is&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;increment&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Add one&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      &lt;span class=&quot;token parameter&quot;&gt;prevState&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; prevState&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While instantiating a state object might look like the previous example using a class variable, &lt;code&gt;state&lt;/code&gt; is a protected keyword in React that refers to stored component data.&lt;/p&gt;
&lt;p&gt;You can access data from state with normal object dot or bracket notation, so the current count can be referenced with &lt;code&gt;this.state.count&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The major difference between using class variables and state is updating data. Instead of manually reassigning the variable, you call &lt;code&gt;this.setState()&lt;/code&gt; and pass it an object or a function that returns an object.&lt;/p&gt;
&lt;p&gt;When you call &lt;code&gt;this.setState()&lt;/code&gt;, React merges the passed object into the current state to create a new state object. Then it compares this new state to the previous state. If there is a change, React re-renders the component, resulting in the updated &lt;code&gt;count&lt;/code&gt; value displayed on the screen.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By using &lt;code&gt;this.setState()&lt;/code&gt;, you let React handle the logic of whether to re-render the component.&lt;/strong&gt; This is a feature of React and one of the reasons it has become so popular.&lt;/p&gt;
&lt;h2 id=&quot;example&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h2&gt;
&lt;p&gt;I created a CodeSandbox example of the components discussed above. There are working state and class variable counters; with a bonus functional component using &lt;code&gt;React.useState()&lt;/code&gt;, and a broken class variable counter without &lt;code&gt;this.forceUpdate()&lt;/code&gt;. Check it out:&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/n40x05xy8l?fontsize=14&quot; title=&quot;React State vs. Class Variables&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; sandbox=&quot;allow-modals allow-forms allow-popups allow-scripts allow-same-origin&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;summary&quot; tabindex=&quot;-1&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Contrary to what I initially thought, it‚Äôs okay to store component data as a class variable. However, if you‚Äôre going to render that data, you should instead store it in state so that any changes trigger a re-render. &lt;strong&gt;Ninety-five percent of the time, you‚Äôll store data in state.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that you know the difference between storing data in state and class variables, you can be more helpful than I was to your fellow developers.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Why I switched from Gatsby to Eleventy</title>
            <link href="https://seanmcp.com/articles/why-i-switched-from-gatsby-to-eleventy/"/>
            <updated>2019-04-12T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/why-i-switched-from-gatsby-to-eleventy/</id>
            <content type="html">&lt;p&gt;I spent the last few weeks exploring Eleventy, a simpler static-site generator. After tinkering for a few days, I decided to transition this website from Gatsby to Eleventy.&lt;/p&gt;
&lt;p&gt;I‚Äôm going to take the opportunity explain my decision for the benefit of myself and others who are looking for a static-site generator.&lt;/p&gt;
&lt;h2 id=&quot;disclaimer&quot; tabindex=&quot;-1&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;Before I dive into my reasons for switching from Gatsby to Eleventy, I would like to state: &lt;strong&gt;I like Gatsby&lt;/strong&gt;. I have no major criticisms of the project and would turn to it first if I were making a rich static site for a small business or enterprise. All of the following are not reasons why Gatsby is bad but rather why I preferred Eleventy for this blog.&lt;/p&gt;
&lt;!-- 
### Gatsby

In case you haven&#39;t heard of it, Gatsby is one of the fastest-growing static site generators. The project was started by [Kyle Mathews](https://github.com/kyleamathews) way back in 2015 and has grown into a &quot;free and open source framework based on React that helps developers build blazing fast websites and apps&quot;.

For this reason (and others), Gatsby has become the first choice for React developers looking to create a static site with a growing ecosystem of powerful plugins.

### Eleventy

While some folks may have heard of Gatsby before, fewer will be familiar Eleventy. Created by [Zach Leatherman](https://github.com/zachleat) in November 2017, Eleventy bills itself as &quot;a simpler static site generator.&quot; In a directory with only a single markdown file, Eleventy can generate a static site with one command:

```bash
eleventy
```

Folks at CERN, Google, Netlify, CSS-Tricks, and [loads of others](https://www.11ty.io/docs/sites/) are using Eleventy to generate static sites. --&gt;
&lt;h2 id=&quot;the-initial-decision&quot; tabindex=&quot;-1&quot;&gt;The initial decision&lt;/h2&gt;
&lt;p&gt;After kicking around the idea of moving off Medium to a personal blog, I decided to take the plunge in the Fall of 2018. After a quick survey of the options, I settled on Gatsby for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;React based&lt;/strong&gt;: I am a React developer and loved the idea of using a familiar library for creating the components of my personal website.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GraphQL powered&lt;/strong&gt;: I didn‚Äôt know much about GraphQL at the time, but everything I heard was positive.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Growing popularity&lt;/strong&gt;: It seemed that everyone in the React community was launching a new Gatsby site. All aboard the hype train!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I tinkered around with the setup for a few weeks, then launched the site late in 2018.&lt;/p&gt;
&lt;h2 id=&quot;honeymoon&quot; tabindex=&quot;-1&quot;&gt;Honeymoon&lt;/h2&gt;
&lt;p&gt;Gatsby has a bit of a learning curve, but after the first few weeks I felt comfortable working in their environment. Whenever I wanted to tweak the layout, design, and/or functionality of the site, I felt comfortable diving into the JavaScript to make the change.&lt;/p&gt;
&lt;p&gt;Gatsby‚Äôs integration with Netlify was seamless as well&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/why-i-switched-from-gatsby-to-eleventy/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;, which made pushing changes to production as easy as pushing code.&lt;/p&gt;
&lt;p&gt;With my Gatsby personal site and blog, I was riding high with the cool kids.&lt;/p&gt;
&lt;h2 id=&quot;cracks-start-to-form&quot; tabindex=&quot;-1&quot;&gt;Cracks start to form&lt;/h2&gt;
&lt;p&gt;As the months rolled by, however, I started to struggle with my Gatsby-powered site. There were a few specific ways where those manifested themselves.&lt;/p&gt;
&lt;h3 id=&quot;tinker-temptation&quot; tabindex=&quot;-1&quot;&gt;Tinker temptation&lt;/h3&gt;
&lt;p&gt;I found myself spending significantly more time making minor tweaks to the site than I did writing. This is partly a personal problem; I have a fixed mindset about writing that can throw significant blocks. I‚Äôm working on valuing production over perfection in that error.&lt;/p&gt;
&lt;p&gt;And the fact that my site was written in React provided me ample temptation to postpone writing in favor of tinkering. Whenever I found it difficult to write, I would create, then refactor, then recreate, then refactor components &lt;em&gt;ad nauseam&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It was not uncommon for me to have over a dozen commits on my blog a week, but no article to show for it. Gatsby‚Äôs strength of using React ended up a weakness for me as a writer.&lt;/p&gt;
&lt;h3 id=&quot;modern-complication&quot; tabindex=&quot;-1&quot;&gt;Modern complication&lt;/h3&gt;
&lt;p&gt;Gatsby‚Äôs surge in popularity at the end of 2018 drew criticism from certain sections of the web. The criticism usually centered around Gatsby‚Äôs modern tooling, which is more advanced than some of its competitors.&lt;/p&gt;
&lt;p&gt;Mark Dalgleish, one of my funniest follows on Twitter, shared that sentiment with this gem of a meme:&lt;/p&gt;
&lt;!-- EMBED THE MEME, DOG --&gt;
&lt;p&gt;I think this criticism is a little misguided, but there is a truth to the implied question: ‚ÄúWhy do you need to use all these fancy tools for a simple blog?‚Äù&lt;/p&gt;
&lt;p&gt;As I struggled with the aforementioned temptation to tinker instead of write, that question was left ringing in my ears. Maybe there was a simpler system for my site?&lt;/p&gt;
&lt;h3 id=&quot;the-final-straw&quot; tabindex=&quot;-1&quot;&gt;The final straw&lt;/h3&gt;
&lt;p&gt;I have a 2010 MacBook Pro on which I occasionally do some work. Despite it‚Äôs age, the computer still does a great job keeping up with the modern development environment. Up until recently, I used that laptop exclusively for personal projects, and it never had a problem (besides speed).&lt;/p&gt;
&lt;p&gt;That is, until it met Gatsby.&lt;/p&gt;
&lt;p&gt;Try as I might, I could not get my Gatsby site to run on that computer. I changed Node versions, updated &lt;code&gt;gatsby-cli&lt;/code&gt;, and cloned and re-cloned the repository, but to no avail.&lt;/p&gt;
&lt;p&gt;I just resigned myself to not using that computer (it &lt;em&gt;is&lt;/em&gt; almost ten years old). But then, a two months ago out of the blue, I had the same problem with my work computer (2015 MacBook Pro). Try as I might, I couldn‚Äôt get Gatsby running.&lt;/p&gt;
&lt;p&gt;Now there is almost certainly a solution to the problem on both of my computers. But I searched for a while, tried a few workarounds, and couldn‚Äôt find it. At some point, you need to ask: is it worth it?&lt;/p&gt;
&lt;p&gt;I decided that, instead of sinking more time tracking down this problem, I would instead investigate different generator solutions.&lt;/p&gt;
&lt;h2 id=&quot;investigating-alternatives&quot; tabindex=&quot;-1&quot;&gt;Investigating alternatives&lt;/h2&gt;
&lt;h2 id=&quot;making-the-switch&quot; tabindex=&quot;-1&quot;&gt;Making the switch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Simplicity
&lt;ul&gt;
&lt;li&gt;Meme&lt;/li&gt;
&lt;li&gt;Diagnosing Gatsby problems&lt;/li&gt;
&lt;li&gt;Gatsby problems on older systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Not React
&lt;ul&gt;
&lt;li&gt;React === reusability&lt;/li&gt;
&lt;li&gt;Felt wrong creating 90+% single-use components&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;In retrospect, I think this has more to do with Netlify‚Äôs amazing service than Gatsby. &lt;a href=&quot;https://seanmcp.com/articles/why-i-switched-from-gatsby-to-eleventy/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Add event listener for class change</title>
            <link href="https://seanmcp.com/articles/event-listener-for-class-change/"/>
            <updated>2019-05-10T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/event-listener-for-class-change/</id>
            <content type="html">&lt;p&gt;If you‚Äôre like me and spent some time searching for an event listener for class changes, let me save you some time: &lt;strong&gt;there isn‚Äôt one&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;However, you can create your own custom event listener using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver&quot;&gt;&lt;code&gt;MutationObserver&lt;/code&gt; API&lt;/a&gt;. Let‚Äôs look at how to create a simple listener for class changes.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MutationObserver&lt;/code&gt; is a constructor that can allows you to watch any changes to the DOM tree. The constructor takes a callback function that will receive two arguments: a list of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord&quot;&gt;MutationRecords&lt;/a&gt;, and a reference to the observer.&lt;/p&gt;
&lt;p&gt;First, let‚Äôs first create a callback that logs its parameters and then construct a new &lt;code&gt;MutationObserver&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;mutationsList&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; observer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Mutations:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; mutationsList&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Observer:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; observer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mutationObserver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MutationObserver&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We‚Äôve constructed basic custom observer, but we need to listen for changes on something. To add our custom event listener, we need to call the created observer‚Äôs &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe&quot;&gt;&lt;code&gt;observe()&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MutationObserver.observe()&lt;/code&gt; takes two arguments: the DOM node target, and an optional options object. We‚Äôll call this method and pass it a node reference and one option:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;mutationObserver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;observe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;main&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This set our &lt;code&gt;MutationObserver&lt;/code&gt; to look for any changes to the &lt;code&gt;main&lt;/code&gt;‚Äôs attributes. If we trigger a change, we can see the two logs from &lt;code&gt;callback()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Mutations:
[MutationRecord]

Observer:
MutationObserver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On each &lt;code&gt;MutationRecord&lt;/code&gt; object, there is an &lt;code&gt;attributeName&lt;/code&gt; property. If that value is equal to ‚Äòclass‚Äô, then we know that there has been a change to the element‚Äôs class name.&lt;/p&gt;
&lt;p&gt;Now we can update the &lt;code&gt;callback&lt;/code&gt; function by adding a condition:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;mutationsList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    mutationsList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;mutation&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mutation&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;attributeName &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;class&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;            &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Ch-ch-ch-changes!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code will fire an alert if any item in &lt;code&gt;mutationsList&lt;/code&gt; records a change to &lt;code&gt;main&lt;/code&gt;‚Äôs class attribute.&lt;/p&gt;
&lt;p&gt;If you need to stop your custom event listener later, use &lt;code&gt;MutationObserver&lt;/code&gt;‚Äôs &lt;code&gt;disconnect()&lt;/code&gt; method to remove it like you would a normal event listener:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;mutationObserver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;example&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h2&gt;
&lt;p&gt;Checkout a working example of custom event listener for class change on CodePen:&lt;/p&gt;
&lt;iframe height=&quot;500&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;Event listener for class change&quot; src=&quot;https://codepen.io/SeanMcP/embed/preview/RmWJvV/?height=500&amp;theme-id=0&amp;default-tab=js,result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&quot;https://codepen.io/SeanMcP/pen/RmWJvV/&quot;&gt;Event listener for class change&lt;/a&gt; by Sean McPherson
  (&lt;a href=&quot;https://codepen.io/SeanMcP&quot;&gt;@SeanMcP&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>How to pronounce my name</title>
            <link href="https://seanmcp.com/articles/how-to-pronounce-my-name/"/>
            <updated>2019-06-15T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/how-to-pronounce-my-name/</id>
            <content type="html">&lt;p&gt;My name is Sean McPherson, and I have an often-mispronounced name. I wanted to take the opportunity for all those curious the history and pronunciation of my first and last names, and handle.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; My name is pronounced ‚ÄúShon Mick¬∑Fur¬∑sen‚Äù and my handle is ‚ÄúShon Mick¬∑Pea‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;sean&quot; tabindex=&quot;-1&quot;&gt;Sean&lt;/h2&gt;
&lt;p&gt;Sean is an Irish counterpart to the English name John and the French name Jean. They all come from the Hebrew name &lt;em&gt;Yohanan&lt;/em&gt; which means ‚ÄúGod is gracious.‚Äù&lt;/p&gt;
&lt;p&gt;Irish names in general are difficult for English-speakers to read, because the letters represent different phonemes, or sounds. To resolve this, Sean is often Anglicized as the more English phonetic ‚ÄúShaun‚Äù or ‚ÄúShawn.‚Äù&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I pronounce Sean as ‚ÄúShon.‚Äù&lt;/strong&gt; This is the most common pronunciation, though you may have the good pleasure of coming across a ‚ÄúSeen‚Äù in your life. I‚Äôve been told that there is a pronunciation of Sean that is closer to the English ‚ÄúShane‚Äù, but I‚Äôve never met one.&lt;/p&gt;
&lt;p&gt;If you know a ‚ÄúShon‚Äù spelled Sean in your life, please do pronounce the name appropriately. Chances are they, like me, have had their name mispronounced many times in their life, both accidentally and deliberately, and chafe at the sound of ‚ÄúSeen.‚Äù&lt;/p&gt;
&lt;h3 id=&quot;mispronuncations-to-avoid&quot; tabindex=&quot;-1&quot;&gt;Mispronuncations to avoid&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;‚ÄúSeen‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúSay-on‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúSee-an‚Äù&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mcpherson&quot; tabindex=&quot;-1&quot;&gt;McPherson&lt;/h2&gt;
&lt;p&gt;McPherson is a version of the Scottish surname Macpherson. In the original Scots Gaelic, the name is rendered &lt;em&gt;Mac a‚Äô Phearsain&lt;/em&gt; and means ‚Äúson of the parson.‚Äù&lt;/p&gt;
&lt;p&gt;Macpherson is the name of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Scottish_clan&quot;&gt;clan that hails from the Scottish Highlands&lt;/a&gt;. From there, the Macphersons spread throughout the British Isles, to the Americas, Australia, and the rest of the world.&lt;/p&gt;
&lt;p&gt;Said with a Scottish accent, Macpherson is approximately pronounced ‚ÄúMack¬∑Fair¬∑sen.‚Äù I‚Äôve learned from Scots that there is no major distinction between ‚ÄúMac‚Äù and ‚ÄúMc‚Äù names; it‚Äôs largely a family or individual decision.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I pronounce McPherson as ‚ÄúMick¬∑Fur¬∑sen.‚Äù&lt;/strong&gt; In my experience, this is less common than a ‚ÄúMick¬∑Fear¬∑sen‚Äù pronunciation. However, I feel my version is a) closer to the Scottish pronunciation, and b) more phonetic in American English. There are members of my own family who disagree and prefer ‚ÄúFear‚Äù to ‚ÄúFur.‚Äù&lt;/p&gt;
&lt;h3 id=&quot;mispronuncations-to-avoid-1&quot; tabindex=&quot;-1&quot;&gt;Mispronuncations to avoid&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;‚ÄúMick¬∑Fear¬∑sen‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúMick¬∑Person‚Äù&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mcp&quot; tabindex=&quot;-1&quot;&gt;McP&lt;/h2&gt;
&lt;p&gt;Scottish and Irish surnames beginning with Mac/Mc are often abbreviated with the first letter after the prefix. For example, the name ‚ÄúMcDonald‚Äù could be shortened to ‚ÄúMcD.‚Äù&lt;/p&gt;
&lt;p&gt;When reading one of the abbreviated names, the pronunciation is preserved for the prefix, but the letter is read by its name. ‚ÄúMcD‚Äù would be read as ‚ÄúMick¬∑Dee‚Äù and not ‚ÄúEm¬∑See¬∑Dee‚Äù nor ‚ÄúMick¬∑Duh.‚Äù&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I pronounce McP as ‚ÄúMick¬∑Pea.‚Äù&lt;/strong&gt; My surname is unique in that the first letter after the prefix, p, is not pronounced in the full version. Despite this, I am still a McP along with all the McPattersons, and McPartlands of the world.&lt;/p&gt;
&lt;p&gt;This article was originally posted on &lt;a href=&quot;https://seanmcp.com/&quot;&gt;SeanMcP.com&lt;/a&gt;, which you now know is read ‚ÄúShon Mick¬∑Pea Dot Com.‚Äù&lt;/p&gt;
&lt;h3 id=&quot;mispronuncations-to-avoid-2&quot; tabindex=&quot;-1&quot;&gt;Mispronuncations to avoid&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;‚ÄúEm¬∑See¬∑Pea‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúMick¬∑Puh‚Äù&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;to-each-their-own&quot; tabindex=&quot;-1&quot;&gt;To each their own&lt;/h2&gt;
&lt;p&gt;You may come across another Sean McPherson who pronounces his name differently than I do; and that‚Äôs okay. It is our reasonable responsibility to learn and use the correct pronunciation of our neighbor‚Äôs name to the best of our ability.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Reasons to use prop-types</title>
            <link href="https://seanmcp.com/articles/reasons-to-use-prop-types/"/>
            <updated>2019-06-27T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/reasons-to-use-prop-types/</id>
            <content type="html">&lt;p&gt;I work in an environment where we have dozens of developers across multiple locations and countries working on a few central applications. This requires a level of organization and coordination to ensure that the team is working collaboratively and efficiently.&lt;/p&gt;
&lt;p&gt;One of the ways we can encourage efficient collaboration is by type checking in our React applications with the &lt;code&gt;prop-types&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;Here are two reasons why you should be using &lt;code&gt;prop-types&lt;/code&gt; in your React applications.&lt;/p&gt;
&lt;h2 id=&quot;catch-errors&quot; tabindex=&quot;-1&quot;&gt;Catch errors&lt;/h2&gt;
&lt;p&gt;The most immediate benefit to using prop-types is that you can catch and diagnose errors quickly while working on your application. If you instantiate a component and pass invalid props or forget to pass required props, the library will send you a console warning that details each mistake.&lt;/p&gt;
&lt;p&gt;Let‚Äôs say you have a &lt;code&gt;OrderedList&lt;/code&gt; component that renders children based on an array of &lt;code&gt;items&lt;/code&gt; passed as a prop. It might look like this:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;OrderedList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;meta&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; OrderedList&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now what would happen if instantiated this component without passing it an array of items? React will throw an error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TypeError

props.items is undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could probably resolve the issue from that message, but what would happen if &lt;code&gt;OrderedList&lt;/code&gt; was passed an array, but the items were strings, or numbers, or objects with different properties?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TypeError

item.meta is undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;document-components&quot; tabindex=&quot;-1&quot;&gt;Document components&lt;/h2&gt;
&lt;p&gt;When you are working on a larger code base with multiple users, it is easy to lose track of the available components. When you want to use a component that you didn‚Äôt create or haven‚Äôt look at in a while, it can be difficult to determine what props that component requires.&lt;/p&gt;
&lt;p&gt;Take for example the this &lt;code&gt;LoginForm&lt;/code&gt; component using &lt;a href=&quot;https://npmjs.com/package/formik&quot;&gt;&lt;code&gt;Formik&lt;/code&gt;&lt;/a&gt;. Try to quickly determine what props this component requires:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;LoginForm&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Heading &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headingLevel&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Heading&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Heading&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Formik&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;initialValues&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;values&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; actions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;values&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;          actions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resetForm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onSubmit&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;handleSubmit&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Input&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;email&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Email&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Input&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Password&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;password&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;submit&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could do it, but it is time consuming and can be a nightmare for larger class components. Now imagine we had the same component above with the following prop-types declared below:&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;LoginForm&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;LoginForm&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;propTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;func&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;headingLevel&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; PropTypes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;oneOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now at a glance we can determine that this component needs two props, &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;login&lt;/code&gt;, and what their types and restrictions are. When I want to use &lt;code&gt;LoginForm&lt;/code&gt;, I know I need to pass it a &lt;code&gt;headingLevel&lt;/code&gt; (from 1-6) and a &lt;code&gt;login&lt;/code&gt; function. Nice and easy.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Arguments or parameters?</title>
            <link href="https://seanmcp.com/articles/arguments-or-parameters/"/>
            <updated>2019-07-30T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/arguments-or-parameters/</id>
            <content type="html">&lt;p&gt;I have a hard time remembering the difference between two common programming terms: arguments, and parameters.&lt;/p&gt;
&lt;p&gt;This simple inability leads to real insecurity when I speak with coworkers with more education and experience. Nothing inspires imposter syndrome in a more than not remembering the fundamentals!&lt;/p&gt;
&lt;p&gt;Here is the difference between the two similar terms:&lt;/p&gt;
&lt;h2 id=&quot;arguments&quot; tabindex=&quot;-1&quot;&gt;Arguments&lt;/h2&gt;
&lt;p&gt;Arguments are the data passed to a function. Think of something simple like &lt;code&gt;console.log()&lt;/code&gt;. In order to get a message written to the console, you need to pass it some information.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;One&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Every bit of information that you pass to a function is an argument. In the above example, we are assigning four arguments to &lt;code&gt;console.log()&lt;/code&gt;: &lt;code&gt;&amp;quot;One&amp;quot;&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;parameters&quot; tabindex=&quot;-1&quot;&gt;Parameters&lt;/h2&gt;
&lt;p&gt;Parameters are the data that a function is expecting. Let‚Äôs say you have a function that takes two numbers and returns the sum. It will look something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The variables that a function is expecting are its parameters. In our &lt;code&gt;sum()&lt;/code&gt; function, we are expecting two parameters: &lt;code&gt;a&lt;/code&gt;, and &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;remembering-the-difference&quot; tabindex=&quot;-1&quot;&gt;Remembering the difference&lt;/h2&gt;
&lt;p&gt;I‚Äôve been wracking my brain for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Mnemonic&quot;&gt;mnemonic device&lt;/a&gt; for remembering the difference, but have yet to come up with a great one. In the meantime, this will have to do:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Arguments&lt;/strong&gt; are data you &lt;strong&gt;assign&lt;/strong&gt; to a function, while &lt;strong&gt;parameters&lt;/strong&gt; are variables that the function is &lt;strong&gt;prepared&lt;/strong&gt; to accept.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I hear of or come up with a better one, I‚Äôll update this article.&lt;/p&gt;
&lt;p&gt;I hope that helps!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Edit a previous commit message</title>
            <link href="https://seanmcp.com/articles/edit-previous-commit-message/"/>
            <updated>2019-08-23T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/edit-previous-commit-message/</id>
            <content type="html">&lt;p&gt;At my previous company, all commit messages need to begin with a ticket name and number from Jira. If I‚Äôm working on the Bananas project and am assigned ticket 5, my commit messages will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BANANAS-5 Add user authentication
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you forget to add the ticket to the commit message, you are unable to push your code to the project repository on BitBucket.&lt;/p&gt;
&lt;p&gt;Since I commit a lot outside of work and am the type of developer who makes mistakes, I find myself with commit messages that are missing the required ticket.&lt;/p&gt;
&lt;p&gt;You might not have the same policy on your project, but you may have found yourself wanting to change a commit message. Here are two options for editing a previous commit message.&lt;/p&gt;
&lt;h2 id=&quot;change-the-most-recent-commit&quot; tabindex=&quot;-1&quot;&gt;Change the most recent commit&lt;/h2&gt;
&lt;p&gt;Sometimes you can catch the error quickly after making your commit. If you need to change the most recent commit message, you can use the &lt;code&gt;amend&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;In your project directory in the terminal, enter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will bring the most recent commit message open in your default editor. Make the necessary changes to the message, mind the formatting, save the file, and exit. You should see a read out with the updated commit message.&lt;/p&gt;
&lt;h2 id=&quot;change-an-old-commit&quot; tabindex=&quot;-1&quot;&gt;Change an old commit&lt;/h2&gt;
&lt;p&gt;More often than not, I don‚Äôt find my commit message error until many commits later. In those cases, the &lt;code&gt;amend&lt;/code&gt; flag won‚Äôt help use. We need to &lt;code&gt;rebase&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Rebasing in git is a way to change commits from long ago by reapplying all the commits from a point in time. When you &lt;code&gt;rebase&lt;/code&gt; you can rewrite the history of your project; so proceed with caution.&lt;/p&gt;
&lt;p&gt;First, you need to find the commit message from which you want to start your rebase. To do that, go to the log:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now find find the commit &lt;strong&gt;immediately prior to the one you want to change&lt;/strong&gt; and copy the hash (long series of letters and numbers). With that point of reference, you‚Äôre ready to rebase!&lt;/p&gt;
&lt;p&gt;Enter the &lt;code&gt;rebase&lt;/code&gt; command with the &lt;code&gt;interactive&lt;/code&gt; flag (you can also use &lt;code&gt;-i&lt;/code&gt; for short) and the commit hash you copied:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase --interactive &amp;lt;prior_commit_hash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will open the default editor with a list of all the commits &lt;strong&gt;after&lt;/strong&gt; the hash you provided. There is a good bit going on here, but don‚Äôt be overwhelmed. Focus on the top of where you can see a list of the commits and their messages.&lt;/p&gt;
&lt;p&gt;It should look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pick a8fc26a BANANAS-5 This is a good commit message
pick 60ac057 Change me!

# Rebase 5923966..60ac057 onto 5923966 (2 commands)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, find the commit message you want to change, and replace the word &lt;code&gt;pick&lt;/code&gt; with &lt;code&gt;reword&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pick a8fc26a BANANAS-5 This is a good commit message
reword 60ac057 Change me!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then save and exit the editor.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Lessons Learned at Abstractions 2019</title>
            <link href="https://seanmcp.com/articles/lessons-learned-at-abstractions-con-2019/"/>
            <updated>2019-08-27T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/lessons-learned-at-abstractions-con-2019/</id>
            <content type="html">&lt;p&gt;Two weeks into the job, my new employer sent me and a dozen other engineers, qa‚Äôs, and designers to &lt;a href=&quot;https://abstractions.io/&quot;&gt;Abstractions 2019&lt;/a&gt;, a cross-discipline software conference in Pittsburgh, PA. Headlining the group of speakers was the YouTuber and creater Simone Gertz, Chris Coyier of CodePen and CSS-Tricks, and Guillermo Rauch of Zeit.&lt;/p&gt;
&lt;p&gt;I took down some notes for my team and me to reference after the event. If I have time, I‚Äôll add more details including speakers, videos, and links. Until then, enjoy this for what it is!&lt;/p&gt;
&lt;h2 id=&quot;wednesday&quot; tabindex=&quot;-1&quot;&gt;Wednesday&lt;/h2&gt;
&lt;h3 id=&quot;your-work-has-moral-implications&quot; tabindex=&quot;-1&quot;&gt;Your Work Has Moral Implications&lt;/h3&gt;
&lt;p&gt;Tech has great power and great responsibility. Ensure that your team has a policy in place and make plans to protect yourself from moral crises.&lt;/p&gt;
&lt;h3 id=&quot;how-to-build-a-community-from-scratch&quot; tabindex=&quot;-1&quot;&gt;How to Build a Community from Scratch&lt;/h3&gt;
&lt;p&gt;Find a consistent schedule to hold interesting meetings in an intimate environment.&lt;/p&gt;
&lt;h3 id=&quot;deep-learning-for-developers&quot; tabindex=&quot;-1&quot;&gt;Deep Learning for Developers&lt;/h3&gt;
&lt;p&gt;The barrier to entry for machine learning is lower than ever. Check it out!&lt;/p&gt;
&lt;p&gt;Resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TensorFlow&lt;/li&gt;
&lt;li&gt;PyTorch&lt;/li&gt;
&lt;li&gt;IBM Max&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;building-accessibility-together&quot; tabindex=&quot;-1&quot;&gt;Building Accessibility Together&lt;/h3&gt;
&lt;p&gt;Every team should plan and work with accessibility in mind. Stick to best practices in design, markup, and scripting to help insure that products work well for everyone.&lt;/p&gt;
&lt;h3 id=&quot;software-for-people-who-don%E2%80%99t-want-it&quot; tabindex=&quot;-1&quot;&gt;Software for people who don‚Äôt want it&lt;/h3&gt;
&lt;p&gt;Consider the end user when making all software decisions. Strive for an application that is as accessible and usable as possible.&lt;/p&gt;
&lt;h3 id=&quot;programming-productivity&quot; tabindex=&quot;-1&quot;&gt;Programming Productivity&lt;/h3&gt;
&lt;p&gt;Take the time to create tooling to standardize best practices. Use the JavaScript AST to write custom lint tools or CodeMods that will work across the codebase.&lt;/p&gt;
&lt;h2 id=&quot;thursday&quot; tabindex=&quot;-1&quot;&gt;Thursday&lt;/h2&gt;
&lt;h3 id=&quot;practical-open-source-security&quot; tabindex=&quot;-1&quot;&gt;Practical Open Source Security&lt;/h3&gt;
&lt;p&gt;Use available tools like npm audit to scan your dependencies regularly. Make it part of the regular code reviews and automate the process as much as possible.&lt;/p&gt;
&lt;p&gt;Resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mitre&lt;/li&gt;
&lt;li&gt;Snyk&lt;/li&gt;
&lt;li&gt;webhint&lt;/li&gt;
&lt;li&gt;Lighthouse&lt;/li&gt;
&lt;li&gt;Dependabot&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;those-who-can-do-should-also-teach&quot; tabindex=&quot;-1&quot;&gt;Those Who Can Do Should Also Teach&lt;/h3&gt;
&lt;p&gt;Teaching is a great way to reinforce your knowledge, and help people. Prepare your students for the challenges of learning something new and how to work through them. Teach targetted interactive lessons in 10-15 minute bursts.&lt;/p&gt;
&lt;h3 id=&quot;mentoring-the-way-to-a-more-inclusive-workplace&quot; tabindex=&quot;-1&quot;&gt;Mentoring the Way to a More Inclusive Workplace&lt;/h3&gt;
&lt;p&gt;The tenants of good mentorship align with those of an inclusive workplace. List realistic criteria on job postings and provide specific constructive feedback throughout the hiring process. Have clear and structured onboarding, learning groups, and formalized mentorship/sponsorship. Don‚Äôt forget: mentorship is a learned skill that must be honed.&lt;/p&gt;
&lt;h3 id=&quot;readability-%26-web&quot; tabindex=&quot;-1&quot;&gt;Readability &amp;amp; Web&lt;/h3&gt;
&lt;p&gt;Reading is a complex cognitive task. Around 10% of the global population has some degree of dyslexia. Improving readability for users with dyslexia helps everyone. Readability is about anything communicating meaningful information, including icons.&lt;/p&gt;
&lt;p&gt;Fours C‚Äôs of readability&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Continuity: reputation of the information until the endpoint&lt;/li&gt;
&lt;li&gt;Conspicuity: beating easily seen or noticeable&lt;/li&gt;
&lt;li&gt;Consistency: keeping the same wording along the way&lt;/li&gt;
&lt;li&gt;Clarity: the message need to be clearly understandable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;building-afghanistan-2.0-with-%23afghangirlscode&quot; tabindex=&quot;-1&quot;&gt;Building Afghanistan 2.0 with #AfghanGirlsCode&lt;/h3&gt;
&lt;h3 id=&quot;an-unforgettable-developer-experience&quot; tabindex=&quot;-1&quot;&gt;An Unforgettable Developer Experience&lt;/h3&gt;
&lt;p&gt;Everything we do is for the human being on the other side. There is a lot of value from making things more accessible. Make the process work for both novices and experts.&lt;/p&gt;
&lt;h2 id=&quot;friday&quot; tabindex=&quot;-1&quot;&gt;Friday&lt;/h2&gt;
&lt;h3 id=&quot;humane-design-patterns&quot; tabindex=&quot;-1&quot;&gt;Humane Design Patterns&lt;/h3&gt;
&lt;p&gt;Considering the well-being of the user in your designs. Habit-forming products and sticky experiences might be bad for the people using them. Instead, align human goals and tech goals.&lt;/p&gt;
&lt;p&gt;Resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract on Netflix&lt;/li&gt;
&lt;li&gt;Humane by Design&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;pedagogy-in-pairing&quot; tabindex=&quot;-1&quot;&gt;Pedagogy in Pairing&lt;/h3&gt;
&lt;p&gt;Scope the activity so that it lends itself to joint productive activity. Remove all distractions during the session (e.g. phones). Point to the source of information; don‚Äôt spoon feed. Ground your activity in areas that your partner already understands.&lt;/p&gt;
&lt;h3 id=&quot;accessibility-as-a-bridge-between-designers-and-engineers&quot; tabindex=&quot;-1&quot;&gt;Accessibility as a Bridge Between Designers and Engineers&lt;/h3&gt;
&lt;p&gt;We can communicate effectively only by speaking the same language: developers must understand design, and &lt;em&gt;vice versa&lt;/em&gt;. Collaboration is key to an accessible product.&lt;/p&gt;
&lt;p&gt;Resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accessibility Insights for Web&lt;/li&gt;
&lt;li&gt;Vox Accessibility Guidelines&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;teaching-high-school-computer-science&quot; tabindex=&quot;-1&quot;&gt;Teaching High School Computer Science&lt;/h3&gt;
&lt;p&gt;There are differences between teaching high schoolers and junior developers, but there are also a lot of similarities. Try to direct the student towards self discovery. Help work them through failures with learning in mind. GitHub pages provided a great experience with quick feedback.&lt;/p&gt;
&lt;p&gt;Resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TEALS&lt;/li&gt;
&lt;li&gt;Pitt TLI Summer Program&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;oops-i-guess-we%E2%80%99re-full-stack-developers-now&quot; tabindex=&quot;-1&quot;&gt;Oops I Guess We‚Äôre Full-stack Developers Now&lt;/h3&gt;
&lt;p&gt;Certain tasks have shifted from the backend of the application to the front. There is a divide between frontend developers who focus on the front of the frontend and those who focus on the back.&lt;/p&gt;
&lt;h3 id=&quot;building-ux-teams&quot; tabindex=&quot;-1&quot;&gt;Building UX Teams&lt;/h3&gt;
&lt;p&gt;Managers empower the team to realize its full potential. People have different skills, can work together, can learn, and can teach.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Should I snapshot my UI components?</title>
            <link href="https://seanmcp.com/articles/snapshot_test_ui_components/"/>
            <updated>2019-09-11T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/snapshot_test_ui_components/</id>
            <content type="html">&lt;p&gt;If you are writing tests for React components in 2019, you will probably find your way to Airbnb‚Äôs Enzyme testing utilities. The recent industry standard, Enzyme provides you some useful tools for rendering your components.&lt;/p&gt;
&lt;p&gt;Often times, folks will turn to snapshot testing with Enzyme because it a) is easy, b) provides significant test coverage, and c) seems like a good idea. I worked for a company where the default test suite for any component was a snapshot, then any additional tests were added to bump coverage to an acceptible level.&lt;/p&gt;
&lt;p&gt;However, the ease of use is often a double-edged sword. Here I wanted to outline some common issues that arise from using snapshot tests for your UI components.&lt;/p&gt;
&lt;h2 id=&quot;issue-%231%3A-false-positives&quot; tabindex=&quot;-1&quot;&gt;Issue #1: False positives&lt;/h2&gt;
&lt;p&gt;If you‚Äôve every worked in a codebase that snapshots UI components, you‚Äôll know: snapshot tests fail all the time. This is because snapshots collect a JSON-ified version of the shallow render from Enzyme. Whenever anything changes to the structure of the render, the output is different and therefore the snapshot fails.&lt;/p&gt;
&lt;p&gt;Whenever you need to refactor a component, you can be assured that the test will fail because the new snapshot doesn‚Äôt match the one on record.&lt;/p&gt;
&lt;p&gt;Because snapshot tests fail all the time, they become &lt;strong&gt;false positives&lt;/strong&gt;: results which incorrectly indicate that a problem is present. You snapshot can fail, even though everything about the component will still function as expected.&lt;/p&gt;
&lt;p&gt;If your test can fail when the function still works, &lt;strong&gt;what value is the snapshot test adding&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;I have seen deployments fail because the snapshot encountered an unexpected &lt;code&gt;div&lt;/code&gt; tag. The ‚Äúsolution‚Äù was simple enough: update the snapshot and then deploy again. But that has its own problems.&lt;/p&gt;
&lt;h2 id=&quot;issue-%232%3A-combating-false-positives&quot; tabindex=&quot;-1&quot;&gt;Issue #2: Combating false positives&lt;/h2&gt;
&lt;p&gt;Since failing snapshot tests are so common, it is common to run you rest suite with the &lt;code&gt;-u, --update-snapshot&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run test -u
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This rewrites the snapshot to match the current value instead of comparing it to the previous one. Since the updated snapshot will always match the new value, the test passes. Running the update snapshot flag is kind of like doing this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; snapshot&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// npm test -u&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;br /&gt;snapshot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; snapshot&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Passed!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a little silly, but I think it illustrates the point. On its own, updating a snapshot will automatically pass a test without providing you any valuable information.&lt;/p&gt;
&lt;p&gt;Since failing tests are so common, you will be tempted to add the updated snapshot flag to every test run. I know that I got a little too quick the the &lt;code&gt;-u&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;But as illustrated above, running updated snapshot tests provides no valuable information. So if you need to update the snapshot test every time, &lt;strong&gt;what value is the snapshot test adding&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;If you find yourself backed into this corner, take heart in knowing that it‚Äôs not your fault. Snapshot testing forces us to focus on structure.&lt;/p&gt;
&lt;h2 id=&quot;issue-%233%3A-structure-over-function&quot; tabindex=&quot;-1&quot;&gt;Issue #3: Structure over function&lt;/h2&gt;
&lt;p&gt;Snapshot tests value the structure of a component over its functionality. They don‚Äôt tell you how the component will work in your application; it only tells you how the JSX will look. So you need to ask yourself: Do I want my test suite to care about the structure of my components?&lt;/p&gt;
&lt;p&gt;Let‚Äôs imagine an &lt;code&gt;IconButton&lt;/code&gt; component that looks something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;IconButton&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; icon&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Icon icon&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;icon&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After reviewing with the design team, you determing that it would be better for the button text to be inline with the &lt;code&gt;Icon&lt;/code&gt;, so you swap the &lt;code&gt;div&lt;/code&gt; for a &lt;code&gt;span&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;IconButton&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; children&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; icon&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Icon icon&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;icon&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After this change, should the test for &lt;code&gt;IconButton&lt;/code&gt; fail? I‚Äôd argue: no.&lt;/p&gt;
&lt;p&gt;The functionality of the IconButton hasn‚Äôt changed; it still renders an &lt;code&gt;Icon&lt;/code&gt; and passes the &lt;code&gt;onClick&lt;/code&gt; handler to the &lt;code&gt;button&lt;/code&gt; element. I and every developer after me should be free to refactor as much as I need so long as the component still functions in the same manner when we‚Äôre done.&lt;/p&gt;
&lt;p&gt;But a snapshot test disagrees and will fail because you changed that tag. You might anticipate the test failing and run it with the update snapshot flag, which has all the problems listed above. So again, &lt;strong&gt;what value is the snapshot test adding&lt;/strong&gt;?&lt;/p&gt;
&lt;h2 id=&quot;snapshots-are-a-bad-fit-for-ui-testing&quot; tabindex=&quot;-1&quot;&gt;Snapshots are a bad fit for UI testing&lt;/h2&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Shallow rendering + snapshot tests. &lt;a href=&quot;https://t.co/3TIa4VIhsc&quot;&gt;pic.twitter.com/3TIa4VIhsc&lt;/a&gt;&lt;/p&gt;&amp;mdash; Mark Dalgleish (@markdalgleish) &lt;a href=&quot;https://twitter.com/markdalgleish/status/1161616241531863045?ref_src=twsrc%5Etfw&quot;&gt;August 14, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 
&lt;p&gt;In most instances, snapshots provde no additional value for your UI tests. They are easy and feel good to write, but I think they add little confidence to your testing suite for any given component.&lt;/p&gt;
&lt;p&gt;You may stumble across scenarios with a highly specialized component, definite structure, and specific attributes that would benefit from a snapshot. But these are an exception to the rule. In general, &lt;strong&gt;avoid snapshot testing for UI components&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;another-way&quot; tabindex=&quot;-1&quot;&gt;Another way&lt;/h2&gt;
&lt;p&gt;Instead of defaulting to snapshots, ask yourself: What does this component &lt;strong&gt;need&lt;/strong&gt; to do? Then write a test that ensures the component can do just that.&lt;/p&gt;
&lt;p&gt;If you‚Äôre working with Enzyme, use &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/find.html&quot;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; to insure that any necessary elements render with the appropriate attributes. Use &lt;a href=&quot;https://airbnb.io/enzyme/docs/api/ReactWrapper/simulate.html&quot;&gt;&lt;code&gt;simulate()&lt;/code&gt;&lt;/a&gt; to interact with your components in a meaningful way, focusing on functionality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Your tests should give me the confidence to refactor any component to your heart‚Äôs content&lt;/strong&gt;. They should fail if you change functionality, not structure.&lt;/p&gt;
&lt;h2 id=&quot;further-reading&quot; tabindex=&quot;-1&quot;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kentcdodds.com/blog/testing-implementation-details&quot;&gt;‚ÄúTesting Implementation Details‚Äù by Kent C. Dodds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://testing-library.com/docs/react-testing-library/intro&quot;&gt;React Testing Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
        
        <entry>
            <title>5 Lessons from 10k open-source downloads</title>
            <link href="https://seanmcp.com/articles/5-lessons-from-10k-open-source-downloads/"/>
            <updated>2019-11-25T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/5-lessons-from-10k-open-source-downloads/</id>
            <content type="html">&lt;p&gt;In April of 2018, I wrote an article &lt;a href=&quot;https://medium.com/@seanmcp/%EF%B8%8F-how-to-use-emojis-in-react-d23bbf608bf7&quot;&gt;‚ÄúHow to use emojis in React‚Äù&lt;/a&gt;. At the time, the default eslint configuration for Create React App would flash an error if you put an emoji in a rendered string.&lt;/p&gt;
&lt;p&gt;The answer was to wrap the emoji in a &lt;code&gt;span&lt;/code&gt; with some appropriate attributes to notify screen readers that it was being used as an image. Since it was React specific, I included a component that handles all the attribute logic for you.&lt;/p&gt;
&lt;p&gt;The article gained some traction and, thanks to Medium‚Äôs SEO, remains the first page on &lt;a href=&quot;https://www.google.com/search?q=use+emojis+in+react&amp;amp;oq=how+to+use+emojis+in+react&quot;&gt;a Google search for ‚Äúuse emojis react‚Äù&lt;/a&gt;. Later that same year, I decided to create and release a package for the included React component. Thus, &lt;a href=&quot;https://npm.im/a11y-react-emoji&quot;&gt;&lt;code&gt;a11y-react-emoji&lt;/code&gt;&lt;/a&gt; was born.&lt;/p&gt;
&lt;p&gt;Twelve months and 17 versions later, and my little package has &lt;a href=&quot;https://www.npmjs.com/package/a11y-react-emoji&quot;&gt;10,000 downloads from the npm registry&lt;/a&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/5-lessons-from-10k-open-source-downloads/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;. Beyond that, the repo has &lt;a href=&quot;https://github.com/SeanMcP/a11y-react-emoji&quot;&gt;15 stars on GitHub&lt;/a&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/5-lessons-from-10k-open-source-downloads/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; and is used by &lt;a href=&quot;https://github.com/SeanMcP/a11y-react-emoji/network/dependents?package_id=UGFja2FnZS0yODIxNzMzNDE%3D&quot;&gt;61 other projects&lt;/a&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/5-lessons-from-10k-open-source-downloads/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;There have been some maintainer highs and lows in that time, so here are the five biggest lessons I learned along the way.&lt;/p&gt;
&lt;h2 id=&quot;1.-packages-can-be-simple&quot; tabindex=&quot;-1&quot;&gt;1. Packages can be simple&lt;/h2&gt;
&lt;p&gt;Before stepping into the world of open source, I thought of packages as a black box. But I‚Äôve since learned that they are much simpler than they appear.&lt;/p&gt;
&lt;p&gt;In the JavaScript world, a package is just four files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;package.json&lt;/code&gt; with a few fields,&lt;/li&gt;
&lt;li&gt;an &lt;code&gt;index.js&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;README.md&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;and a &lt;code&gt;LICENSE&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And the last two are optional. Once I got over the hurdle of &lt;a href=&quot;https://www.freecodecamp.org/news/how-to-make-a-beautiful-tiny-npm-package-and-publish-it-2881d4307f78/&quot;&gt;publishing my first package&lt;/a&gt;, the curtain of mystery fell away.&lt;/p&gt;
&lt;p&gt;Take a moment and look through the &lt;code&gt;node_modules/&lt;/code&gt; of you next project, and you‚Äôll see a bunch of directories with those files mentioned above. Not too scary!&lt;/p&gt;
&lt;h2 id=&quot;2.-dependencies-can-get-tricky&quot; tabindex=&quot;-1&quot;&gt;2. Dependencies can get tricky&lt;/h2&gt;
&lt;p&gt;If you‚Äôre publishing a basic utility, you may not need to worry about dependencies. But the more complex your library becomes, the more tricky it becomes to manage your dependencies.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a11y-react-emoji&lt;/code&gt; was a shared React component written in TypeScript, which meant I needed to manage React and TypeScript dependencies. I wanted the component to be fully tested, so add Jest and Babel to the mix. Error checking? Add ESLint. Consistent formatting? Bring Prettier along.&lt;/p&gt;
&lt;p&gt;Before long, your dependency tree can grow really big. Keep something in mind when creating a package: every dependency you add is another dependency that you have to be willing to manage. That can add a maintenance work to your package.&lt;/p&gt;
&lt;h2 id=&quot;3.-security-is-a-hassle&quot; tabindex=&quot;-1&quot;&gt;3. Security is a hassle&lt;/h2&gt;
&lt;p&gt;I‚Äôm not an expert on security. So when GitHub flags one of my packages for potential security risks, I still feel a chill run down my spine.&lt;/p&gt;
&lt;p&gt;When I first created the &lt;code&gt;a11y-react-emoji&lt;/code&gt;, I was quick to address every security risk highlight, merge the changes, and release a new version of the package. Every time it felt like I was just a few clicks in front of the next Equifax data breach.&lt;/p&gt;
&lt;p&gt;But after a few months at the helm, I stopped caring so much. Part of that is how the project is structured: &lt;code&gt;a11y-react-emoji&lt;/code&gt; has no dependencies, which means that no flagged security issues present a risk in production.&lt;/p&gt;
&lt;p&gt;Every potential issue is within the dev dependency tree, which isn‚Äôt a big deal to the package user.&lt;/p&gt;
&lt;p&gt;However, keeping a large-scale library with tons of dependency ahead of all security risks would be a nightmare. That‚Äôs not something I‚Äôm chomping at the bit to do in my spare time.&lt;/p&gt;
&lt;h2 id=&quot;4.-leverage-the-community&quot; tabindex=&quot;-1&quot;&gt;4. Leverage the community&lt;/h2&gt;
&lt;p&gt;Earlier this year, &lt;a href=&quot;https://github.com/SeanMcP/a11y-react-emoji/issues/3&quot;&gt;@bdbaraban filed an issue&lt;/a&gt; with &lt;code&gt;a11y-react-emoji&lt;/code&gt; concerning its types. I was just learning TypeScript when I wrote the library, and his suggestion was an improvement to the existing code.&lt;/p&gt;
&lt;p&gt;I asked him if he wanted to open a pull request to make the change but quickly got antsy and did it myself.&lt;/p&gt;
&lt;p&gt;That was a mistake. The beauty of open-source is the community; it‚Äôs the product of our collective intelligence. It didn‚Äôt matter that the current types for the package were limited. What would have been more important would be to wait and give someone else the opportunity to contribute.&lt;/p&gt;
&lt;p&gt;To encourage more community involvement, you should include the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;a href=&quot;https://help.github.com/en/github/building-a-strong-community/manually-creating-a-single-issue-template-for-your-repository&quot;&gt;&lt;code&gt;ISSUE_TEMPLATE.md&lt;/code&gt;&lt;/a&gt; to standardize issues,&lt;/li&gt;
&lt;li&gt;labels for &lt;a href=&quot;https://help.github.com/en/github/building-a-strong-community/helping-new-contributors-find-your-project-with-labels&quot;&gt;&lt;code&gt;good-first-issue&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.firsttimersonly.com/&quot;&gt;&lt;code&gt;first-timers-only&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;and contact information in the &lt;code&gt;README.MD&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When someone reaches out or files an issue, give them a few days to respond. Security bugs should be fixed immediately; features and small fixes can wait.&lt;/p&gt;
&lt;h2 id=&quot;5.-don%E2%80%99t-lose-yourself&quot; tabindex=&quot;-1&quot;&gt;5. Don‚Äôt lose yourself&lt;/h2&gt;
&lt;p&gt;There is an undeniable high that comes from seeing your code used by someone else in the wild or stars the project on GitHub. I‚Äôm not immune; I‚Äôve found myself getting caught up in that ever-growing download count since releasing the package.&lt;/p&gt;
&lt;p&gt;It‚Äôs important to remember that your worth is not determined by the number or popularity of your open-source contributions. It has nothing to do with how many Twitter followers you have, claps you‚Äôve received on Medium, or unique traffic to your personal website.&lt;/p&gt;
&lt;p&gt;You are infinitely valuable for just being you.&lt;/p&gt;
&lt;p&gt;If you want to publish packages because you think it‚Äôs fun or you want to help other people, then open source is a great way to contribute. But don‚Äôt lose sight of that motivation.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I hope those were helpful. If you have any questions about open source or want to share some tips of your own, &lt;a href=&quot;https://seanmcp.com/articles/5-lessons-from-10k-open-source-downloads/#comment-link&quot;&gt;please let me know&lt;/a&gt;.&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;See #5 &lt;a href=&quot;https://seanmcp.com/articles/5-lessons-from-10k-open-source-downloads/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Ibid. &lt;a href=&quot;https://seanmcp.com/articles/5-lessons-from-10k-open-source-downloads/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Ibid. &lt;a href=&quot;https://seanmcp.com/articles/5-lessons-from-10k-open-source-downloads/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>&quot;Stop Teaching Code&quot; in JavaScript</title>
            <link href="https://seanmcp.com/articles/stop-teaching-code-resources/"/>
            <updated>2019-11-26T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/stop-teaching-code-resources/</id>
            <content type="html">&lt;p&gt;At some time in the future, I would like to return to the classroom to teach programming to middle school students. That is the age when I first starting coding, and I would love the opportunity to inspire the next generation of developers at an early age.&lt;/p&gt;
&lt;p&gt;So I‚Äôm on the lookout for good techniques, strategies, and patterns for teaching the basics of computer science. &lt;a href=&quot;https://seanmcp.com/articles/stop-teaching-code-resources/#comment-link&quot;&gt;Hit me up if you have any&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today I read &lt;a href=&quot;https://blog.upperlinecode.com/stop-teaching-code-a1039983b39&quot;&gt;‚ÄúStop Teaching Code‚Äù by Jeff Olson&lt;/a&gt; where he described a different approach to teaching programming. He advocated for ditching the definitions, unrealistic examples, and non-sensical names and use real-world puzzles for students to solve.&lt;/p&gt;
&lt;p&gt;It‚Äôs an interesting read, and I recommend it if you have any dreams of teaching programming.&lt;/p&gt;
&lt;p&gt;All of the examples in Olson‚Äôs article are in Python, but I plan on introducing students to code with JavaScript. So here are all of the examples from his article rewritten in JavaScript:&lt;/p&gt;
&lt;h2 id=&quot;translated-examples&quot; tabindex=&quot;-1&quot;&gt;Translated Examples&lt;/h2&gt;
&lt;p&gt;Note: I‚Äôve linked to the nearest anchor on Medium, but they appear to be generated and might change. Your mileage may vary.&lt;/p&gt;
&lt;h3 id=&quot;1.-code-for-predictions&quot; tabindex=&quot;-1&quot;&gt;1. &lt;a href=&quot;https://blog.upperlinecode.com/stop-teaching-code-a1039983b39#511e&quot;&gt;Code for Predictions&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tamara&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;2.-example-1%3A-conditionals&quot; tabindex=&quot;-1&quot;&gt;2. &lt;a href=&quot;https://blog.upperlinecode.com/stop-teaching-code-a1039983b39#0f1e&quot;&gt;Example 1: Conditionals&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;You&#39;re old enough to buy a ticket for an R-rated film.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;You&#39;ll be old enough in &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; age&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; years&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;3.-example-2%3A-collections&quot; tabindex=&quot;-1&quot;&gt;3. &lt;a href=&quot;https://blog.upperlinecode.com/stop-teaching-code-a1039983b39#147c&quot;&gt;Example 2: Collections&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; favorite_foods &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Sushi&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tamales&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Mofongo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Pizza&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Chicken Tikka&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;favorite_foods&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;3.-example-3%3A-objects&quot; tabindex=&quot;-1&quot;&gt;3. &lt;a href=&quot;https://blog.upperlinecode.com/stop-teaching-code-a1039983b39#d814&quot;&gt;Example 3: Objects&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; user1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Ty&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tdog@aol.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Pa$$word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; user2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Sarai&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SMendes@hotmail.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Kangaroo!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; user3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Osu&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Osu22@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;12345abcde&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;I hope that helps. Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>The fastest way to look for object properties</title>
            <link href="https://seanmcp.com/articles/fastest-way-to-look-for-object-properties/"/>
            <updated>2019-12-31T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/fastest-way-to-look-for-object-properties/</id>
            <content type="html">&lt;p&gt;I manage a library called &lt;code&gt;onkey-event-manager&lt;/code&gt; that helps users map functions to keyboard actions. Part of the library is a validation step that looks for properties on an object.&lt;/p&gt;
&lt;p&gt;To make this step as performant as possible, I wanted to know what the fastest method for checking an object for a given property.&lt;/p&gt;
&lt;h2 id=&quot;contenders&quot; tabindex=&quot;-1&quot;&gt;Contenders&lt;/h2&gt;
&lt;h3 id=&quot;object.hasownproperty()&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;Object.hasOwnProperty()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is the built-in method for checking an object for properties. The only question is whether this method is more performant than other options.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;exists&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;does not&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// -&gt; &#39;does not&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;object%5B%5D&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;Object[]&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;By referencing the property on the object directly, you can let JavaScript‚Äôs type coercion to force a boolean.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;test&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;exists&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;does not&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// -&gt; &#39;does not&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This method for checking a property will fail if the value at the given property is false/falsey (&lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;const obj = { test: false }&lt;/code&gt;). Since I can guarantee that case won‚Äôt happen, I can still use it.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>2019 into 2020</title>
            <link href="https://seanmcp.com/articles/2019-into-2020.md/"/>
            <updated>2020-01-08T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/2019-into-2020.md/</id>
            <content type="html">&lt;p&gt;2019 was an exciting year, though perhaps not as &lt;a href=&quot;https://seanmcp.com/articles/2019-into-2020.md/2018-into-2019&quot;&gt;eventful as 2018&lt;/a&gt;. Here are some of the major events and accomplishments of the past year in mostly chronological order.&lt;/p&gt;
&lt;h2 id=&quot;2019-in-review&quot; tabindex=&quot;-1&quot;&gt;2019 in review&lt;/h2&gt;
&lt;p&gt;Last year, I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Officially hit one year in the industry&lt;/strong&gt;: My previous experience is valuable but scattered; this is one year straight of work&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Took on new work responsibilities&lt;/strong&gt;: I began work as a UI Engineer lead at TSYS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accepted first conference talk&lt;/strong&gt;: I got the news in June that I was accepted to speak at Connect.Tech 2019&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attended two conferences&lt;/strong&gt;: Abstractions in Pittsburgh and Connect.Tech in Atlanta&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interviewed at multiple companies&lt;/strong&gt;: Dusted off the ol‚Äô code challenge skills&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accepted an offer at Niche&lt;/strong&gt;: Front-end Software Engineer at an exciting company in Pittsburgh&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Moved to Pittsburgh&lt;/strong&gt;: Said a sad ‚Äúgoodbye‚Äù to all our wonderful friends in Atlanta&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Added some new features to &lt;a href=&quot;http://niche.com/&quot;&gt;Niche.com&lt;/a&gt;&lt;/strong&gt;: Most of them minor, but it‚Äôs neat to see your work in action&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spoke at a conference&lt;/strong&gt;: &lt;em&gt;React and Accessibility&lt;/em&gt; at Connect.Tech 2019&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Started a learning program at Niche&lt;/strong&gt;: Weekly tech learning sessions over lunch with live demos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Published eleven npm packages&lt;/strong&gt;: And learned a lot about package management along the way&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Passed 10K downloads on a package&lt;/strong&gt;: &lt;code&gt;a11y-react-emoji&lt;/code&gt; is off to the races!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Published thirteen articles&lt;/strong&gt;: &lt;a href=&quot;https://seanmcp.com/articles/2019-into-2020.md/reviewing-2019-goals&quot;&gt;Off the mark&lt;/a&gt;, but still solid&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these things were fulfilling goals that I had set in the previous year, while others were completely out of the blue. I‚Äôm so thankful for the opportunity to try new things this past year.&lt;/p&gt;
&lt;h2 id=&quot;previewing-2020&quot; tabindex=&quot;-1&quot;&gt;Previewing 2020&lt;/h2&gt;
&lt;p&gt;Looking forward to this year, there are several things that I want to learn and do. I am going to list some general goals, followed by measurable ways that I can accomplish them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Read more&lt;/strong&gt;: I want to read &lt;strong&gt;four professional&lt;/strong&gt; and &lt;strong&gt;six personal&lt;/strong&gt; books&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open source&lt;/strong&gt;: I want to become a maintainer on an open-source library (that I didn‚Äôt create)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write more&lt;/strong&gt;: Last year I missed the mark, so I‚Äôm going to set a goal of publishing &lt;strong&gt;18 articles&lt;/strong&gt; in 2020&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speaking&lt;/strong&gt;: I want to create a deck and &lt;strong&gt;present at a Meetup&lt;/strong&gt; here in Pittsburgh&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Father&lt;/strong&gt;: I want to use the time I have with my son more productively, &lt;strong&gt;going on father-son outings twice a month&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faith&lt;/strong&gt;: I want lead &lt;strong&gt;family worship every day&lt;/strong&gt;, and &lt;strong&gt;read/reflect on the Bible daily&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fitness&lt;/strong&gt;: I want to exercise 5 days a week&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Soccer&lt;/strong&gt;: I want to find room in the family schedule to &lt;strong&gt;play a pick-up game twice a month&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
        
        <entry>
            <title>Reviewing 2019 goals</title>
            <link href="https://seanmcp.com/articles/reviewing-2019-goals/"/>
            <updated>2020-01-08T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/reviewing-2019-goals/</id>
            <content type="html">&lt;p&gt;To kick-off 2019, I wrote an article in which I &lt;a href=&quot;https://seanmcp.com/articles/reviewing-2019-goals/2018-into-2019&quot;&gt;set some goals for 2019&lt;/a&gt;. I had planned to check in on those goals more frequently:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am going to check back on these goals throughout the year and track my progress in a different article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But alas, the best laid plans of mice and men!&lt;/p&gt;
&lt;p&gt;Now that it is &lt;s&gt;December of 2019&lt;/s&gt; January of 2020, I wanted to take the chance to measure my progress towards those goals that I set.&lt;/p&gt;
&lt;h2 id=&quot;review&quot; tabindex=&quot;-1&quot;&gt;Review&lt;/h2&gt;
&lt;h3 id=&quot;%F0%9F%91%8E-dive-deeper-into-python&quot; tabindex=&quot;-1&quot;&gt;üëé Dive deeper into Python&lt;/h3&gt;
&lt;p&gt;I didn‚Äôt do anything more with Python this year. I even turned away from Python for simple scripting projects in favor of Bash or node.js. I‚Äôm still a fan, but I don‚Äôt see a big use case for Python in my current career path.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%91%8E-learn-machine-learning&quot; tabindex=&quot;-1&quot;&gt;üëé Learn machine learning&lt;/h3&gt;
&lt;p&gt;ML sounds cool and exciting, but there weren‚Äôt a lot of opportunities to utilize it in my work as a front-end engineer.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%91%8E-demystify-module-bundlers&quot; tabindex=&quot;-1&quot;&gt;üëé Demystify module bundlers&lt;/h3&gt;
&lt;p&gt;This is still a good idea, but I haven‚Äôt done it (yet).&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%8E%89-release-two-npm-packages&quot; tabindex=&quot;-1&quot;&gt;üéâ Release two npm packages&lt;/h3&gt;
&lt;p&gt;I published two npm packages in January of 2019 alone. This is something I want to continue to do going forward.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%A4%B7%E2%80%8D%E2%99%82%EF%B8%8F-investigate-react-tooling&quot; tabindex=&quot;-1&quot;&gt;ü§∑‚Äç‚ôÇÔ∏è Investigate React tooling&lt;/h3&gt;
&lt;p&gt;I learned a lot this year about tooling in a JavaScript environment, but I think my goal was a little misguiding in thinking that a &lt;code&gt;dotfiles&lt;/code&gt; repo would be the answer.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%91%8E-publish-24-articles&quot; tabindex=&quot;-1&quot;&gt;üëé Publish 24 articles&lt;/h3&gt;
&lt;p&gt;By my count, I published about a dozen articles in 2019. I would like to strive for this goal in 2020 too.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%91%8E-a-partner-for-jr-devs&quot; tabindex=&quot;-1&quot;&gt;üëé A partner for Jr Devs&lt;/h3&gt;
&lt;p&gt;I moved to Pittsburgh in the summer of 2019, but Jr Devs had stalled before that. I never found the right fit within the Atlanta developer community, and a partner wasn‚Äôt going to change that.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%8E%89-speaking-on-tech&quot; tabindex=&quot;-1&quot;&gt;üéâ Speaking on tech&lt;/h3&gt;
&lt;p&gt;While I did not present at another Meetup in 2019, I did give a talk about &lt;em&gt;React and Accessibility&lt;/em&gt; at the Connect.Tech conference in Atlanta. I enjoyed the experience, but I think sharing at Meetups is a little more my speed.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%91%8E-dating-my-wife&quot; tabindex=&quot;-1&quot;&gt;üëé Dating my wife&lt;/h3&gt;
&lt;p&gt;We didn‚Äôt schedule any official dates in 2019, but I don‚Äôt think either of us missed it. I need to check with my wife again to see if this is something we want to try in 2020.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%8E%89-being-a-good-father&quot; tabindex=&quot;-1&quot;&gt;üéâ Being a good father&lt;/h3&gt;
&lt;p&gt;While we were living in Atlanta, I cared for our son on Saturdays while my wife worked. We would regularly go to the park or around town on errands while she was gone. Here in Pittsburgh, her schedule has changed and I don‚Äôt have that dedicated parenting time.&lt;/p&gt;
&lt;p&gt;Once the winter is through, I want to sieze opportunities to take my son on new adventures in a new city.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%8E%89-leading-our-household&quot; tabindex=&quot;-1&quot;&gt;üéâ Leading our household&lt;/h3&gt;
&lt;p&gt;In 2019 we continued to have regular family worship in the evenings and added another time over the breakfast table. It has been a huge encouragement to see my son begin to develop the skills necessary to worship God throughout his life: sitting, listening, singing, and praying (sort of). I no longer teach Sunday school but am open to that possibility here in Pittsburgh.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%91%8E-work-out&quot; tabindex=&quot;-1&quot;&gt;üëé Work out&lt;/h3&gt;
&lt;p&gt;I wasn‚Äôt even close. This is something to reassess in 2020.&lt;/p&gt;
&lt;h3 id=&quot;%F0%9F%91%8E-play-soccer&quot; tabindex=&quot;-1&quot;&gt;üëé Play soccer&lt;/h3&gt;
&lt;p&gt;I was not able to attend pick-up soccer regularly in Atlanta and have yet to find a group in Pittsburgh. This is something that I would like to try again in 2020. Maybe twice a month, though.&lt;/p&gt;
&lt;h3 id=&quot;total-score%3A-4%2F12-(33.33%25)&quot; tabindex=&quot;-1&quot;&gt;Total score: 4/12 (33.33%)&lt;/h3&gt;
&lt;p&gt;At face value, that‚Äôs not a great completion rate. But it is all a learning opportunity.&lt;/p&gt;
&lt;p&gt;You can see by going through the list the difference between goals that I &lt;em&gt;thought&lt;/em&gt; were important vs. the ones that were actually important. I‚Äôm happy with the four successes and am looking forward to reaching towards the other goals in this new year.&lt;/p&gt;
&lt;p&gt;Here‚Äôs to new attempts in a new year!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>What default parameters do (and don&#39;t do)</title>
            <link href="https://seanmcp.com/articles/what-default-parameters-do-and-dont-do/"/>
            <updated>2020-01-13T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/what-default-parameters-do-and-dont-do/</id>
            <content type="html">&lt;p&gt;Default parameters are a handy feature in JavaScript. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters&quot;&gt;MDN has a more thorough explanation&lt;/a&gt;, but imagine a function that greets a user:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;greetUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we call our function and pass a name, we get the expected log:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;greetUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Abby&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Hello Abby!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what about when we don‚Äôt pass a name? &lt;strong&gt;Quiz time&lt;/strong&gt;: What is going to log?&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;greetUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Hello undefined!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is that what you expected? Since we passed no argument, the &lt;code&gt;name&lt;/code&gt; parameter is &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;JavaScript ‚Äî ever the helpful friend ‚Äî sees that we want to include that value in a string, so it &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion&quot;&gt;coerces it into the correct type&lt;/a&gt;, and then logs it.&lt;/p&gt;
&lt;p&gt;You probably don‚Äôt want your function to return &lt;code&gt;Hello undefined!&lt;/code&gt;, so let‚Äôs try a default parameter.&lt;/p&gt;
&lt;h2 id=&quot;what-default-parameters-do&quot; tabindex=&quot;-1&quot;&gt;What default parameters do&lt;/h2&gt;
&lt;p&gt;Add the following to the declaration line of &lt;code&gt;greetUser()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;greetUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;there&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we‚Äôre saying to our function, ‚Äúif you don‚Äôt receive an argument, set the value of the &lt;code&gt;name&lt;/code&gt; parameter to be &lt;code&gt;&amp;quot;there&amp;quot;&lt;/code&gt;.‚Äù When we call our function and pass an argument, we get the same result:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;greetUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Abby&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Hello Abby!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, when we call this updated function without passing an argument, the default parameter kicks in:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;greetUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Hello there!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bingo! Now if our function is called without an argument, then the resulting log still makes sense.&lt;/p&gt;
&lt;p&gt;In this situation, the default parameter is working as a fallback value. This is probably the most common use case. But you will also find default parameters useful to reduce existential checking.&lt;/p&gt;
&lt;h3 id=&quot;reduce-checks&quot; tabindex=&quot;-1&quot;&gt;Reduce checks&lt;/h3&gt;
&lt;p&gt;Imagine a user object with a &lt;code&gt;name&lt;/code&gt; key that we want to log. In order to update our original function to handle this use case, I might do something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;greetUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello there!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can imagine the complexity of this dive check growing with the size of the user object. Instead, we can save ourselves some trouble by defaulting that parameter to something that we can use right away:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;greetUser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;there&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Hello &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We set the default value of the &lt;code&gt;user&lt;/code&gt; parameter to be an object with a &lt;code&gt;name&lt;/code&gt; key that we could access.&lt;/p&gt;
&lt;p&gt;I use this pattern often; default props make it easier to see what types and shapes of arguments that any given function or component is expecting.&lt;/p&gt;
&lt;h2 id=&quot;what-default-parameters-don%E2%80%99t-do&quot; tabindex=&quot;-1&quot;&gt;What default parameters don‚Äôt do&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;A parameter will only default to a given value if it the argument passed is &lt;code&gt;undefined&lt;/code&gt;&lt;/strong&gt;. So either no argument is passed, or the function specifically receives &lt;code&gt;undefined&lt;/code&gt; as an argument.&lt;/p&gt;
&lt;p&gt;When I first learned about default parameters, I developed the wrong mental model ‚Äî associating them with falsy values in JavaScript. My incorrect thinking went like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When ever I pass an argument that evaluates to false, the default parameter will kick in and save me from errors!&lt;br /&gt;
&lt;br /&gt;‚Äî Sean, being wrong&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I ran into this problem at work when I expected a function to return the default parameter when passed a &lt;code&gt;null&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;favoriteAnimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;animal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;wolf&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Favorite animal:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; animal&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;favoriteAnimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;manatee&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Favorite animal: manatee&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;favoriteAnimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Favorite animal: wolf&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;favoriteAnimal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Favorite animal: null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That‚Äôs because &lt;code&gt;null&lt;/code&gt; is a deliberately passed value (even if I didn‚Äôt know that I was deliberately passing it). Default parameters will only kick in if that argument is omitted or passed as &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To state it plainly: &lt;strong&gt;falsy values do NOT become default parameters&lt;/strong&gt;. It only works for &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So the above code is worked as designed, even if it‚Äôs not what I expected. Time to update that mental model!&lt;/p&gt;
&lt;p&gt;Hopefully that clears up the mystery of default parameters for you. Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>A new Twitter handle</title>
            <link href="https://seanmcp.com/articles/a-new-twitter-handle/"/>
            <updated>2020-01-28T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/a-new-twitter-handle/</id>
            <content type="html">&lt;p&gt;I have had a difficult relationship with Twitter. When it launched, I was in high school and still active on a number of forums and AOL instant messenger. Around the same time, Facebook opened up to non-collegiate users, so I and a lot of my friends signed up. Later I went all in on Google+.&lt;/p&gt;
&lt;p&gt;Twitter always seemed different. Rather than connection-based interactions, Twitter was more simply a broadcast platform. This meant that the reach of your message was tied not the the number of individuals with whom you could connect, but instead the number that you could impress. It was a popularity platform.&lt;/p&gt;
&lt;p&gt;As a teenage contrarian, that was intensely unappealing to me.&lt;/p&gt;
&lt;p&gt;Fast forward a few years and I started doing freelance web design and development while in college. By then both Twitter and I had matured, and I saw it as an opportunity to promote my business. &lt;code&gt;@seanmcp&lt;/code&gt; was taken, so I registered the handle &lt;code&gt;@sean_mcp&lt;/code&gt;. After a largely unsuccessful go, I shuttered the business and deleted the account.&lt;/p&gt;
&lt;p&gt;The decision to delete that account is one that I have regretted for the past eight years.&lt;/p&gt;
&lt;p&gt;By the mid 2010s, I was interested in getting on the platform for some soccer journalism I was doing. Most iterations of my name were taken, so I settled on &lt;a href=&quot;https://twitter.com/mcpsoccer&quot;&gt;&lt;code&gt;@mcpsoccer&lt;/code&gt;&lt;/a&gt;. That served me well and still exists today.&lt;/p&gt;
&lt;p&gt;I was teaching at the time too, so I created a professional account for my classroom: &lt;code&gt;@mrseanmcp&lt;/code&gt;. When that era ended, I changed the handle first to &lt;code&gt;@seanthemcp&lt;/code&gt; and then &lt;code&gt;@mcpmakes&lt;/code&gt; and then &lt;code&gt;@mcpcodes&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By this time I had settled on a new career path and saw the value of Twitter as a developer. In an effort to consolidate my online brand‚Ñ¢, I changed the handle to &lt;code&gt;@_seanmcp&lt;/code&gt;. But while some folks are able to own the underscore, it left me with a sense of insecurity. Why had I given up &lt;code&gt;@sean_mcp&lt;/code&gt; all those years ago?&lt;/p&gt;
&lt;p&gt;In 2020, I sat down with my wife and brainstormed some ideas for a new handle. Here is a short list of the options we enumerated in alphabetical order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@askseanmcp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@biseanfrise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@nabasson&lt;/code&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/a-new-twitter-handle/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@seanaroll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@seancloudnine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@seanmcpdotcom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@seantheupandup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@snmcp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@thierryseanry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can probably guess, we had a good time coming up with the punnier options.&lt;/p&gt;
&lt;p&gt;After much internal deliberation, I settled on &lt;a href=&quot;https://twitter.com/snmcp&quot;&gt;&lt;code&gt;@snmcp&lt;/code&gt;&lt;/a&gt;. First, it‚Äôs as close to my brand as possible. Second, it doesn‚Äôt add additional words, letters, or symbols. And third, it‚Äôs short and quick to type.&lt;/p&gt;
&lt;p&gt;At first I didn‚Äôt like the look of the new handle, but after a few weeks it‚Äôs starting to grow on me. I‚Äôm hoping that, starting this new decade, I will finally be content on Twitter (LW).&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Like Barnabas, which means &lt;a href=&quot;https://www.biblegateway.com/passage/?search=Acts+4%3A36-37&amp;amp;version=NKJV&quot;&gt;‚Äúson of encouragement‚Äù&lt;/a&gt; &lt;a href=&quot;https://seanmcp.com/articles/a-new-twitter-handle/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Write a draft script for your SSG blog</title>
            <link href="https://seanmcp.com/articles/write-a-draft-script-for-your-ssg-blog/"/>
            <updated>2020-01-31T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/write-a-draft-script-for-your-ssg-blog/</id>
            <content type="html">&lt;p&gt;This site is powered by Eleventy, a simple static-site generator. All of the pages and articles exists as markdown files that are converted into HTML files via Nunjuck templates at build time.&lt;/p&gt;
&lt;p&gt;For a blogging platform, it‚Äôs pretty neat. I enjoy being able to run the whole site from the comfort of my text editor and the command line (with a little help from Netlify for continual deployments).&lt;/p&gt;
&lt;p&gt;The secret sauce behind markdown-based sites is the frontmatter: specially formatted content at the top of a markdown file that is read by the generator. Here‚Äôs what the frontmatter for a typical article looks like:&lt;/p&gt;
&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token front-matter-block&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token front-matter yaml language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Add event listener for class change&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; How to create a custom event listener for class names using the MutationObserver API&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token datetime number&quot;&gt;2019-05-10&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; article&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; JavaScript&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; Web&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Start writing your article here --&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I want to write a new article, I need to make sure I have all of those fields populated in a particular way in order for Eleventy to generate the page correctly.&lt;/p&gt;
&lt;p&gt;Formatting and required fields are not something that I care to remember, so I wanted to develop an easier method for generating a draft for this blog. This is my journey.&lt;/p&gt;
&lt;h2 id=&quot;setup&quot; tabindex=&quot;-1&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Most static-site generators will have a directory for you to store some files that are excluded from the build process. For Eleventy, that default directory is &lt;code&gt;_includes/&lt;/code&gt;. I added a subdirectory for &lt;code&gt;templates/&lt;/code&gt; and added an &lt;code&gt;article.md&lt;/code&gt;. All it contains is the bare-bones frontmatter for a new article:&lt;/p&gt;
&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token front-matter-block&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token front-matter yaml language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token datetime number&quot;&gt;2020-01-01&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; article&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; SAMPLE_TAG&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hard coded the date because I have a hard time remembering the YYYY-MM-DD format. It would be cool for the script to generate that for me.&lt;/p&gt;
&lt;h2 id=&quot;solution-1%3A-bash-script&quot; tabindex=&quot;-1&quot;&gt;Solution 1: Bash script&lt;/h2&gt;
&lt;p&gt;Now that I have a template to reference, all I really need to do is write a simple script to copy that file to the &lt;code&gt;articles/&lt;/code&gt; directory. I added the following code to a &lt;code&gt;create-draft.sh&lt;/code&gt; file in the root directory:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;draft&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token assign-left variable&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;_includes/templates/article.md&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;articles/_&lt;span class=&quot;token variable&quot;&gt;$title&lt;/span&gt;.md&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This script declares a variable &lt;code&gt;title&lt;/code&gt; and sets the value to the string &lt;code&gt;&amp;quot;draft&amp;quot;&lt;/code&gt;. Then it checks to see if another argument is passed. If so, then it reassigns &lt;code&gt;title&lt;/code&gt; to that value.&lt;/p&gt;
&lt;p&gt;Then it copies the article template to the &lt;code&gt;articles/&lt;/code&gt; directory with the filename title.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I am prepending an underscore to the name of the file because I have configured Eleventy to ignore markdown files that begin with an underscore from the build. &lt;a href=&quot;https://github.com/11ty/eleventy/issues/188#issuecomment-488350222&quot;&gt;The solution got Eleventy‚Äôs stamp of approval.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I added a &lt;code&gt;draft&lt;/code&gt; script to packages.json:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;draft&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sh create-draft.sh&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once that was in place, I could call my script by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run draft my-new-article
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked, but it was pretty simple. I needed to remember to use kebab case for the title of the article so that the file name would work. It didn‚Äôt add the title to the copied file, nor set a date.&lt;/p&gt;
&lt;p&gt;It served me well for a while, but eventually time came for a change.&lt;/p&gt;
&lt;h2 id=&quot;solution-2%3A-node.js-script&quot; tabindex=&quot;-1&quot;&gt;Solution 2: node.js script&lt;/h2&gt;
&lt;p&gt;To be fair, the original bash script could have been improved to meet all of my needs. But I‚Äôm not as comfortable with Bash as I am with JavaScript, and I jump at every opportunity to work in node.js.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>How to remove duplicates from an object array?</title>
            <link href="https://seanmcp.com/articles/remove-duplicates-from-object-array/"/>
            <updated>2020-02-03T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/remove-duplicates-from-object-array/</id>
            <content type="html">&lt;p&gt;Reviewing a recent code exercise at work, we came across a situation where a candidate wanted to ensure that there were no duplicates in an array of objects.&lt;/p&gt;
&lt;p&gt;The solution, which seemed to have been cobbled together from &lt;a href=&quot;https://stackoverflow.com/questions/2218999/remove-duplicates-from-an-array-of-objects-in-javascript&quot;&gt;suggestions in this Stack Overflow thread&lt;/a&gt;, included &lt;code&gt;Array.from()&lt;/code&gt;, &lt;code&gt;new Set&lt;/code&gt;, &lt;code&gt;Array.map()&lt;/code&gt;, and &lt;code&gt;Array.find()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It worked, but it definitely fulfilled the definition of &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=Frankencode&quot;&gt;‚Äúfrankencode‚Äù&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let‚Äôs look at a simpler solution to this common problem with &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_O_notation&quot;&gt;a simple &lt;em&gt;O(n)&lt;/em&gt; complexity&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;setup&quot; tabindex=&quot;-1&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;The data here could be pretty complicated, so I‚Äôm going to reduce it to the simplest form. We have an array of possibly duplicate objects, and we‚Äôll know that they‚Äôre duplicated based on the &lt;code&gt;name&lt;/code&gt; key:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; listWithDups &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;one&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;two&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;one&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &amp;lt;-- Duplicate&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;three&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to be able to loop through this data as few times as possible in order to remove that duplicate entry.&lt;/p&gt;
&lt;h2 id=&quot;steps&quot; tabindex=&quot;-1&quot;&gt;Steps&lt;/h2&gt;
&lt;p&gt;There are a few things that we are going to need in order to solve this problem. First, we‚Äôre going to need a new array to which we‚Äôll add unique items. Second, we‚Äôre going to need a way to keep track of the items that we have already seen. And third, we‚Äôre going to need a way to iterate through the data.&lt;/p&gt;
&lt;p&gt;Let‚Äôs look at those one at a time.&lt;/p&gt;
&lt;h2 id=&quot;new-array&quot; tabindex=&quot;-1&quot;&gt;New array&lt;/h2&gt;
&lt;p&gt;For this process, we want this to create a new unique array without modifying the original. This is a good practice, because it gives you the ability to compare your data down the road.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; uniqueList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we are iterating through our original array and come across a unique object, we‚Äôll add it to &lt;code&gt;uniqueList&lt;/code&gt; with &lt;code&gt;Array.push()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;unique-key-tracker&quot; tabindex=&quot;-1&quot;&gt;Unique key tracker&lt;/h2&gt;
&lt;p&gt;In order to know if an object is unique, we need to know all of the keys that we have seen before.&lt;/p&gt;
&lt;p&gt;There are a few different data types that we could use, but the best option here is an object; they‚Äôre perfect for looking up information based on a known key.&lt;/p&gt;
&lt;p&gt;This object only exists to track those keys. It will not be returned and no other process depends on its information. That makes it a &lt;a href=&quot;https://en.wikipedia.org/wiki/Temporary_variable&quot;&gt;temporary variable&lt;/a&gt;, and we should name it as such:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For every object in our list, we‚Äôll check to see if their &lt;code&gt;name&lt;/code&gt; key exists on our temp object. If it does not, then we‚Äôll add it to the object and then add the object to the unique list. If it does not, then we know that it is a duplicate and can move on.&lt;/p&gt;
&lt;h2 id=&quot;iterate&quot; tabindex=&quot;-1&quot;&gt;Iterate&lt;/h2&gt;
&lt;p&gt;Since we are going to be iterating through data, the easiest&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/remove-duplicates-from-object-array/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; way to do that is with a &lt;code&gt;for&lt;/code&gt; loop. We‚Äôre going to use a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;&lt;code&gt;for...of&lt;/code&gt;&lt;/a&gt; here because we don‚Äôt care about the index number:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; listWithDups&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// TODO: Check if item is unique.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If so, add it to the list and remember it&#39;s name.&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// If not, pass over; it&#39;s a duplicate.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can go about implementing the steps above.&lt;/p&gt;
&lt;p&gt;Since we‚Äôre using our &lt;code&gt;temp&lt;/code&gt; object to track all of the items that we have already encountered, we can check to see if each item‚Äôs &lt;code&gt;name&lt;/code&gt; exists as a key on &lt;code&gt;temp&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note: We haven‚Äôt written the logic to add items to &lt;code&gt;temp&lt;/code&gt; yet, but we know that this is how we want the application to work.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; listWithDups&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// If we haven&#39;t seen this name before...&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;temp&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within this &lt;code&gt;if&lt;/code&gt; block, we‚Äôll do our ‚Äúunique name‚Äù logic. We want to add the item to our unique list and remember the name for next time.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; item &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; listWithDups&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// If we haven&#39;t seen this name before...&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;temp&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        uniqueItems&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Add to unique list&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        temp&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Remember the name&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once that loop has run, we will have built our &lt;code&gt;uniqueItems&lt;/code&gt; array without duplicating any values. We have successfully de-duped our array with only a single iteration!&lt;/p&gt;
&lt;h2 id=&quot;sample&quot; tabindex=&quot;-1&quot;&gt;Sample&lt;/h2&gt;
&lt;p&gt;Here is a Repl of the solution. Feel free to fork it, make improvements, and &lt;a href=&quot;https://seanmcp.com/articles/remove-duplicates-from-object-array/#comment-link&quot;&gt;share your code with me&lt;/a&gt;.&lt;/p&gt;
&lt;iframe height=&quot;400px&quot; width=&quot;100%&quot; src=&quot;https://repl.it/@SeanMcP/Unique-items-in-array?lite=true&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; sandbox=&quot;allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;YMMV &lt;a href=&quot;https://seanmcp.com/articles/remove-duplicates-from-object-array/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>What to include in every node module</title>
            <link href="https://seanmcp.com/articles/what-to-include-in-every-node-module/"/>
            <updated>2020-02-03T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/what-to-include-in-every-node-module/</id>
            <content type="html">&lt;p&gt;All that is required to publish a node module is a &lt;code&gt;package.json&lt;/code&gt; file with a few fields. However, there are more components to a good package.&lt;/p&gt;
&lt;p&gt;Here are a few things to include in every node module that you publish:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://seanmcp.com/articles/what-to-include-in-every-node-module/#readmemd&quot;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;readme.md&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;README.md&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A README contains all the information necessary to use your node module. They come in all shapes and sizes: decorated, detailed, and simple. But they all need to include a one important detail: &lt;strong&gt;how to use the package&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are many ways to create a good README, I like the format set out by &lt;a href=&quot;https://www.makeareadme.com/&quot;&gt;‚ÄúMake a README‚Äù&lt;/a&gt;.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>How to check npm scripts in current directory</title>
            <link href="https://seanmcp.com/articles/check-npm-scripts-in-current-directory/"/>
            <updated>2020-02-06T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/check-npm-scripts-in-current-directory/</id>
            <content type="html">&lt;p&gt;As a front-end engineer, I spend a lot of time jumping in-between JavaScript projects. Often times I want to run a command from those projects to start watchmode or spin up a service.&lt;/p&gt;
&lt;p&gt;The commands that I want to use are in the &lt;code&gt;package.json&lt;/code&gt; under &lt;code&gt;&amp;quot;scripts&amp;quot;&lt;/code&gt;. When I haven‚Äôt memorized the common commands, I need to either open the file in my editor or use a Unix utility like &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# In my editor&lt;/span&gt;&lt;br /&gt;code package.json&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# In the terminal&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; package.json&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of these commands work, but they are slow. &lt;code&gt;package.json&lt;/code&gt; files can be massive, including dozens of dependencies, dev depenendencies, and other fields. To find the scripts, I need to sort through the cruft to find the information that I want. This isn‚Äôt very efficient.&lt;/p&gt;
&lt;p&gt;Instead, I wrote a short bash scripts to quickly do the work for me. Here is the code in all of its glory:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;token string&quot;&gt;&quot;package.json&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; -pe &lt;span class=&quot;token string&quot;&gt;&quot;JSON.parse(require(&#39;fs&#39;).readFileSync(&#39;package.json&#39;).toString()).scripts&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;There is no &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;package.json&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; in this directory&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, I let the computer know to run this file with bash. Then I set up an &lt;code&gt;if&lt;/code&gt; block: if there is a &lt;code&gt;package.json&lt;/code&gt; file in this directory, then run the following code; if not, then print a ‚Äúcan‚Äôt find it‚Äù message.&lt;/p&gt;
&lt;p&gt;The code to run, inspired by &lt;a href=&quot;https://stackoverflow.com/questions/1955505/parsing-json-with-unix-tools#comment36088507_18469304&quot;&gt;a StackOverflow comment&lt;/a&gt;, is a node process with two flags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt; tells node to evaluate the script that you pass&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; tells node to print the results to the console&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Within the script, I am using &lt;code&gt;JSON&lt;/code&gt; to parse the results of a &lt;code&gt;fs.readFileSync()&lt;/code&gt; of the &lt;code&gt;package.json&lt;/code&gt;, then diving down to the &lt;code&gt;scripts&lt;/code&gt; key.&lt;/p&gt;
&lt;p&gt;I set it up by running &lt;code&gt;chmod&lt;/code&gt; with two flags on the file in a &lt;code&gt;scripts/&lt;/code&gt; directory:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; u+x ~/scripts/npm-scripts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I could resource my terminal and run the command with &lt;code&gt;npm-scripts&lt;/code&gt;. Bish bash bosh.&lt;/p&gt;
&lt;p&gt;Everything worked fine, but I wanted an easier way to share my script with others. The &lt;code&gt;chmod&lt;/code&gt; command and flags are hard to remember, so it would be easier if the script could be compressed into a one-liner that could be aliased in their &lt;code&gt;~/.bash_profile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To do that, I removed all the new lines and added semicolons to separate the statements. The alias needed to be wrapped in quotes, so I escaped all the double quotes within the script.&lt;/p&gt;
&lt;p&gt;Now I had a handy alias to share:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;if [[ -f &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;package.json&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt; ]]; then node -pe &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;JSON.parse(require(&#39;fs&#39;).readFileSync(&#39;package.json&#39;).toString()).scripts&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;; else echo &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;There is no package.json in this directory&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;; fi&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Overall, I‚Äôm pretty happy with this utility. Going forward, I would like to extend it so that you can lookup and key on &lt;code&gt;package.json&lt;/code&gt; by passing an argument.&lt;/p&gt;
&lt;h2 id=&quot;update-%E2%80%93-apr-4%2C-2020&quot; tabindex=&quot;-1&quot;&gt;Update ‚Äì Apr 4, 2020&lt;/h2&gt;
&lt;p&gt;I created a new script to which you could pass an argument to pick a key from the &lt;code&gt;package.json&lt;/code&gt;. This script is in zsh, but I think it ports to bash:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# rpj - Read package.json&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-name function&quot;&gt;rpj&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;token string&quot;&gt;&quot;package.json&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; -pe &lt;span class=&quot;token string&quot;&gt;&quot;JSON.parse(require(&#39;fs&#39;).readFileSync(&#39;package.json&#39;).toString())[&#39;&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&#39; || &#39;scripts&#39;]&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;There is no &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;package.json&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; in this directory&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note how the shell arguments need to be wrapped in &lt;code&gt;&#39;&#39;&lt;/code&gt; in order to work. Otherwise JavaScript thinkgs that it is looking for a variable, which is undefined.&lt;/p&gt;
&lt;p&gt;If no argument is provided, then it falls back to printing the scripts which is probably the most common use case for me.&lt;/p&gt;
&lt;p&gt;I also named the new function &lt;code&gt;rpj&lt;/code&gt; for ‚ÄúRead &lt;code&gt;package.json&lt;/code&gt;‚Äù to avoid any &lt;a href=&quot;https://en.wikipedia.org/wiki/Name_server&quot;&gt;confusion with name servers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the next iteration, I would like to handle errors, but that is a project for another day.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Free to grow</title>
            <link href="https://seanmcp.com/articles/free-to-grow-with-tests/"/>
            <updated>2020-02-17T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/free-to-grow-with-tests/</id>
            <content type="html">&lt;!-- Outline

- Holds up to refactoring
- Promotes iteration
- Confidence to grow
--&gt;
&lt;p&gt;I previously &lt;a href=&quot;https://seanmcp.com/articles/snapshot_test_ui_components&quot;&gt;wrote about testing UI components&lt;/a&gt;, and why I recommend that you don‚Äôt use snapshots. I finished that article with this line:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Your tests should give me the confidence to refactor any component to your heart‚Äôs content. They should fail if you change functionality, not structure.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Instead, I advocate for writing entirely &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_testing&quot;&gt;functional tests&lt;/a&gt;, asserting based on the required functionality of the component.&lt;/p&gt;
&lt;p&gt;This type of testing is certainly more difficult and time-consuming (especially compared to snapshots). But I think the benefits are clear: they hold up under &lt;strong&gt;refactoring&lt;/strong&gt;, promote &lt;strong&gt;iteration&lt;/strong&gt;, and gives you the confidence to &lt;strong&gt;grow&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;refactoring&quot; tabindex=&quot;-1&quot;&gt;Refactoring&lt;/h2&gt;
&lt;p&gt;I have yet to come across a component or complex function I‚Äôve written that couldn‚Äôt use refactoring. Maybe it‚Äôs a new technique that is perfect for these situation, or perhaps it‚Äôs logic that appeared logical at the time that isn‚Äôt on a second look.&lt;/p&gt;
&lt;p&gt;Whatever the case, refactoring code is a constant in this profession, and tests (should) help you embrace it.&lt;/p&gt;
&lt;p&gt;When you write a functional test, you start with a statement like ‚ÄúWith &lt;code&gt;A&lt;/code&gt; input, my function should output &lt;code&gt;B&lt;/code&gt;.‚Äù Then you write a test that covers that condition. Your test doesn‚Äôt care how you get from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;, just that you always do.&lt;/p&gt;
&lt;p&gt;Maybe the first time through you take a long an circuitous path with lots of conditional logic. Next time you refactor, you take a more direct route. Then you decide that some of those conditions were necessary. The test doesn‚Äôt care, so long as &lt;code&gt;fn(A) = B&lt;/code&gt;.&lt;/p&gt;
&lt;!-- &lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Refactoring ones own code, and watching the tests continue to pass, is both a humbling and an enriching experience.&lt;/p&gt;&amp;mdash; Venkat Subramaniam (@venkat_s) &lt;a href=&quot;https://twitter.com/venkat_s/status/1176386197641412608?ref_src=twsrc%5Etfw&quot;&gt;September 24, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; --&gt;
&lt;h2 id=&quot;iteration&quot; tabindex=&quot;-1&quot;&gt;Iteration&lt;/h2&gt;
&lt;p&gt;Refactoring is looking back at code, while iterating is looking ahead. Our goal as software engineers should be to continuously deliver incremental improvements on our active products. This means slowing building on what we already have.&lt;/p&gt;
&lt;p&gt;Maybe you designed a function with situation A in mind, but notice that with a minor adjustment it can easily handle B and C. Once you are done making that change, the functional test that you wrote for situation A should be the barometer for moving forward.&lt;/p&gt;
&lt;p&gt;If the test passes, then you‚Äôre good to proceed. If not, then you‚Äôve made a breaking change; go back and rethink your approach.&lt;/p&gt;
&lt;p&gt;When you‚Äôre looking to add a new feature to your product, a passing test suite should give you full confidence that all of your changes are backwards compatible.&lt;/p&gt;
&lt;h2 id=&quot;free-to-grow&quot; tabindex=&quot;-1&quot;&gt;Free to grow&lt;/h2&gt;
&lt;p&gt;A redwood tree doesn‚Äôt grow to 300 feet over night. Rather, a journey of a thousand miles begins with a single step&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/free-to-grow-with-tests/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Great software is not written in one sitting. It is fine tuned and improved slowly over the lifespan of the product.&lt;/p&gt;
&lt;p&gt;This means a regular cycle of refactoring and iteration‚Äìimproving and expanding. The more your software is able to do this, the healthier it is and the better it will become over time.&lt;/p&gt;
&lt;p&gt;A functional test suite enables and encourages your software to grow this way. You can make improvements to your code and verify that it still functions. You can add more features while being assured that there are no breaking changes.&lt;/p&gt;
&lt;p&gt;To set your team or product up on a thousand-mile journey, start with your best foot forward. Write the kind of tests that enable you to take each successive step with confidence.&lt;/p&gt;
&lt;p&gt;Write functional tests.&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Paraphrased from Laozi‚Äôs &lt;a href=&quot;https://en.wikipedia.org/wiki/Tao_Te_Ching&quot;&gt;&lt;em&gt;Tao Te Ching&lt;/em&gt;&lt;/a&gt; &lt;a href=&quot;https://seanmcp.com/articles/free-to-grow-with-tests/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Great programming reads</title>
            <link href="https://seanmcp.com/articles/great-programming-reads/"/>
            <updated>2020-03-20T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/great-programming-reads/</id>
            <content type="html">&lt;p&gt;This is an alphabetical list that has helped shape the way that I think about software engineering.&lt;/p&gt;
&lt;p&gt;At some point in the future I may add some commentary on why I found these insightful. Until then, you‚Äôll have to form those opinions for yourself.&lt;/p&gt;
&lt;h2 id=&quot;articles&quot; tabindex=&quot;-1&quot;&gt;Articles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://signalvnoise.com/posts/3124-give-it-five-minutes&quot;&gt;&lt;em&gt;Give it five minutes&lt;/em&gt;&lt;/a&gt; by Jason Fried&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://overreacted.io/optimized-for-change/&quot;&gt;&lt;em&gt;Optimize for change&lt;/em&gt;&lt;/a&gt; by Dan Abramov&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction&quot;&gt;&lt;em&gt;The wrong abstraction&lt;/em&gt;&lt;/a&gt; by Sandi Metz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.brandonsmith.ninja/blog/write-code-not-too-much-mostly-functions&quot;&gt;&lt;em&gt;Write code. Not too much. Mostly functions.&lt;/em&gt;&lt;/a&gt; by Brandon Smith&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to&quot;&gt;&lt;em&gt;Write code that is easy to delete, not easy to extend.&lt;/em&gt;&lt;/a&gt; by tef&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
        
        <entry>
            <title>Laws I Love</title>
            <link href="https://seanmcp.com/articles/laws-i-love/"/>
            <updated>2020-04-14T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/laws-i-love/</id>
            <content type="html">&lt;h2 id=&quot;laws&quot; tabindex=&quot;-1&quot;&gt;Laws&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The Golden Rule&lt;/strong&gt;: Treat your neighbor as you would like to be treated&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Campbell‚Äôs Law&lt;/strong&gt;: Using an social indicator for decision-making will lead to distortion and corruption of the process it is intended to monitor &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/laws-i-love/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Goodhart‚Äôs Law&lt;/strong&gt;: When a measure becomes a target, it ceases to be a good measure&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parkinson‚Äôs Law&lt;/strong&gt;: Work expands to the time allotted&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Campbell%27s_law&quot;&gt;https://en.wikipedia.org/wiki/Campbell&#39;s_law&lt;/a&gt; &lt;a href=&quot;https://seanmcp.com/articles/laws-i-love/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Tools for custom Slack emojis</title>
            <link href="https://seanmcp.com/articles/tools-for-custom-slack-emojis/"/>
            <updated>2020-04-14T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/tools-for-custom-slack-emojis/</id>
            <content type="html">&lt;p&gt;Custom emojis are a fun way to customize your Slack workplace. The fun, silly, and can provide some genuine utility for the rest of your team.&lt;/p&gt;
&lt;p&gt;Slack already &lt;a href=&quot;https://slack.com/help/articles/206870177-Add-custom-emoji&quot;&gt;has a guide for adding custom emojis&lt;/a&gt;, so I won‚Äôt be reinventing the wheel here. But I wanted to share some of the online tools that I use to whip out some fresh emojis for every occasion.&lt;/p&gt;
&lt;h2 id=&quot;tools&quot; tabindex=&quot;-1&quot;&gt;Tools&lt;/h2&gt;
&lt;h3 id=&quot;google-images&quot; tabindex=&quot;-1&quot;&gt;Google Images&lt;/h3&gt;
&lt;p&gt;When looking for an emoji, I usually start with &lt;a href=&quot;https://images.google.com/&quot;&gt;a Google Images search&lt;/a&gt;. Once I get the results, I use their tools to change the color and the usage rights.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Tools &amp;gt; Color &amp;gt; Transparent&lt;/code&gt;: Gets you those sweet transparent backgrounds&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tools &amp;gt; Usage Rights&lt;/code&gt;: I don‚Äôt often do this because most images are not correctly labelled, but it‚Äôs still good to know&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once I find the perfect image, just right-click and download the image or save the URL to use in another tool.&lt;/p&gt;
&lt;h3 id=&quot;svg-to-png&quot; tabindex=&quot;-1&quot;&gt;SVG to PNG&lt;/h3&gt;
&lt;p&gt;Sometimes the perfect image from Google is an SVG, but sadly Slack does not support SVG emojis. &lt;a href=&quot;https://svgtopng.com/&quot;&gt;Enter SVG to PNG&lt;/a&gt;, which ‚Äì you guessed it ‚Äì converts SVGs to usable PNGs.&lt;/p&gt;
&lt;h3 id=&quot;remove-bg&quot; tabindex=&quot;-1&quot;&gt;Remove BG&lt;/h3&gt;
&lt;p&gt;Other times the perfect image is a JPG or something with a solid white background. You can use these as emojis, but they don‚Äôt look as nice. Instead, you can take that image &lt;a href=&quot;https://www.remove.bg/&quot;&gt;and easily remove the background with removebg&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;ez-gif&quot; tabindex=&quot;-1&quot;&gt;EZ Gif&lt;/h3&gt;
&lt;p&gt;This is probably my favorite tool on this list because it works so well. Despite the name, &lt;a href=&quot;https://ezgif.com/&quot;&gt;EZGif.com is for editing all types of images&lt;/a&gt; with crops, resizes, optimizations, and other effects. The neatest bit is that you can pipe the output from one edit into another.&lt;/p&gt;
&lt;p&gt;You might start with one image from Google, then crop it, resize it, and optimize it to make it ready for Slack.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I hope that helps! Happy reacting!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>How to open the Dev Tools</title>
            <link href="https://seanmcp.com/articles/how-to-open-dev-tools/"/>
            <updated>2020-04-15T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/how-to-open-dev-tools/</id>
            <content type="html">&lt;p&gt;As a web developer, one of the most powerful tools in your arsenal is the browser‚Äôs developer tools.&lt;/p&gt;
&lt;p&gt;Here is a list of all the ways to access the dev tools for your browser and operating system.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;with-your-mouse&quot; tabindex=&quot;-1&quot;&gt;With your mouse&lt;/h2&gt;
&lt;h3 id=&quot;in-the-window&quot; tabindex=&quot;-1&quot;&gt;In the window&lt;/h3&gt;
&lt;p&gt;You can enter the dev tools with the mouse by right clicking on any element. In the menu that appears, select ‚ÄúInspect‚Äù or ‚ÄúInspect Element‚Äù:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Chrome&lt;/strong&gt;: &lt;code&gt;Right click &amp;gt; Inspect&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firefox&lt;/strong&gt;: &lt;code&gt;Right click &amp;gt; Inspect Element&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;through-settings&quot; tabindex=&quot;-1&quot;&gt;Through settings&lt;/h3&gt;
&lt;p&gt;You can also enter the dev tools through your browser‚Äôs settings menu.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Chrome&lt;/strong&gt;: &lt;code&gt;Three dot menu &amp;gt; More tools &amp;gt; Developer tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firefox&lt;/strong&gt;: &lt;code&gt;Three bar menu &amp;gt; Web Developer &amp;gt; Toggle Tools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;keyboard-shortcuts&quot; tabindex=&quot;-1&quot;&gt;Keyboard shortcuts&lt;/h2&gt;
&lt;p&gt;Beyond the mouse, there are shortcuts that you can use to open the dev tools without leaving your keyboard.&lt;/p&gt;
&lt;p&gt;The shortcuts differ by browser and operating system, so I‚Äôve tried to group them logically below.&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/how-to-open-dev-tools/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; Windows and Linux commands are the same, so I‚Äôve comibined them into ‚ÄúWin/Lin‚Äù.&lt;/p&gt;
&lt;h3 id=&quot;elements%2Finspector&quot; tabindex=&quot;-1&quot;&gt;Elements/Inspector&lt;/h3&gt;
&lt;p&gt;The default tab, it allows you to inspect and edit the elements in the DOM, their properties, and styles.&lt;/p&gt;
&lt;h4 id=&quot;chrome-%26-firefox&quot; tabindex=&quot;-1&quot;&gt;Chrome &amp;amp; Firefox&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;kbd&gt;command&lt;/kbd&gt; + &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;c&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Win/Lin&lt;/strong&gt;: &lt;kbd&gt;control&lt;/kbd&gt; + &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;c&lt;/kbd&gt; &lt;strong&gt;OR&lt;/strong&gt; &lt;kbd&gt;F12&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;console&quot; tabindex=&quot;-1&quot;&gt;Console&lt;/h3&gt;
&lt;p&gt;This tab prints the console calls from your code and allows you to write JavaScript that interacts with the current web page.&lt;/p&gt;
&lt;h4 id=&quot;chrome&quot; tabindex=&quot;-1&quot;&gt;Chrome&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;kbd&gt;command&lt;/kbd&gt; + &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;j&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Win/Lin&lt;/strong&gt;: &lt;kbd&gt;control&lt;/kbd&gt; + &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;j&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;firefox&quot; tabindex=&quot;-1&quot;&gt;Firefox&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;kbd&gt;command&lt;/kbd&gt; + &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;k&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Win/Lin&lt;/strong&gt;: &lt;kbd&gt;control&lt;/kbd&gt; + &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;k&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;debugger&quot; tabindex=&quot;-1&quot;&gt;Debugger&lt;/h3&gt;
&lt;p&gt;This tab shows all the source code for your project and allows you to debug with breakpoints.&lt;/p&gt;
&lt;h4 id=&quot;firefox-1&quot; tabindex=&quot;-1&quot;&gt;Firefox&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;kbd&gt;command&lt;/kbd&gt; + &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;z&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Win/Lin&lt;/strong&gt;: &lt;kbd&gt;control&lt;/kbd&gt; + &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;z&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;network&quot; tabindex=&quot;-1&quot;&gt;Network&lt;/h3&gt;
&lt;p&gt;This tab logs all network requests and provides detailed information about the responses.&lt;/p&gt;
&lt;h4 id=&quot;firefox-2&quot; tabindex=&quot;-1&quot;&gt;Firefox&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;kbd&gt;command&lt;/kbd&gt; + &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;e&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Win/Lin&lt;/strong&gt;: &lt;kbd&gt;control&lt;/kbd&gt; + &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;e&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;most-recent&quot; tabindex=&quot;-1&quot;&gt;Most recent&lt;/h3&gt;
&lt;p&gt;This will open the most recently opened tab. In my experience, it‚Äôs the shortcut that I reach for most often.&lt;/p&gt;
&lt;h4 id=&quot;chrome-%26-firefox-1&quot; tabindex=&quot;-1&quot;&gt;Chrome &amp;amp; Firefox&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: &lt;kbd&gt;command&lt;/kbd&gt; + &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Win/Lin&lt;/strong&gt;: &lt;kbd&gt;control&lt;/kbd&gt; + &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;i&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Phew! That was a bigger undertaking than I first imagined. If I made any mistakes, &lt;a href=&quot;https://seanmcp.com/articles/how-to-open-dev-tools/#comment-link&quot;&gt;please let me know&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope that helps! Happy tooling!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I spent a good deal of time debating how to outline this article. I eventually decided to group things by dev tool tab instead of browser or operating system. There is more in common than not, so this seemed the simplest. &lt;a href=&quot;https://seanmcp.com/articles/how-to-open-dev-tools/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>MagnoliaJS 2020 conference notes</title>
            <link href="https://seanmcp.com/articles/magnoliajs-2020-conference-notes/"/>
            <updated>2020-04-16T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/magnoliajs-2020-conference-notes/</id>
            <content type="html">&lt;p&gt;MagnoliaJS was thrown a COVID-19-sized curve ball for it‚Äôs second annual conference. But that didn‚Äôt stop the organizer‚Äôs from hosting Mississippi‚Äôs only technical conference: they cut the price and pivoted online with Zoom.&lt;/p&gt;
&lt;p&gt;Niche graciously ‚Äúsent‚Äù me to this two-day remote conference and here are some of my notes:&lt;/p&gt;
&lt;h2 id=&quot;day-1&quot; tabindex=&quot;-1&quot;&gt;Day 1&lt;/h2&gt;
&lt;h3 id=&quot;keynote%3A-i%E2%80%99m-techie-and-i-know-it&quot; tabindex=&quot;-1&quot;&gt;Keynote: &lt;em&gt;I‚Äôm Techie and I Know It&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Nashlie Sephus | @phenomenashlie&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the area that you are most passionate about, and look for problems in that space&lt;/li&gt;
&lt;li&gt;With that problem in mind, look for ways to use technology to solve it&lt;/li&gt;
&lt;li&gt;There are ethnic disparities in data samples that negatively impact the products we create&lt;/li&gt;
&lt;li&gt;We need to make a concerted effort to gather representative data&lt;/li&gt;
&lt;li&gt;Good data in; good data out. Garbage in; garbage out.&lt;/li&gt;
&lt;li&gt;Everybody has a responsibility to give back to the community that helped create them&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;es8%2C-es9%2C-es10%2B%E2%80%A6-let%E2%80%99s-explore-javascript%E2%80%99s-exciting-new-features&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;ES8, ES9, ES10+‚Ä¶ Let‚Äôs explore JavaScript‚Äôs exciting new features&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Tyler Clark | @iamtylerclark&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/twclark0/magnoliajs-2020/blob/master/deck.mdx&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In 2015 after a long quiet period, the largest release of JavaScript dropped
&lt;ul&gt;
&lt;li&gt;This was ES6, and it was too much&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Since then, there have been smaller, yearly releases&lt;/li&gt;
&lt;li&gt;ES2016
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Array.includes()&lt;/code&gt; replaced &lt;code&gt;[&#39;foo&#39;].indexOf(&#39;foo&#39;) &amp;gt; -1&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Array.includes()&lt;/code&gt; has an optional second argument for starting point&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt; operator replaced &lt;code&gt;Math.pow()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tagged template literals allow you to pass strings and values to functions
&lt;ul&gt;
&lt;li&gt;This pattern is used by libraries like &lt;code&gt;styled-components&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ES2017
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Promise.finally()&lt;/code&gt; allows you to write one cleanup step for promises&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ES2019
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Array.flat()&lt;/code&gt; combines nested arrays into a single array
&lt;ul&gt;
&lt;li&gt;To flatten recursively, you can pass an &lt;code&gt;Infitity&lt;/code&gt; argument&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.fromEntries()&lt;/code&gt; convert an array into an object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ES2020
&lt;ul&gt;
&lt;li&gt;Dynamic imports: Global &lt;code&gt;import()&lt;/code&gt; that returns a promise that resolves with the module&lt;/li&gt;
&lt;li&gt;Nullish coalescing: &lt;code&gt;??&lt;/code&gt; checks for null or undefined&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fallback&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &#39;fallback&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;fallback&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Optional chaining: &lt;code&gt;?.&lt;/code&gt; will returned undefined if any layer of an object doesn‚Äôt exist
&lt;ul&gt;
&lt;li&gt;Works with dynamic properties: &lt;code&gt;props?.data?.[props.name]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.allSettled&lt;/code&gt;: Like &lt;code&gt;Promise.all()&lt;/code&gt; but fulfills even on rejection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Future
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Promise.any()&lt;/code&gt;: First promise that is a success or when all are rejected&lt;/li&gt;
&lt;li&gt;Private class methods and fields: &lt;code&gt;#&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Top-level await: &lt;code&gt;await&lt;/code&gt; does not need to be in wrapped in an &lt;code&gt;async&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Renamed exports: &lt;code&gt;export foo as bar from &#39;./file&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Logical assignments: Assign variable based on logical conditions
&lt;ul&gt;
&lt;li&gt;Examples &lt;code&gt;||=&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;, &lt;code&gt;??=&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;static-generated-sites-%3D%3D%3D-great-performance.-what-are-you-waiting-for%3F&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Static generated sites === great performance. What are you waiting for?&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Debbie O‚ÄôBrien | @debs_obrien&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://noti.st/debbie/8qdhog/static-generated-sites-great-performance-what-are-you-waiting-for&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static is the new dynamic (which was the new static)&lt;/li&gt;
&lt;li&gt;You can mix and match static sites and single-paged applications
&lt;ul&gt;
&lt;li&gt;It‚Äôs not ‚Äúall or nothing‚Äù&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next/Nuxt are great options for walking the line&lt;/li&gt;
&lt;li&gt;Performance tips:
&lt;ul&gt;
&lt;li&gt;Audit your site for performance regularly&lt;/li&gt;
&lt;li&gt;Uses a service to optimize your images
&lt;ul&gt;
&lt;li&gt;Quality and format&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reduce your CSS bundle with smart classes&lt;/li&gt;
&lt;li&gt;Send modern JavaScript to modern browsers&lt;/li&gt;
&lt;li&gt;Split your code&lt;/li&gt;
&lt;li&gt;Lazy-load as much as possible&lt;/li&gt;
&lt;li&gt;Audit your webpack build with the &lt;code&gt;-a&lt;/code&gt; flag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jamstack is worth it&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;design-systems-%26-css-variables%3A-2-design-2-systems&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Design Systems &amp;amp; CSS Variables: 2 Design 2 Systems&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Scott Tolinski | @stolinski&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/stolinski/Design-Systems-CSS-Variables&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS variables are also known as CSS custom properties
&lt;ul&gt;
&lt;li&gt;Not supported in IE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Declare a variable in a scope, and then reference it with the &lt;code&gt;var()&lt;/code&gt; function
&lt;ul&gt;
&lt;li&gt;First thought it was a liability&lt;/li&gt;
&lt;li&gt;After further reflection: scoping is a great feature&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reassign variables based on any selector: classes, media queries, &lt;em&gt;etc&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Design systems comprise: Color, Type, Spacing, Character, Elevation&lt;/li&gt;
&lt;li&gt;Pay attention to vertical spacing and font size&lt;/li&gt;
&lt;li&gt;Margins are tricky: stick with &lt;code&gt;margin-bottom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Styled Components allow you to scope CSS when you want it and embrace the cascade when you don‚Äôt
&lt;ul&gt;
&lt;li&gt;You can reference CSS variables insided &lt;code&gt;styled&lt;/code&gt; components&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Elements should be: simple, obvious, hard to break, and extensible
&lt;ul&gt;
&lt;li&gt;Make components that can‚Äôt be goofed up&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You don‚Äôt need a grid system: use CSS grid or flex box&lt;/li&gt;
&lt;li&gt;Frameworks need to be taught
&lt;ul&gt;
&lt;li&gt;Write only what you need, and use variables as the backbone
&lt;ul&gt;
&lt;li&gt;Colors, typography, and spacing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;vintage-bundles%3A-modern-javascript-for-modern-browsers&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Vintage Bundles: Modern JavaScript for Modern Browsers&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Sia Karamalegos | @TheGreenGreek&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/siakaramalegos/3ae7bdd2398ef75b5d621ee1101bec1e&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transpiling to older versions of JavaScript increases the side of our code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;module&amp;quot;&amp;gt;&lt;/code&gt; is an indicator whether the browser supports ES2015+&lt;/li&gt;
&lt;li&gt;You can save 24-70% in JS bundle sizes&lt;/li&gt;
&lt;li&gt;Reduce load AND parse/eval time
&lt;ul&gt;
&lt;li&gt;Translates to real business gains&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Balance speed and support with differential serving
&lt;ul&gt;
&lt;li&gt;Generate a modern bundle and a legacy bundle&lt;/li&gt;
&lt;li&gt;A main bundle that loads a polyfill on older browsers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Module scripts are supported by 90%+ of browsers by usage&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;twitter-driven-development%2C-redux&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Twitter Driven Development, Redux&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Justin Samuels | @ThugDebugger&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Three keys of asking a good question in a tweet:
&lt;ol&gt;
&lt;li&gt;Ask: Is this a relevant question? Is it clear? Is it concise?
&lt;ul&gt;
&lt;li&gt;People have stuff to do, minimize the amount of time they need to take to help you&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pour: Share with others the knowledge that has been shared with you
&lt;blockquote&gt;
&lt;p&gt;A candle doesn‚Äôt lose it‚Äôs intensity by lighting another&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Offer to help other people&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Effort: This is the hardest part
&lt;ul&gt;
&lt;li&gt;Don‚Äôt make excuses; do the thing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Another acronym, ATL: ask the question, teach others, and learn new things&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;create-dynamic-web-apps-with-serverless-and-the-jamstack&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Create Dynamic Web Apps With Serverless and the Jamstack&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Jason Lengstorf | @jlengstorf&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://magnolia-serverless.netlify.app/&quot;&gt;&lt;strong&gt;Demo&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We still need servers&lt;/li&gt;
&lt;li&gt;‚ÄúServerless‚Äù just means someone else‚Äôs servers
&lt;ul&gt;
&lt;li&gt;Managed infrastructure&lt;/li&gt;
&lt;li&gt;Let the experts (AWS, Microsoft, Google) do the heavy lifting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Serverless lets us focus on logic, not infrastructure
&lt;ul&gt;
&lt;li&gt;It‚Äôs hard, because it‚Äôs a lot (and it‚Äôs repetitive)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Live demo of &lt;a href=&quot;https://www.netlify.com/products/functions/&quot;&gt;Netlify Functions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;A way to add severless actions to static sites on Netlify&lt;/li&gt;
&lt;li&gt;Pretty cool&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;day-2&quot; tabindex=&quot;-1&quot;&gt;Day 2&lt;/h2&gt;
&lt;h3 id=&quot;which-database%3F-how-to-choose-the-best-place-for-your-json-documents&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Which Database? How to Choose the Best Place for your JSON Documents&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Suphatra Rufo | @skprufo&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Database overview
&lt;ul&gt;
&lt;li&gt;Relational databases developed by IBM back in the 1970s&lt;/li&gt;
&lt;li&gt;Non-relational databases respond better to unexpected events
&lt;ul&gt;
&lt;li&gt;Instagram spikes at New Years handled better by non-relational dbs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JSON is the &lt;em&gt;de facto&lt;/em&gt; way to communicate data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Key value
&lt;ul&gt;
&lt;li&gt;Dictionary data structure
&lt;ul&gt;
&lt;li&gt;Pros: simple, ess memory, better performance, partiionable, horizontal scaling&lt;/li&gt;
&lt;li&gt;Cons: no query language, key management is vital, freeform search impossible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AWS DynamoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Document-oriented databases
&lt;ul&gt;
&lt;li&gt;A better way to store JSON&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multi-modes
&lt;ul&gt;
&lt;li&gt;Support and mange different models&lt;/li&gt;
&lt;li&gt;Couchbase can normalize and denormalize documents&lt;/li&gt;
&lt;li&gt;SQL querying with NQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;thar-be-dragons%3A-rebuilding-native-uis-on-the-web&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Thar Be Dragons: Rebuilding Native UIs on the Web&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Chance Strickland | @chancethedev&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tender-stonebraker-e2b443.netlify.app/&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The web started as a platform for sharing documents&lt;/li&gt;
&lt;li&gt;As it grew, we started to develop more interactive elements&lt;/li&gt;
&lt;li&gt;Today, we have complex HTML elements for rich interactions
&lt;ul&gt;
&lt;li&gt;Why don‚Äôt we use them?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reasons why we build custom controls: appearance, functionality, browser differences, accessibility issues&lt;/li&gt;
&lt;li&gt;Libraries can only do so much to recreate native UI elements&lt;/li&gt;
&lt;li&gt;Takeaways
&lt;ol&gt;
&lt;li&gt;Use HTML&lt;/li&gt;
&lt;li&gt;Identify good primitives&lt;/li&gt;
&lt;li&gt;Understand the full scope&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;svelte-and-the-great-space-elevator&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Svelte and the Great Space Elevator&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Shawn Wang | @swyx&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1fTdTyCVdiHC7PvyYRzmessS09TfLFDXEk50aRhb-JRM/edit&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://youtu.be/atOIxTHylF8&quot;&gt;&lt;strong&gt;Talk&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do we get into space?
&lt;ul&gt;
&lt;li&gt;There is a tradeoff between the amount of fuel you need (to carry valuable payload) and the weight from that additional fuel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How do we make the web?
&lt;ul&gt;
&lt;li&gt;The web wasn‚Äôt designed for everything that we use it for&lt;/li&gt;
&lt;li&gt;This is especially true for mobile web (low powered, slow connections)&lt;/li&gt;
&lt;li&gt;JavaScript is really heavy&lt;/li&gt;
&lt;li&gt;The framework that you choose has a big impact on the ultimate weight&lt;/li&gt;
&lt;li&gt;The tyranny of run-time frameworks:
&lt;ul&gt;
&lt;li&gt;Choose two:
&lt;ul&gt;
&lt;li&gt;Ship more features&lt;/li&gt;
&lt;li&gt;Write less code&lt;/li&gt;
&lt;li&gt;Send less JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A way out
&lt;ul&gt;
&lt;li&gt;Put up a rope!&lt;/li&gt;
&lt;li&gt;A space elevator is a big upfront investment, but a low per use cost&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compilers as the future
&lt;ul&gt;
&lt;li&gt;Tom Dale‚Äôs &lt;em&gt;Compilers are the new Frameworks&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Frameworks are shifting towards smart compiling to reduce bundles&lt;/li&gt;
&lt;li&gt;Svelte
&lt;ul&gt;
&lt;li&gt;Write less code: learn extra syntax, but it will be worth the time
&lt;ul&gt;
&lt;li&gt;Personal experience: 20% less code, 93% smaller bundle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No virtual DOM: it‚Äôs as close to writing vanilla JS as possible
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Compile Svelte in Your Head&lt;/em&gt; by Tan Li Hau&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Truly reactive: Reponds to changes with &lt;code&gt;$&lt;/code&gt; syntax&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lighter tooling that only makes it to the build when used&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;progressive-enhancement-in-react&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Progressive Enhancement in React&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Kayla Sween | @_kaylasween&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kaylasween/accessibility/blob/master/PEforReact-MagnoliaJS2020.pdf&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spectrum of delivery: HTLM &amp;gt; CSS &amp;gt; JavaScript
&lt;ul&gt;
&lt;li&gt;Structure it with HTML&lt;/li&gt;
&lt;li&gt;Make it pretty with CSS&lt;/li&gt;
&lt;li&gt;Add behavior with JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why Progressive Enhancement?
&lt;ul&gt;
&lt;li&gt;Enhanced accessibility and performance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Start with core functionality and choose the simplest technologies to make it work&lt;/li&gt;
&lt;li&gt;Then you can sprinkle on optional features&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;building-jamstack-cms%3A-a-full-stack-cms-for-the-modern-age&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Building JAMstack CMS: A Full Stack CMS for the Modern Age&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Nader Dabit&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.dropbox.com/sh/bhdci4t3z4qupiv/AAC7fQO6IfwUfvIkFiv_eg6Qa?dl=0&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Wordpress alternative with all jamstack technologies&lt;/li&gt;
&lt;li&gt;More information: &lt;a href=&quot;https://github.com/jamstack-cms&quot;&gt;https://github.com/jamstack-cms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;handling-data-with-react-query&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Handling Data with React Query&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Domitrius Clark | @domitriusclark&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://slides.com/domitrius/react-query/fullscreen&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&quot;https://egghead.io/playlists/use-react-query-s-hooks-to-query-and-mutate-data-in-your-react-components-64d6?af=4roogg&quot;&gt;&lt;strong&gt;Course&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I accidentally missed this!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;canvas%3A-the-final-escape-hatch&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Canvas: The Final Escape Hatch&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Ken Wheeler | @ken_wheeler&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://drive.google.com/open?id=1OdDF3VZwuBmRQWRPhN-sWzl7PQJw3mQd&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Canvas is a browser API to draw 2D graphics&lt;/li&gt;
&lt;li&gt;WebGL: alternative, high performance API for drawing on the &lt;code&gt;canvas&lt;/code&gt; element with the GL language&lt;/li&gt;
&lt;li&gt;For games, data vizualization, high-performance graphics, granular control over rendering&lt;/li&gt;
&lt;li&gt;Drawbacks: No layouts, no z-index, bad a11y, with a strange imperative API&lt;/li&gt;
&lt;li&gt;Drawing methods
&lt;ul&gt;
&lt;li&gt;Immediate: Redraws the entire canvas every time
&lt;ul&gt;
&lt;li&gt;Tough on CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Patching: Only redraw pars that have changed
&lt;ul&gt;
&lt;li&gt;Hard to handle full draws&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compositing: Layering convases&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Events: All events are listening to the parent &lt;code&gt;canvas&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Use a spacial index with a library like RBush&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scroll: Let the browser and DOM help you
&lt;ul&gt;
&lt;li&gt;Using overflow and elements porportional to the content&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Layout: Everything is absolute positions
&lt;ul&gt;
&lt;li&gt;You can use a layout solution like Yoga (&lt;code&gt;yoga-layout&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Plug: &lt;code&gt;react-blazing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Other libraries: Skia, Lottie, PixiJS&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;how-to-supercharge-teams-with-carefully-crafted-conventions&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;How to Supercharge Teams with Carefully Crafted Conventions&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speaker&lt;/strong&gt;: Chris Ball | @cball_&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/cball/how-to-supercharge-teams-with-carefully-crafted-conventions&quot;&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every good scalable system relies on process and automation
&lt;ul&gt;
&lt;li&gt;How you develop, your workflows, how you do things&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Process is built by conventions&lt;/li&gt;
&lt;li&gt;How to be your best dev:
&lt;ul&gt;
&lt;li&gt;Play to your strengths&lt;/li&gt;
&lt;li&gt;Understand what slows you down&lt;/li&gt;
&lt;li&gt;Eliminate decision fatigue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples in the wild
&lt;ul&gt;
&lt;li&gt;Next.js: leans in to standardized conventions in React&lt;/li&gt;
&lt;li&gt;GraphQL: a system for requesting data and documenting&lt;/li&gt;
&lt;li&gt;Utility css frameworks&lt;/li&gt;
&lt;li&gt;Semantic versioning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Crafting your own
&lt;ul&gt;
&lt;li&gt;Find a base and build on it
&lt;ul&gt;
&lt;li&gt;If you‚Äôre disabling everything, it means that you are following the wrong convention&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a plugin for your team&lt;/li&gt;
&lt;li&gt;Add a PR checklist
&lt;ul&gt;
&lt;li&gt;Screenshots (GIFs)&lt;/li&gt;
&lt;li&gt;Automated tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Leverage generators
&lt;ul&gt;
&lt;li&gt;Hygen templates that live alongside the code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to perfect process
&lt;ul&gt;
&lt;li&gt;Synchronization: Understand the vision with RFCs
&lt;ul&gt;
&lt;li&gt;Summary, motivation, examples, how to teach, how to enforce, drawbacks, and questions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repitition: Continually refining with retros&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;reflection&quot; tabindex=&quot;-1&quot;&gt;Reflection&lt;/h2&gt;
&lt;p&gt;I enjoyed having a single track of JS-focused talks. The remote conference had it‚Äôs own technical issues, but overall I think it was a great content delivery method for these types of topics.&lt;/p&gt;
&lt;p&gt;Some of the talks were prerecorded, which might sound like a let down, but the speakers were presents in the chat and willing to answer questions live. That was a neat feature that other conferences cannot offer.&lt;/p&gt;
&lt;p&gt;Whether it‚Äôs remote or in-person in 2021, I recommend checking out MagnoliaJS Conference.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Over my head</title>
            <link href="https://seanmcp.com/articles/over-my-head/"/>
            <updated>2020-04-24T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/over-my-head/</id>
            <content type="html">&lt;p&gt;I am not as talented as I wish to be. As a result, I come across things on the web that are beyond my current level. This page is a garden for those topics.&lt;/p&gt;
&lt;p&gt;It is my goal to return to this page and move things from ‚Äúare‚Äù over my head to ‚Äúwere.‚Äù&lt;/p&gt;
&lt;h2 id=&quot;are&quot; tabindex=&quot;-1&quot;&gt;Are&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://addyosmani.com/blog/profiling-react-js/&quot;&gt;&lt;em&gt;Profiling React.js Performance&lt;/em&gt;&lt;/a&gt; by Addy Osmani&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mxb.dev/blog/indieweb-link-sharing/&quot;&gt;&lt;em&gt;IndieWeb Link Sharing&lt;/em&gt;&lt;/a&gt; by Max B√∂ck&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;were&quot; tabindex=&quot;-1&quot;&gt;Were&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;None yet&lt;/em&gt;&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Store readable data</title>
            <link href="https://seanmcp.com/articles/store-readable-data/"/>
            <updated>2020-05-11T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/store-readable-data/</id>
            <content type="html">&lt;p&gt;Imagine that you want to store data to look up the continent for every country in the world. The best data structure for this is a object/map/dictionary to quickly access the value without looping. I‚Äôll use the former for my examples:&lt;/p&gt;
&lt;p&gt;Your object map will look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;Algeria&amp;quot;: &amp;quot;Africa&amp;quot;,
    &amp;quot;Angola&amp;quot;: &amp;quot;Africa&amp;quot;,
    &amp;quot;Benin&amp;quot;: &amp;quot;Africa,
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is well and good, but you‚Äôll notice one bit of data is repeated: continent. Any time you have the same bit of data repeated, you run the risk of typing it incorrectly: &lt;code&gt;&amp;quot;Africa&amp;quot; != &amp;quot;Afrcia&amp;quot;&lt;/code&gt;. This is smell number one.&lt;/p&gt;
&lt;p&gt;But let‚Äôs ignore that for now. We want to include all of the countries in the world, so let‚Äôs add a few more:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;Afghanistan&amp;quot;: &amp;quot;Asia&amp;quot;,
    &amp;quot;Algeria&amp;quot;: &amp;quot;Africa&amp;quot;,
    &amp;quot;Argentina&amp;quot;: &amp;quot;South America&amp;quot;,
    &amp;quot;Armenia&amp;quot;: &amp;quot;Asia&amp;quot;,
    &amp;quot;Azerbaijan&amp;quot;: &amp;quot;Asia&amp;quot;,
    &amp;quot;Angola&amp;quot;: &amp;quot;Africa&amp;quot;,
    &amp;quot;Benin&amp;quot;: &amp;quot;Africa,
    &amp;quot;Bolivia&amp;quot;: &amp;quot;South America&amp;quot;,
    &amp;quot;Brazil&amp;quot;: &amp;quot;South America&amp;quot;,
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As this structure grows to accommodate all of our data, it becomes less for humans and therefore less maintainable.&lt;/p&gt;
&lt;p&gt;South America has 3 countries and/or territories that start with ‚ÄúB‚Äù‚Ä¶ do we have them all? It‚Äôs possible to answer that question, but it‚Äôs not easy. This is is smell number two.&lt;/p&gt;
&lt;p&gt;Instead of continuing down this path, let‚Äôs go back to the drawing board.&lt;/p&gt;
&lt;h2 id=&quot;best-for-whom%3F&quot; tabindex=&quot;-1&quot;&gt;Best for whom?&lt;/h2&gt;
&lt;p&gt;Our decision in choosing a data structure was to do what is best &lt;em&gt;for the computer&lt;/em&gt;. Objects are a quick and easy way to retrieve the information that we need.&lt;/p&gt;
&lt;p&gt;But in making that decision, we assumed that the best option was what is best for the computer. Instead, what if we stored data in the way that is best &lt;em&gt;for the human&lt;/em&gt; maintaining it?&lt;/p&gt;
&lt;p&gt;We would still start with an object/map/dictionary, but countries wouldn‚Äôt be at the top level:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;Africa&amp;quot;: [
        &amp;quot;Algeria&amp;quot;,
        &amp;quot;Angola&amp;quot;,
        &amp;quot;Benin&amp;quot;,
        // ...
    ],
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead we would put continents first. Why? Because our brains like to organize the information we encounter into useful groups. In this scenario, the most useful arrangement for counties is by continent.&lt;/p&gt;
&lt;p&gt;With this approach, we made it easier to read and maintain, and removed duplicated data.&lt;/p&gt;
&lt;p&gt;However, this structure is harder for the computer to read. So before we start this loop over again, let‚Äôs add one more bit of code: a transformer.&lt;/p&gt;
&lt;h2 id=&quot;transformer&quot; tabindex=&quot;-1&quot;&gt;Transformer&lt;/h2&gt;
&lt;p&gt;This is a function that will take our data in a particular format and ‚Äútransform‚Äù it into another. In our example, it will turn our human readable code and turn it into computer usable code.&lt;/p&gt;
&lt;p&gt;The implementation of this particular function isn‚Äôt important, so just focus on the input and output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;humanReadable = {
    &amp;quot;Africa&amp;quot;: [
        &amp;quot;Algeria&amp;quot;,
        &amp;quot;Angola&amp;quot;,
        &amp;quot;Benin&amp;quot;,
    ]
}

computerUsable = {
    &amp;quot;Algeria&amp;quot;: &amp;quot;Africa&amp;quot;,
    &amp;quot;Angola&amp;quot;: &amp;quot;Africa&amp;quot;,
    &amp;quot;Benin&amp;quot;: &amp;quot;Africa&amp;quot;,
}

transformer(humanReadable) = computerUsable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run the transformer once at the beginning of our code, we now have the readibility of the first structure &lt;em&gt;and&lt;/em&gt; the usability of the second.&lt;/p&gt;
&lt;p&gt;So store readable data. You, or the developer after you, will thank you for it.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Logging with Eleventy and Nunjucks</title>
            <link href="https://seanmcp.com/articles/logging-with-eleventy-and-nunjucks/"/>
            <updated>2020-05-12T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/logging-with-eleventy-and-nunjucks/</id>
            <content type="html">&lt;p&gt;This site was forked from the &lt;a href=&quot;https://github.com/11ty/eleventy-base-blog&quot;&gt;Eleventy base blog&lt;/a&gt; and uses &lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot;&gt;Nunjucks templates&lt;/a&gt;. When everything is working, it is as smooth as can be. But when I run into an issue, I often find it difficult to debug.&lt;/p&gt;
&lt;p&gt;Recently I was trying to do some logical rendering based on article tags. I knew the information was at my finger tips, but I couldn‚Äôt guess the right key. &lt;strong&gt;All I need is a simple &lt;code&gt;console.log()&lt;/code&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;I searched combinations like ‚Äúdebugging in eleventy‚Äù and ‚Äúconsole logging in nunjucks‚Äù, but none of the suggestions quite worked. But they did give me an idea: a custom filter for logging.&lt;/p&gt;
&lt;p&gt;Opening up &lt;code&gt;.eleventy.js&lt;/code&gt;, I added the following lines:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addFilter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;log&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that, I could then use the &lt;code&gt;log&lt;/code&gt; filter in my Nunjuck template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ article | log }}
&amp;lt;li class=&amp;quot;article&amp;quot;&amp;gt; ... &amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I had Eleventy logging the entire article object in the terminal! Exactly what I needed.&lt;/p&gt;
&lt;p&gt;I tinkered around with returning a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; from the filter to log on the client too, but that required &lt;code&gt;JSON.stringify()&lt;/code&gt; and piping the result into the &lt;code&gt;safe&lt;/code&gt; filter. That was more than I wanted to mess with, but there might be a solution there that works for you.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>How to get the browser and version in JavaScript</title>
            <link href="https://seanmcp.com/articles/how-to-get-the-browser-version-in-javascript/"/>
            <updated>2020-05-19T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/how-to-get-the-browser-version-in-javascript/</id>
            <content type="html">&lt;p&gt;For a recent project, I wanted to display the browser and version on the screen. I figured that this would be possible in JavaScript, so I went searching around.&lt;/p&gt;
&lt;p&gt;This led me to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent&quot;&gt;User-Agent&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/User_agent#User_agent_sniffing&quot;&gt;‚Äúsniffing‚Äù&lt;/a&gt;, and its &lt;a href=&quot;https://www.w3.org/community/webed/wiki/Optimizing_content_for_different_browsers:_the_RIGHT_way#A_brief_history_of_browser_sniffing&quot;&gt;wild and crazy history&lt;/a&gt;. I also read a bunch of articles on why serving different content to different browsers is a bad idea. &lt;a href=&quot;https://seanmcp.com/articles/how-to-get-the-browser-version-in-javascript/#additional-reading&quot;&gt;I‚Äôll link them at the bottom of this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I just want to display the browser and version, so the referencing the user agent is a fine enough solution (&lt;a href=&quot;https://css-tricks.com/freezing-user-agent-strings/&quot;&gt;even if temporary&lt;/a&gt;). &lt;strong&gt;But you should definitely think twice before you go user agent sniffing&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;accessing-the-user-agent&quot; tabindex=&quot;-1&quot;&gt;Accessing the user agent&lt;/h2&gt;
&lt;p&gt;You can access the user agent from the read-only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Navigator&quot;&gt;global &lt;code&gt;Navigator&lt;/code&gt; interface&lt;/a&gt;. That‚Äôs as simple as writing:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;userAgent&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on your browser, you should see a few different outputs:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Firefox&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Chrome&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Edge (Chromium)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36 Edg/81.0.416.77&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Safari&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Safari/605.1.15&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are fascinating, but for this article we are only interested in the differences. If we just look at the tail for each, we get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox: &lt;code&gt;&amp;quot;Firefox/77.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Chrome: &lt;code&gt;&amp;quot;Chrome/81.0.4044.138 Safari/537.36&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edge (Chromium): &lt;code&gt;&amp;quot;Chrome/81.0.4044.138 Safari/537.36 Edg/81.0.416.77&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Safari: &lt;code&gt;&amp;quot;Version/13.1 Safari/605.1.15&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this, we know have enough information to parse the string.&lt;/p&gt;
&lt;h2 id=&quot;sniffing-logic&quot; tabindex=&quot;-1&quot;&gt;Sniffing logic&lt;/h2&gt;
&lt;p&gt;Chrome, Edge, and Safari all identify as ‚ÄúSafari‚Äù, so let‚Äôs start our logic with the simplest user agent: Firefox. After that, it‚Äôs a process of determining who has a unique string to search for:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; userAgent &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; navigator&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userAgent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Firefox/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Firefox&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userAgent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Edg/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Edge (Chromium)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userAgent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Chrome/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Chrome&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userAgent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Safari/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Safari&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you can identify the browser from the user agent, it‚Äôs just a matter of using your favorite string parsing method to grab the version. Here‚Äôs the code for Firefox:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userAgent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Firefox/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// Firefox&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Firefox v&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;userAgent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Firefox/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you know of a better way, please &lt;a href=&quot;https://twitter.com/intent/tweet?text=.@snmcp&quot;&gt;tweet me your solution&lt;/a&gt; and I‚Äôll give you a shoutout here.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
&lt;h2 id=&quot;additional-reading&quot; tabindex=&quot;-1&quot;&gt;Additional reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent&quot;&gt;&lt;em&gt;Browser detection using the user agent&lt;/em&gt;&lt;/a&gt; on MDN&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/browser-detection-is-bad/&quot;&gt;&lt;em&gt;Browser Detection is Bad&lt;/em&gt;&lt;/a&gt; by Chris Coyier on CSS-Tricks&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webaim.org/blog/user-agent-string-history/&quot;&gt;&lt;em&gt;History of the browser user-agent string&lt;/em&gt;&lt;/a&gt; by Aaron Andersen on WebAIM&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/community/webed/wiki/Optimizing_content_for_different_browsers:_the_RIGHT_way&quot;&gt;&lt;em&gt;Optimizing content for different browsers: the RIGHT way ¬ß 2.2&lt;/em&gt;&lt;/a&gt; on W3&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
        
        <entry>
            <title>Publishing my first YouTube video</title>
            <link href="https://seanmcp.com/articles/publishing-my-first-youtube-video/"/>
            <updated>2020-05-20T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/publishing-my-first-youtube-video/</id>
            <content type="html">&lt;p&gt;Yesterday, I published my first video on YouTube: &lt;a href=&quot;https://www.youtube.com/watch?v=1bjwBppbpxk&quot;&gt;‚ÄúThree Ways To Open The Firefox DevTools‚Äù&lt;/a&gt;. As the title suggests, it covers the three main ways of opening the DevTools in Firefox, the browser menu, ‚ÄúInspect Element‚Äù, and the keyboard shortcut.&lt;/p&gt;
&lt;p&gt;This is new territory for me, so I wanted to take a moment and reflect on why I started a YouTube channel, what I hope to gain from it, and what I learned in the process.&lt;/p&gt;
&lt;h2 id=&quot;a-new-career-goal&quot; tabindex=&quot;-1&quot;&gt;A new career goal&lt;/h2&gt;
&lt;p&gt;Before working as a software engineer, I worked for three years as a teacher. And while that specific career was right for me, I am still passionate about education and sharing what I know with others. So I am making it a career goal to teach on the side.&lt;/p&gt;
&lt;p&gt;This focus will complement my work as an engineer for all the wonderful ways that teaching is helpful. It will help me be a better team member and mentor at work. And it is an opportunity to give back to a developer community that has already given me so much.&lt;/p&gt;
&lt;p&gt;Eventually, I would like to lead workshops and teach on-line courses, but that is more of a 3-5 year plan.&lt;/p&gt;
&lt;h2 id=&quot;plans-for-youtube&quot; tabindex=&quot;-1&quot;&gt;Plans for YouTube&lt;/h2&gt;
&lt;p&gt;I am going to produce short, informative videos in the same style as &lt;a href=&quot;http://egghead.io/&quot;&gt;Egghead.io&lt;/a&gt;. I have really enjoyed their content and think that there is a strong formula for laser-focused content.&lt;/p&gt;
&lt;p&gt;With that in mind, I‚Äôm aiming for videos in the 3-10 minute range: long enough to be valuable, but not long winded.&lt;/p&gt;
&lt;p&gt;My goal for YouTube is to put out twelve videos that have an average of twelve views and gain twelve subscribers. I‚Äôm hoping that this will take three months, but I don‚Äôt want to commit to a hard timeline.&lt;/p&gt;
&lt;p&gt;After hitting twelve videos, I will reassess my efforts and determine if YouTube is the right platform for this.&lt;/p&gt;
&lt;p&gt;So this first video puts me one step on that journey.&lt;/p&gt;
&lt;p&gt;&lt;progress max=&quot;12&quot; value=&quot;1&quot; style=&quot;width:100%&quot;&gt;1/12&lt;/progress&gt;&lt;/p&gt;
&lt;h2 id=&quot;lessons-learned&quot; tabindex=&quot;-1&quot;&gt;Lessons learned&lt;/h2&gt;
&lt;h3 id=&quot;harder-than-it-looks&quot; tabindex=&quot;-1&quot;&gt;Harder than it looks&lt;/h3&gt;
&lt;p&gt;In a world of endless high-quality content on YouTube, it‚Äôs easy to assume that making videos is easy. At least that‚Äôs what I did. But every step of the process was more difficult that I had anticipated.&lt;/p&gt;
&lt;p&gt;Writing, recording, and editing are all skills unto themselves, and ones that I am not very good at. All of this will require practice.&lt;/p&gt;
&lt;h3 id=&quot;i-need-a-script&quot; tabindex=&quot;-1&quot;&gt;I need a script&lt;/h3&gt;
&lt;p&gt;When I was teaching, some lesson plans had a script for the teacher to read. In front of the classroom, I found this restricting and would avoid reading verbatim.&lt;/p&gt;
&lt;p&gt;In front of a screen, however, the dynamic changes. You can‚Äôt see faces to meter your delivery and the lesson pace. As a result, I find myself getting further off-topic during digital instruction than I did in-person.&lt;/p&gt;
&lt;p&gt;But with a script, it‚Äôs different. I can plan my thoughts ahead of time and hit all the intended points, only lingering when I intend. Writing this kind of script is a skill that I‚Äôm developing, but they are a valuable part of the lesson.&lt;/p&gt;
&lt;h2 id=&quot;things-to-improve&quot; tabindex=&quot;-1&quot;&gt;Things to improve&lt;/h2&gt;
&lt;h3 id=&quot;editing&quot; tabindex=&quot;-1&quot;&gt;Editing&lt;/h3&gt;
&lt;p&gt;I edited this video with iMovie, and it was a new experience. The ‚ÄúProject‚Äù structure is a little confusing, and I had a little bit of trouble importing the video. But the biggest hangup was the preview, which would occassionally not follow the scrubber.&lt;/p&gt;
&lt;p&gt;As a result, I didn‚Äôt edit this video as much as I would have liked. Going forward, I want to watch a few videos on editing in iMovie and see if I can resolve those issues.&lt;/p&gt;
&lt;h3 id=&quot;multiple-takes&quot; tabindex=&quot;-1&quot;&gt;Multiple takes&lt;/h3&gt;
&lt;p&gt;Going into filming, I planned to get everything correct in one go. When something went wrong, I stopped the recording, reset, and then started from scratch.&lt;/p&gt;
&lt;p&gt;That is not sustainable. Instead, I want to keep the ‚Äúfilm rolling.‚Äù If I mess up, just wait a beat and do the line correctly. This should increase the recordig process because I‚Äôm not repeating lines that are good for the sake of ones that need fixed.&lt;/p&gt;
&lt;h2 id=&quot;mouth-sounds&quot; tabindex=&quot;-1&quot;&gt;Mouth sounds&lt;/h2&gt;
&lt;p&gt;Hoo boy, do I make a lot of mouth sounds. My wife had some helpful suggestions that I am going to try in the next recording:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stay hydrated: Keep a glass of water on hand and drink when you‚Äôre thirsty&lt;/li&gt;
&lt;li&gt;Record one line at a time: Whether that is a sentence or a paragraph, do it in one go without swallowing&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once I can isolate the content better, it will be easier for me to edit out those unpleasant sounds.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I plan to post an update on my goal once I‚Äôve hit the ‚Äúsix video‚Äù mark. Until then you can &lt;a href=&quot;https://www.youtube.com/channel/UC5KVcnzcZn_zCYXGR1ErV_A&quot;&gt;watch my progress on YouTube&lt;/a&gt; and &lt;a href=&quot;https://bit.ly/subscribe-seanmcp&quot;&gt;subscribe to stay updated&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy watching!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Read a json file in Node.js</title>
            <link href="https://seanmcp.com/articles/read-a-json-file-in-node-js/"/>
            <updated>2020-05-27T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/read-a-json-file-in-node-js/</id>
            <content type="html">&lt;p&gt;To read any file in Node.js, you need to import the &lt;code&gt;fs&lt;/code&gt; or file system module. From there, you have two methods from which to choose: &lt;code&gt;readFile&lt;/code&gt;, and &lt;code&gt;readFileSync&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Both are similar in that they return &lt;a href=&quot;https://nodejs.org/dist/latest-v14.x/docs/api/buffer.html#buffer_buffer&quot;&gt;a Buffer of binary data&lt;/a&gt; from a file. &lt;code&gt;readFile&lt;/code&gt; accepts a callback that will receive the Buffer, while &lt;code&gt;readFileSync&lt;/code&gt; returns it synchronously.&lt;/p&gt;
&lt;p&gt;In action, they look like:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./data.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    error &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./data.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run this code in a directory with a &lt;code&gt;data.json&lt;/code&gt; file, boths methods will log something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Buffer 7b 0a 20 20 22 64 61 74 61 22 3a 20 74 72 75 65 0a 7d&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both are returning the same data, but it isn‚Äôt consumable. In most instances, you will need to do one more operation in order to use the data that you have read from a file.&lt;/p&gt;
&lt;p&gt;Since we are working with a json file, we can use the global &lt;code&gt;JSON&lt;/code&gt; object to read the data. The &lt;code&gt;parse&lt;/code&gt; method will convert this Buffer into a usuable JSON object:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./data.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    error &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./data.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it again, and you will see whatever data you had stored in your json file logged to the console. You have successfully read a json file in Node.js!&lt;/p&gt;
&lt;p&gt;You can see the code in action here:&lt;/p&gt;
&lt;iframe height=&quot;500px&quot; width=&quot;100%&quot; src=&quot;https://repl.it/@SeanMcP/Read-json-file-in-Nodejs?lite=true&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; sandbox=&quot;allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Read a json file in Deno</title>
            <link href="https://seanmcp.com/articles/read-a-json-file-in-deno/"/>
            <updated>2020-05-28T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/read-a-json-file-in-deno/</id>
            <content type="html">&lt;p&gt;Deno is a &lt;strong&gt;secure&lt;/strong&gt; runtine for JavaScript, so to read a file the program needs explicit permissions. We can enable file reading with the &lt;code&gt;--allow-read&lt;/code&gt; flag in the command line:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;deno run --allow-read read-json.ts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the permissions are straight, we need to read the file. There are a few methods on the &lt;code&gt;Deno&lt;/code&gt; module to use, so let‚Äôs look at two options: &lt;code&gt;readFile&lt;/code&gt;, and &lt;code&gt;readTextFile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let‚Äôs take a look at them separately.&lt;/p&gt;
&lt;h2 id=&quot;readfile&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;readFile&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Deno‚Äôs &lt;code&gt;readFile&lt;/code&gt; method returns a Promise resolves with a Uint8Array. You can call the method like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Deno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So if we run the following code in a directory with a &lt;code&gt;data.json&lt;/code&gt; file, you would see a log like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Uint8Array(29) [
  123,  10,  32,  32,  32, 32,  34, 115,
  111, 117, 114,  99, 101, 34,  58,  32,
   34, 100,  97, 116,  97, 46, 106, 115,
  111, 110,  34,  10, 125
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to read this, we need a new text decoder decoder with and pass the file‚Äôs encoding:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; decoder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TextDecoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Deno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;decoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when we run the code, we see the contents of &lt;code&gt;data.json&lt;/code&gt; logged in the console:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;source&amp;quot;: &amp;quot;data.json&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks good, but it is just a formatted string. To consume this data, we need to use the global &lt;code&gt;JSON&lt;/code&gt; object‚Äôs &lt;code&gt;parse&lt;/code&gt; method to get a usuable json object.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; decoder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TextDecoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Deno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;decoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it again, and you will see whatever data you had stored in your json file logged to the console. You have successfully read a json file in Deno with &lt;code&gt;readFile&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;If you know that your data is utf8 encoded, you can skip a step with the next Deno method.&lt;/p&gt;
&lt;h2 id=&quot;readtextfile&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;readTextFile&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Deno‚Äôs &lt;code&gt;readTextFile&lt;/code&gt; method returns a Promise that resolves to a utf8 decoded string. You can call the method like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Deno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readTextFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, if we run this code in a directory with a &lt;code&gt;data.json&lt;/code&gt; file, you would see the file‚Äôs contents logged in the console:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;source&amp;quot;: &amp;quot;data.json&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks good, but just like before it is only a formatted string. To consume this data, we need to use the global &lt;code&gt;JSON&lt;/code&gt; object‚Äôs &lt;code&gt;parse&lt;/code&gt; method again to get a usuable json object.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Deno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readTextFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run it again, and you will see whatever data you had stored in your json file logged to the console. You have successfully read a json file in Deno with &lt;code&gt;readTextFile&lt;/code&gt;!&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you know that your file is utf8 encoded, using &lt;code&gt;Deno.readTextFile&lt;/code&gt; is an easy way to grab the contents of a file. Otherwise, &lt;code&gt;Deno.readFile&lt;/code&gt; and a decoder can get you on your way.&lt;/p&gt;
&lt;p&gt;Whichever method you choose, just remember to parse the json data before trying to consume it.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Six video update</title>
            <link href="https://seanmcp.com/articles/six-video-update/"/>
            <updated>2020-06-12T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/six-video-update/</id>
            <content type="html">&lt;p&gt;A few weeks ago, I wrote about &lt;a href=&quot;https://seanmcp.com/articles/six-video-update/publishing-my-first-youtube-video&quot;&gt;publishing my first YouTube video&lt;/a&gt;. In that article, I included my reasoning and what I hoped to gain from it.&lt;/p&gt;
&lt;p&gt;My goal is to upload twelve videos, that get an average of twelve views, and get to twelve subscribers.&lt;/p&gt;
&lt;p&gt;Last night, I uploaded my sixth video, &lt;a href=&quot;https://www.youtube.com/watch?v=yMEpIOyoizU&quot;&gt;&lt;em&gt;Set Breakpoints In The Chrome DevTools&lt;/em&gt;&lt;/a&gt;, which puts me at the half-way mark.&lt;/p&gt;
&lt;p&gt;&lt;progress style=&quot;width:100%&quot; min=&quot;0&quot; max=&quot;12&quot; value=&quot;6&quot;&gt;6/12 or 50%&lt;/progress&gt;&lt;/p&gt;
&lt;p&gt;I wanted to share some of the lessons that I learned making and publishing videos 2-6.&lt;/p&gt;
&lt;h2 id=&quot;lessons-learned&quot; tabindex=&quot;-1&quot;&gt;Lessons learned&lt;/h2&gt;
&lt;h3 id=&quot;recording-gets-easier&quot; tabindex=&quot;-1&quot;&gt;Recording gets easier&lt;/h3&gt;
&lt;p&gt;For me, it doesn‚Äôt feel natural to sit and talk to myself in front of the computer. But with practice, I found myself getting more comfortable.&lt;/p&gt;
&lt;p&gt;There is a long way to go, but it is encouraging to see growth after making six videos.&lt;/p&gt;
&lt;h3 id=&quot;keep-it-rolling&quot; tabindex=&quot;-1&quot;&gt;Keep it rolling&lt;/h3&gt;
&lt;p&gt;By keeping a continous recording, I am able to fix mistakes as they come and edit them out later. If anything sounds weird as I say it, I just take a break, and then try the line again.&lt;/p&gt;
&lt;p&gt;This is far easier than trying to get a good ‚Äútake‚Äù of the whole video. I found that a 3-4 minute video would come from 10-12 minutes of continous recording.&lt;/p&gt;
&lt;h3 id=&quot;editing-gets-easier&quot; tabindex=&quot;-1&quot;&gt;Editing gets easier&lt;/h3&gt;
&lt;p&gt;I don‚Äôt think I could say that I &lt;em&gt;like&lt;/em&gt; iMovie, but I‚Äôm getting used to the interface and the steps that I need to go through to edit my videos.&lt;/p&gt;
&lt;p&gt;The biggest frustration that remains is the slider for audio volume (no input?) and the tendency to export the source video instead of the editted version (why is that possible?).&lt;/p&gt;
&lt;p&gt;That being said, I think iMovie will be sufficient for the time being.&lt;/p&gt;
&lt;h3 id=&quot;equipment-matters&quot; tabindex=&quot;-1&quot;&gt;Equipment matters&lt;/h3&gt;
&lt;p&gt;I started off using a $50 microphone from Amazon. It worked, but the audio quality wasn‚Äôt great and it didn‚Äôt provide any control over the recording.&lt;/p&gt;
&lt;p&gt;I traded that in for a Blue Yeti Nano, and the improvement has been noticeable. I‚Äôm still getting into the swing of things, but having the right tools makes a difference.&lt;/p&gt;
&lt;h3 id=&quot;very-few-views&quot; tabindex=&quot;-1&quot;&gt;Very few views&lt;/h3&gt;
&lt;p&gt;Since that initial video, I have averaged 1.2 views per video and gained 2 subscribers (one of whom is my wife). This is lower than I expected, but good to know.&lt;/p&gt;
&lt;p&gt;I want to stress again that &lt;strong&gt;gaining views and subscribers is not by end game&lt;/strong&gt;. Including those two measurements in the goal was an attempt to gauge the utility.&lt;/p&gt;
&lt;p&gt;This may be aided by more promotion on my end, but with everything going on in the world that didn‚Äôt seem the most helpful thing to do.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Once I publish my twelfth video, I want to take a deeper dive into the performance of each video to see what I can glean going forward.&lt;/p&gt;
&lt;p&gt;Until then, &lt;a href=&quot;https://bit.ly/seanmcp-youtube&quot;&gt;happy watching&lt;/a&gt;!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>TypeScript mega-course on Egghead.io</title>
            <link href="https://seanmcp.com/articles/typescript-mega-course-on-egghead/"/>
            <updated>2020-06-15T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/typescript-mega-course-on-egghead/</id>
            <content type="html">&lt;p&gt;&lt;em&gt;This playlist has been updated. &lt;a href=&quot;https://seanmcp.com/articles/typescript-mega-course-on-egghead/updated-typescript-mega-course-on-egghead&quot;&gt;Check out the latest version of my TypeScript ‚Äúmega-course‚Äù on Egghead.io&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I would say that I have ‚Äúfunctional‚Äù understanding of TypeScript. I can get the job done (at least most of the time), but as soon as the types get hairy I struggle.&lt;/p&gt;
&lt;p&gt;As TypeScript contiues grow in popularity, this will become a liability. To fix this, I have set a professional goal to improve my understanding of TypeScript.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://niche.com/&quot;&gt;Niche.com&lt;/a&gt; provides us with a membership to &lt;a href=&quot;http://egghead.io/&quot;&gt;Egghead.io&lt;/a&gt;, so I‚Äôve cobbled together multiple courses on TypeScript:&lt;/p&gt;
&lt;h2 id=&quot;mega-course&quot; tabindex=&quot;-1&quot;&gt;Mega-course&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/up-and-running-with-typescript&quot;&gt;&lt;em&gt;Up and Running with TypeScript&lt;/em&gt;&lt;/a&gt; by John Lindquist (22 min)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/use-types-effectively-in-typescript&quot;&gt;&lt;em&gt;Use Types Effectively in TypeScript&lt;/em&gt;&lt;/a&gt; by Ari Picker (29 min)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/async-await-using-typescript&quot;&gt;&lt;em&gt;Async/Await using TypeScript&lt;/em&gt;&lt;/a&gt; by Basarat Ali Syed (17 min)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/practical-advanced-typescript&quot;&gt;&lt;em&gt;Practical Advanced TypeScript&lt;/em&gt;&lt;/a&gt; by Rares Matei (62 min)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/advanced-static-types-in-typescript&quot;&gt;&lt;em&gt;Advanced Static Types in TypeScript&lt;/em&gt;&lt;/a&gt; by Marius Schulz (67 min)&lt;/li&gt;
&lt;li&gt;Optional: &lt;a href=&quot;https://egghead.io/courses/use-typescript-to-develop-react-applications&quot;&gt;&lt;em&gt;Use TypeScript to develop React Applications&lt;/em&gt;&lt;/a&gt; by Basarat Ali Syed (27 min)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The plan is to complete these courses over the next three weeks. At the end, I‚Äôll review the mega-course and update the order if necessary.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Await multiple promises in JavaScript</title>
            <link href="https://seanmcp.com/articles/await-multiple-promises-in-javascript/"/>
            <updated>2020-06-17T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/await-multiple-promises-in-javascript/</id>
            <content type="html">&lt;p&gt;Let‚Äôs say I have two promises: the former resolves in three seconds, while the latter resolves in five. I need to wait for both of these before moving on to the next code block.&lt;/p&gt;
&lt;p&gt;Depending on how you structure your promises, you will either have to wait five seconds or eight seconds before moving on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the best way to await multiple promises?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;await-happy&quot; tabindex=&quot;-1&quot;&gt;Await happy&lt;/h2&gt;
&lt;p&gt;My first instinct in the above scenario was to use to await both promises. &lt;code&gt;await&lt;/code&gt; is such a useful keyword in modern JS, that I tend to throw it places without a second thought:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;promiseOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Resolves in three seconds&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;promiseTwo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Resolves in five seconds&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;done&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks neat and clean, but how long will it take to resolve? &lt;strong&gt;8 seconds&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Look back at the first line. We‚Äôre asking the JavaScript engine to await the resolution of &lt;code&gt;promiseOne&lt;/code&gt;. In effect, we‚Äôre asking it to twiddle its thumbs for three seconds while we wait on the promise.&lt;/p&gt;
&lt;p&gt;When the first resolves, then JavaScript quickly moves on to the next promise. After waiting for five seconds, it moves on to the log. 3 seconds + 5 seconds = 8 seconds.&lt;/p&gt;
&lt;p&gt;Can we reduce that wait time by refactoring?&lt;/p&gt;
&lt;h2 id=&quot;call-then-await&quot; tabindex=&quot;-1&quot;&gt;Call then await&lt;/h2&gt;
&lt;p&gt;Instead of reaching straight for &lt;code&gt;await&lt;/code&gt;, let‚Äôs think this through: we want to &lt;strong&gt;start&lt;/strong&gt; both promises, &lt;strong&gt;then wait&lt;/strong&gt; for their resolution. So let‚Äôs change it up:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; promiseOnePromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;promiseOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; promiseTwoPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;promiseOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; promiseOnePromise&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; promiseTwoPromise&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;done&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How long will it take this code to resolve? &lt;strong&gt;5 seconds&lt;/strong&gt; (roughly).&lt;/p&gt;
&lt;p&gt;By calling the functions that return promises initially, we are ‚Äústarting the timer‚Äù for both. So the three-second and five-second promises are resolving in tandem.&lt;/p&gt;
&lt;p&gt;When we &lt;code&gt;await&lt;/code&gt; &lt;strong&gt;after calling the promises&lt;/strong&gt;, we‚Äôll only wait as long as the slowest promise: five seconds in this case.&lt;/p&gt;
&lt;p&gt;This is great, but there is one more solution that might be easier.&lt;/p&gt;
&lt;h2 id=&quot;promise.all&quot; tabindex=&quot;-1&quot;&gt;Promise.all&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Promise&lt;/code&gt; object has an &lt;code&gt;all&lt;/code&gt; method that accepts any number of promises and resolves when all have been fulfilled. We just need to pass it an iterable like an array:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;promiseOne&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;promiseTwo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;done&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This functions in a similar manner to the previous ‚Äúcall then await‚Äù example but is more succinct. In my tests, it was fractions of a millisecond slower, but your mileage may vary.&lt;/p&gt;
&lt;h2 id=&quot;live-example&quot; tabindex=&quot;-1&quot;&gt;Live example&lt;/h2&gt;
&lt;p&gt;You can view a &lt;a href=&quot;https://repl.it/@SeanMcP/await-multiple-promises&quot;&gt;live example of this code on Repl&lt;/a&gt;:&lt;/p&gt;
&lt;iframe height=&quot;500px&quot; width=&quot;100%&quot; src=&quot;https://repl.it/@SeanMcP/await-multiple-promises?lite=true&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; sandbox=&quot;allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There we go! Two solutions for how to await multiple promises in JavaScript. Hope that helped!&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Parse argument aliases in Deno</title>
            <link href="https://seanmcp.com/articles/parse-argument-aliases-in-deno/"/>
            <updated>2020-06-26T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/parse-argument-aliases-in-deno/</id>
            <content type="html">&lt;p&gt;You can parse command-line arguments in Deno with the &lt;a href=&quot;https://deno.land/std/flags&quot;&gt;standard &lt;code&gt;flags&lt;/code&gt; module&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; parse &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://deno.land/std/flags/mod.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Deno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;deno run https://deno.land/std/examples/flags.ts -a beep -b boop&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; _: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;, a: &lt;span class=&quot;token string&quot;&gt;&#39;beep&#39;&lt;/span&gt;, b: &lt;span class=&quot;token string&quot;&gt;&#39;boop&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;parse&lt;/code&gt; function has a second options argument where you can assign aliases. Before we do that, let‚Äôs use a more description example.&lt;/p&gt;
&lt;h2 id=&quot;example-scenario&quot; tabindex=&quot;-1&quot;&gt;Example scenario&lt;/h2&gt;
&lt;p&gt;Say you have a script, &lt;code&gt;log.ts&lt;/code&gt;, that takes a message to display in the terminal. We would use our script like this:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;deno run log.ts --message &lt;span class=&quot;token string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Hello world&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let‚Äôs alias the &lt;code&gt;--message&lt;/code&gt; flag to &lt;code&gt;-M&lt;/code&gt; for ease of use.&lt;/p&gt;
&lt;h2 id=&quot;alias-option&quot; tabindex=&quot;-1&quot;&gt;Alias option&lt;/h2&gt;
&lt;p&gt;When we call &lt;code&gt;parse&lt;/code&gt; in our script on &lt;code&gt;Deno.args&lt;/code&gt;, we want to provide an additional options object with a key &lt;code&gt;aliases&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That will be assigned to another object that will map flags to their aliases:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// log.ts&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; parse &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://deno.land/std/flags/mod.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; flagToAliasMap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;M&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; parsedArgs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Deno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;aliases&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; flagToAliasMap &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parsedArgs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can call our script with those aliases:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;deno run log.ts -M &lt;span class=&quot;token string&quot;&gt;&quot;That&#39;s better&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;That&#39;s better&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that, the &lt;code&gt;flags&lt;/code&gt; module does all of the hard lifting for you!&lt;/p&gt;
&lt;h2 id=&quot;wrap-up&quot; tabindex=&quot;-1&quot;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;Two things to note about aliases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;flags&lt;/code&gt; doesn‚Äôt care whether you use one or two hyphens for aliases, so &lt;code&gt;-M&lt;/code&gt; and &lt;code&gt;--M&lt;/code&gt; will both work.&lt;/li&gt;
&lt;li&gt;Aliases &lt;strong&gt;are&lt;/strong&gt; case sensitive, so you‚Äôll have to map &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt; separately.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Adding images to my articles</title>
            <link href="https://seanmcp.com/articles/adding-images-to-my-articles/"/>
            <updated>2020-06-30T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/adding-images-to-my-articles/</id>
            <content type="html">&lt;p&gt;Back in February, I &lt;a href=&quot;https://github.com/SeanMcP/seanmcp.com/commit/b33b30ea11a8fbcf4e4f1753df5ce325ee39917d&quot;&gt;set up post images to this blog&lt;/a&gt;. Very few of my articles had images, so you may not have noticed.&lt;/p&gt;
&lt;p&gt;In the original design, an image spanned the width of the window, replacing the blue gradient on most pages.&lt;/p&gt;
&lt;p&gt;This was problematic, because I needed to find large images for it to look decent on big screens. But I also needed to compress those huge images so that the file sizes weren‚Äôt massive.&lt;/p&gt;
&lt;p&gt;I don‚Äôt know how to do the file sizing and compression during a build step, so instead I avoided added images to any future articles.&lt;/p&gt;
&lt;p&gt;Fast forward a few months, and I wanted to take another crack at article images.&lt;/p&gt;
&lt;h2 id=&quot;updating-the-design&quot; tabindex=&quot;-1&quot;&gt;Updating the design&lt;/h2&gt;
&lt;p&gt;I didn‚Äôt realize it initially, but choosing a design with full-screen images set me down a path of no return. There isn‚Äôt a good way to find and serve images that large.&lt;/p&gt;
&lt;p&gt;So rather than searching for an impossible solution, I changed the design. By limitting the width of article images, I opened a world of possibilities.&lt;/p&gt;
&lt;p&gt;I now have access to more images, because the only need to be 800 pixels by 400 pixels. At that size, cropped and compressed images are super reasonable.&lt;/p&gt;
&lt;h2 id=&quot;how-to-find-images&quot; tabindex=&quot;-1&quot;&gt;How to find images&lt;/h2&gt;
&lt;p&gt;When I want to find an image for an article, I can search the usual places: Unsplash, Pixabay, or an Google search. Then I can copy the image URL, and head over to &lt;a href=&quot;http://ezgif.com/&quot;&gt;ezgif.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From there, I will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resize the image&lt;/li&gt;
&lt;li&gt;Crop it to 2:1&lt;/li&gt;
&lt;li&gt;Compress to &amp;lt; 30 kB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once that‚Äôs done, I can save the image to this repo‚Äôs &lt;code&gt;img/&lt;/code&gt; directory. The whole process takes about two minutes.&lt;/p&gt;
&lt;h2 id=&quot;room-for-improvement&quot; tabindex=&quot;-1&quot;&gt;Room for improvement&lt;/h2&gt;
&lt;p&gt;It would be great to automate the resize and compression steps with a build process, so I‚Äôll be on the lookout for solutions there.&lt;/p&gt;
&lt;p&gt;I would also like to give attribution for the images, where applicable. That seems best served through frontmatter, but I will have to look into that too.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I hope that helps you when deciding how to add images to your articles!&lt;/p&gt;
&lt;p&gt;Happy writing!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Nodemon for Deno</title>
            <link href="https://seanmcp.com/articles/nodemon-for-deno/"/>
            <updated>2020-07-01T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/nodemon-for-deno/</id>
            <content type="html">&lt;p&gt;&lt;em&gt;Update: As of Deno v1.4, there is a built in watch mode that you can enable with the &lt;code&gt;--watch&lt;/code&gt; flag. &lt;a href=&quot;https://deno.land/posts/v1.4#codedeno-run---watchcode&quot;&gt;Read more about that here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Nodemon, or as I read it in my head &lt;em&gt;Nod√©mon!&lt;/em&gt;, is a utility for restarting Node.js processes when the source changes. It‚Äôs is the first dev dependency I add when working in Node, because it is so handy!&lt;/p&gt;
&lt;p&gt;Deno, the secure runtime for JavaScript and TypeScript, doesn‚Äôt work with Nodemon. When I first started building with Deno, I was reminded just how annoying it is to stop and start your server whenever there is a change.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://deno.land/x/denon&quot;&gt;Enter &lt;strong&gt;denon&lt;/strong&gt;&lt;/a&gt;, the ‚Äúreplacement‚Äù for Nodemon in Deno land. As long as you‚Äôre using &lt;code&gt;deno@^1.0.1&lt;/code&gt;, you can get all the goodness of automattic restarting with denon.&lt;/p&gt;
&lt;h2 id=&quot;install&quot; tabindex=&quot;-1&quot;&gt;Install&lt;/h2&gt;
&lt;p&gt;You can install denon with Deno‚Äôs &lt;code&gt;install&lt;/code&gt; command:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;deno &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --allow-read --allow-run --allow-write --allow-net -f --unstable https://deno.land/x/denon@v2.2.0/denon.ts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That command installs denon version &lt;code&gt;2.2.0&lt;/code&gt;, so reference &lt;a href=&quot;https://deno.land/x/denon#install&quot;&gt;the documentation for the most up-to-date instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;simple-usage&quot; tabindex=&quot;-1&quot;&gt;Simple usage&lt;/h2&gt;
&lt;p&gt;Once you have denon installed, you can use it as a straight replacement for all &lt;code&gt;deno&lt;/code&gt; commands:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# With Deno&lt;/span&gt;&lt;br /&gt;deno run --allow-net https://deno.land/std/examples/echo_server.ts&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# With denon&lt;/span&gt;&lt;br /&gt;denon run --allow-net https://deno.land/std/examples/echo_server.ts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the same behavior as &lt;code&gt;node/nodemon&lt;/code&gt;. But running external code doesn‚Äôt really illustrate the value of denon.&lt;/p&gt;
&lt;p&gt;To see it in action, copy &lt;code&gt;echo_server.ts&lt;/code&gt; locally and then run with denon:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;denon run --allow-net echo_server.ts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you make any changes to the source, you will see denon automatically restart the server.&lt;/p&gt;
&lt;h2 id=&quot;configuration&quot; tabindex=&quot;-1&quot;&gt;Configuration&lt;/h2&gt;
&lt;p&gt;My favorite feature of denon is its configuration file: &lt;code&gt;denon.json&lt;/code&gt;. With it, you get some of the ‚Äúscripts‚Äù features of Node.js‚Äôs &lt;code&gt;package.json&lt;/code&gt; that are currently missing in Deno.&lt;/p&gt;
&lt;p&gt;To create a configuration file, you can call denon with the &lt;code&gt;--init&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;denon --init&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will create a &lt;code&gt;denon.json&lt;/code&gt; file where you can include scripts with commands, permissions, and environment variables.&lt;/p&gt;
&lt;p&gt;We can create a ‚Äústart‚Äù script for the &lt;code&gt;echo_server.ts&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;$schema&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://deno.land/x/denon/schema.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;cmd&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;deno run echo_server.ts&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;desc&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Start echo_server in watch mode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;allow&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;net&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token property&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token property&quot;&gt;&quot;PORT&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2525&quot;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our ‚Äústart‚Äù script has a command, description, permissions to allow, and an environment variable &lt;code&gt;PORT&lt;/code&gt; that we are passing to our server.&lt;/p&gt;
&lt;p&gt;To run the script, type:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;denon start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you‚Äôre off to the races! I love the ability to start a Deno process without typing all those permissions. :chefs-kiss:&lt;/p&gt;
&lt;h2 id=&quot;learn-more&quot; tabindex=&quot;-1&quot;&gt;Learn more&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://deno.land/x/denon&quot;&gt;denon documentation&lt;/a&gt; lists the full feature set and includes a bunch of helpful examples. Make sure to check that out when setting up denon on your next Deno project.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Intro to &quot;The Economics of Software Development&quot;</title>
            <link href="https://seanmcp.com/articles/intro-to-economics-of-software-development/"/>
            <updated>2020-07-09T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/intro-to-economics-of-software-development/</id>
            <content type="html">&lt;p&gt;Economics was one of my favorite subjects in high school and college. Back before I made the career switch to software engineers, I would imagine the sweet ‚Äúwhat ifs‚Äù of majoring in Econ instead of Education.&lt;/p&gt;
&lt;p&gt;I was (and am) fascinated by economics as the study of decision making. Whether you prefer to put that in terms of ‚Äúscarcity‚Äù and ‚Äúresources‚Äù is up to you. For me, it‚Äôs about analyzing ‚Äúwhy‚Äù we do the things that we do.&lt;/p&gt;
&lt;p&gt;You can take that analytical spotlight and shine it on monetary policy or production, which is probably what most people think of when they hear ‚Äúeconomics.‚Äù&lt;/p&gt;
&lt;p&gt;But increasingly economists have been looking at other aspects of life, giving birth to the field of behavioral economics. &lt;a href=&quot;https://freakonomics.com/&quot;&gt;&lt;em&gt;Freakonomics&lt;/em&gt;, the book and radio program,&lt;/a&gt; is the most popular example of this field of study, but you may have heard of other examples from &lt;a href=&quot;https://en.wikipedia.org/wiki/Richard_Thaler&quot;&gt;Richard Thaler&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Daniel_Kahneman&quot;&gt;Daniel Kahneman&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When NPR‚Äôs Planet Money announced a ‚ÄúSummer School‚Äù series focusing on key economics concepts, I was intrigued. Here was the perfect invitation to do a little bit of analytical thinking of my own.&lt;/p&gt;
&lt;p&gt;With the release of each episode of ‚ÄúPlanet Money Summer School,‚Äù I‚Äôm going to respond by taking that lens and the concepts and focus them on the practice of software development.&lt;/p&gt;
&lt;p&gt;I‚Äôm not interested in the &lt;em&gt;business of software development&lt;/em&gt;, but rather the decisions that I and other developers make in building websites and applications. In other words: &lt;strong&gt;why we do the things that we do (and what we can do about it)&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;I hope you‚Äôll find this series interesting, even if it‚Äôs just to crack your knuckles and &lt;a href=&quot;https://seanmcp.com/articles/intro-to-economics-of-software-development/#comment-link&quot;&gt;tell me how I have it all wrong&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy learning!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Before You Debug</title>
            <link href="https://seanmcp.com/articles/before-you-debug/"/>
            <updated>2020-07-10T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/before-you-debug/</id>
            <content type="html">&lt;p&gt;Debugging, ‚Äúthe process of finding and resolving defects within a computer system‚Äù&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/before-you-debug/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;, is a critical skill for software development. It‚Äôs how we figure out what went wrong and how to fix it.&lt;/p&gt;
&lt;p&gt;This can be as informal as throwing &lt;code&gt;* { outline: 1px solid red }&lt;/code&gt; on all your elements or sophisticated as using an IDE‚Äôs debugger.&lt;/p&gt;
&lt;p&gt;But whatever your method, there are certain steps that you can follow to help yourself debug more logically and efficiently.&lt;/p&gt;
&lt;p&gt;This garden aims to detail everything you should do &lt;em&gt;before you actually start debugging&lt;/em&gt;. Think of this as the prep work before you start cooking.&lt;/p&gt;
&lt;h2 id=&quot;pre-steps&quot; tabindex=&quot;-1&quot;&gt;Pre-steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Relax&lt;/strong&gt;: Find a bug can be frustrating, and those emotions can impede the debugging process. Take a deep breath and dive in.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Describe what happened&lt;/strong&gt;: Did the process exit? Did the page fail to render? Is there a message in the console? Does the UI not respond correctly? Understanding what happened is the first step to solving a problem. The ‚Äúhow‚Äù comes later.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Read the error message&lt;/strong&gt;: Most errors will provide you useful information in the message. Some APIs provide a detailed explanation of what went wrong. So take the time and read it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Follow the stack trace&lt;/strong&gt;: If the error includes a stack, walk through each line. Where did the error originate? What it internal or external code?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pinpoint the error&lt;/strong&gt;: Try to isolate the exact point where something went wrong. In the stack trace, this will usually have a file name and a line number, &lt;em&gt;e.g.&lt;/em&gt; &lt;code&gt;app.js:25&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inspect the line&lt;/strong&gt;: Read the entire line where the error occurred. Is there anything that immediately jumps out to you? Sometimes the bug could be as simple as a typo or an unexpected type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Review the block&lt;/strong&gt;: Follow the block from start to finish, making note of the line in question. Try to get a good sense of how that code is working.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scan any higher scopes&lt;/strong&gt;: Make sure you understand at a high-level what the code is doing and what variables are needed/expected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make a hypothesis&lt;/strong&gt;: You are a scientist, after all. Make an educated guess about what went wrong and what will fix it. Make sure to review your hypothesis while you‚Äôre debugging.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;note&quot; tabindex=&quot;-1&quot;&gt;Note&lt;/h2&gt;
&lt;p&gt;This is a living document and will change as my approach to debugging grows over time. If you have any suggestions, &lt;a href=&quot;https://seanmcp.com/articles/before-you-debug/#comment-link&quot;&gt;please let me know&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;additional-reading&quot; tabindex=&quot;-1&quot;&gt;Additional reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jvns.ca/blog/debugging-attitude-matters/&quot;&gt;&lt;em&gt;When debugging, your attitude matters&lt;/em&gt;&lt;/a&gt; by Julia Evans&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Debugging&quot;&gt;https://en.wikipedia.org/wiki/Debugging&lt;/a&gt; &lt;a href=&quot;https://seanmcp.com/articles/before-you-debug/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Manage analysis paralysis while programming</title>
            <link href="https://seanmcp.com/articles/manage-analysis-paralysis-while-programming/"/>
            <updated>2020-07-14T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/manage-analysis-paralysis-while-programming/</id>
            <content type="html">&lt;h2 id=&quot;references&quot; tabindex=&quot;-1&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Raypole, Crystal. (2020). &lt;em&gt;How to Beat ‚ÄòAnalysis Paralysis‚Äô and Make All the Decisions&lt;/em&gt;. &lt;a href=&quot;https://www.healthline.com/health/mental-health/analysis-paralysis&quot;&gt;https://www.healthline.com/health/mental-health/analysis-paralysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lengsdorf, Jason. (2020, July 17). Twitter. &lt;a href=&quot;https://twitter.com/jlengstorf/status/1284111359303659521&quot;&gt;https://twitter.com/jlengstorf/status/1284111359303659521&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adolos. (2020). &lt;em&gt;Feeling unproductive? Maybe you should stop overthinking&lt;/em&gt;. &lt;a href=&quot;https://adolos.substack.com/p/feeling-unproductive-maybe-you-should&quot;&gt;https://adolos.substack.com/p/feeling-unproductive-maybe-you-should&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;‚Äúif you‚Äôre a creator then you should be engaging in creative thinking on a regular basis. The more you do it, the better your brain becomes at thinking up ideas. This makes it easier for you to work on your projects because you won‚Äôt get stuck as often‚Äù&lt;/li&gt;
&lt;li&gt;‚ÄúI‚Äôve found that the best way to get into the habit of creative thinking is to engage in it daily‚Äù&lt;/li&gt;
&lt;li&gt;‚Äúengaging in multiple forms of creative thinking will also help you get through creative blocks‚Äù&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Groth, Aimee. (2013, February 12). &lt;em&gt;SHERYL SANDBERG: Women Need To Get More Comfortable With Power&lt;/em&gt;. Business Insider. &lt;a href=&quot;https://www.businessinsider.com/sheryl-sandberg-lean-in-2013-2&quot;&gt;https://www.businessinsider.com/sheryl-sandberg-lean-in-2013-2&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;‚Äúdone is better than perfect‚Äù&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;to-reference&quot; tabindex=&quot;-1&quot;&gt;To reference&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Grant, Heidi. (2014, February 14). &lt;em&gt;How to Make Yourself Work When You Just Don‚Äôt Want To&lt;/em&gt;. &lt;a href=&quot;https://hbr.org/2014/02/how-to-make-yourself-work-when-you-just-dont-want-to&quot;&gt;https://hbr.org/2014/02/how-to-make-yourself-work-when-you-just-dont-want-to&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
        
        <entry>
            <title>The Economics of Software Development, Part I</title>
            <link href="https://seanmcp.com/articles/the-economics-of-software-development-part-i/"/>
            <updated>2020-07-14T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/the-economics-of-software-development-part-i/</id>
            <content type="html">&lt;p&gt;&lt;em&gt;This is the first post in a series on how economics helps explain the decisions we make when developing software. It is a response to ‚ÄúSummer School‚Äù, a series from &lt;a href=&quot;https://www.npr.org/sections/money/&quot;&gt;NPR‚Äôs Planet Money&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Let‚Äôs look at two concepts from &lt;a href=&quot;https://www.npr.org/2020/07/07/888690075/summer-school-1-choices-dating&quot;&gt;Planet Money‚Äôs ‚ÄúSummer School 1: Choices &amp;amp; Dating‚Äù&lt;/a&gt;: &lt;strong&gt;opportunity cost&lt;/strong&gt;, and &lt;strong&gt;sunk-cost fallacy&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;opportunity-cost&quot; tabindex=&quot;-1&quot;&gt;Opportunity cost&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This compilation process takes a long time. I‚Äôm going to get a snack while I wait.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Opportunity cost is the cost of doing activity A instead of activity B. For example, watching another YouTube video before bed comes at the cost of finishing that novel you started last year&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/the-economics-of-software-development-part-i/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;I am reminded of opportunity cost whenever I‚Äôm waiting for webpack to rebuild a client and server in development. Every moment I spend waiting is a moment that I‚Äôm doing any development work (and a moment that I‚Äôm likely to switch to another task).&lt;/p&gt;
&lt;p&gt;We should be attuned to these costs and advocate for the time to fix the underlying problem. If we can reduce these opportunity costs, then we can increase our productivity and even improve the developer experience.&lt;/p&gt;
&lt;h2 id=&quot;sunk-cost-fallacy&quot; tabindex=&quot;-1&quot;&gt;Sunk-cost fallacy&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;We‚Äôve already invested heavily in our Java architecture. Let‚Äôs find a way to make it work for this machine-learning project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A sunk cost is one that has already been paid and cannot be recovered. The fallacy comes from making altering future decisions based on those costs.&lt;/p&gt;
&lt;p&gt;In development, it‚Äôs common to take one of two paths: a) finding your hammer and using it for every problem, or b) chasing every new trend under the sun. Both can illustrate the sunk-cost fallacy, but the former is more straightforward.&lt;/p&gt;
&lt;p&gt;Time spent learning a language, money spent on a subscription service, and effort spent working on a problem are all sunk costs. Once they‚Äôre gone, they‚Äôre gone. The experience can help inform future decisions, but it shouldn‚Äôt limit them with artificial constraints.&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;This isn‚Äôt autobiographical at all. &lt;a href=&quot;https://seanmcp.com/articles/the-economics-of-software-development-part-i/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Access the home directory in Deno</title>
            <link href="https://seanmcp.com/articles/access-the-home-directory-in-deno/"/>
            <updated>2020-07-17T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/access-the-home-directory-in-deno/</id>
            <content type="html">&lt;p&gt;If you want to access the home directory from you Deno program, you can use the &lt;code&gt;Deno.env&lt;/code&gt;‚Äôs &lt;code&gt;get&lt;/code&gt; method with &lt;code&gt;&amp;quot;HOME&amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Deno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HOME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In unix environments, returns a string along the lines of &lt;code&gt;&amp;quot;/home/USER&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So if you want to write a script that accesses a configuration file like &lt;code&gt;.bashrc&lt;/code&gt;, you could read the file with:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// read-bashrc.ts&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bashConfig &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Deno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readTextFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    Deno&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HOME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/.bashrc&quot;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we are accessing &lt;code&gt;Deno.env&lt;/code&gt;, we need to run the program with the &lt;code&gt;env&lt;/code&gt; permission:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;deno run --allow-env read-bashrc.ts&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a Repl where you can &lt;a href=&quot;https://repl.it/@SeanMcP/deno-access-home-directory&quot;&gt;play around with accessing the home directory in Deno&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>The Economics of Software Development, Part II</title>
            <link href="https://seanmcp.com/articles/the-economics-of-software-development-part-ii/"/>
            <updated>2020-07-22T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/the-economics-of-software-development-part-ii/</id>
            <content type="html">&lt;p&gt;&lt;em&gt;This is the second post in a series on how economics helps explain the decisions we make when developing software. It is a response to ‚ÄúSummer School‚Äù, a series from &lt;a href=&quot;https://www.npr.org/sections/money/&quot;&gt;NPR‚Äôs Planet Money&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This week‚Äôs &lt;a href=&quot;https://www.npr.org/2020/07/15/891488686/summer-school-2-markets-pickles&quot;&gt;episode from Planet Money‚Äôs ‚ÄúSummer School‚Äù&lt;/a&gt; was about &lt;strong&gt;markets&lt;/strong&gt;:  where supply and demand come together. It‚Äôs where those decisions that Economists love so much get made.&lt;/p&gt;
&lt;p&gt;Sometimes a marketplace is like a bazaar (which I tend to picture), but other times it looks more like &lt;a href=&quot;https://www.npmjs.com/search?q=capitalize&quot;&gt;the results page when searching for an NPM package&lt;/a&gt;. With that in mind, it‚Äôs easy to see markets everywhere.&lt;/p&gt;
&lt;p&gt;Markets can be freeing, if you‚Äôre the one making the decisions. But if you aren‚Äôt in the driver‚Äôs chair, you might not even know they exist.&lt;/p&gt;
&lt;p&gt;In general, we want as many decisions as possible to be made by the people who will be most affected by the decision. I‚Äôll add the caveat: ‚Äúprovided they affected have the information necessary to make that decision.‚Äù&lt;/p&gt;
&lt;p&gt;This is the ideal, but it isn‚Äôt the only option.&lt;/p&gt;
&lt;h2 id=&quot;suffering-in-a-%E2%80%9Ccentral-market%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;Suffering in a ‚Äúcentral market‚Äù&lt;/h2&gt;
&lt;p&gt;An alternative to individuals deciding is central planning. This is when a higher authority makes the decisions that affect everyone else.&lt;/p&gt;
&lt;p&gt;At tech companies, you can see this in service contracts. In some organizations, the decision of what SaaS to use comes from the top, and the repercussions trickle their way down.&lt;/p&gt;
&lt;p&gt;I worked at a large company that had a contract with Microsoft for all of their office software services. As a result, everyone at the company had to use Skype and an ancient program called Lync for all of our messaging needs&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/the-economics-of-software-development-part-ii/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;. Both had significant shortcomings, and neither served the needs of the tech team well.&lt;/p&gt;
&lt;p&gt;Instead of letting the market decide which messaging app to use, we were forced to struggle with the inefficiencies of central planning.&lt;/p&gt;
&lt;p&gt;Rather than mandating a solution from the top, organizations should work hard to give teams and individuals the freedom to gather information and agency to make those decisions for themselves.&lt;/p&gt;
&lt;h2 id=&quot;encouraging-markets&quot; tabindex=&quot;-1&quot;&gt;Encouraging markets&lt;/h2&gt;
&lt;p&gt;As developers, we want to structure as much of our infrastructure and processes to encourage a marketplace of ideas.&lt;/p&gt;
&lt;p&gt;If you have a micro-service architecture, teams are free to choose whatever language and framework will work best for them. By using CSS for your design system, each project can pick the JS framework fits their needs.&lt;/p&gt;
&lt;p&gt;Once you have an open marketplace, it‚Äôs now on the individuals to make rational decisions. Now if only we would actually do that&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/the-economics-of-software-development-part-ii/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;The company was rolling out Microsoft Teams when I left, which was much better. &lt;a href=&quot;https://seanmcp.com/articles/the-economics-of-software-development-part-ii/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Ariely, Dan. (2009). &lt;em&gt;The End of Rational Economics&lt;/em&gt;. Harvard Business Review. &lt;a href=&quot;https://hbr.org/2009/07/the-end-of-rational-economics&quot;&gt;https://hbr.org/2009/07/the-end-of-rational-economics&lt;/a&gt; &lt;a href=&quot;https://seanmcp.com/articles/the-economics-of-software-development-part-ii/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Updated¬†TypeScript mega-course on Egghead.io</title>
            <link href="https://seanmcp.com/articles/updated-typescript-mega-course-on-egghead/"/>
            <updated>2020-07-27T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/updated-typescript-mega-course-on-egghead/</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;https://seanmcp.com/articles/updated-typescript-mega-course-on-egghead/typescript-mega-course-on-egghead&quot;&gt;Last month, I embarked on a journey to learn TypeScript better&lt;/a&gt;. I hand-crafted a TypeScript&amp;quot;mega-course&amp;quot; on &lt;a href=&quot;http://egghead.io/&quot;&gt;Egghead.io&lt;/a&gt; by cobbling multiple courses into one.&lt;/p&gt;
&lt;p&gt;My goal was to complete the course in three weeks. Now a month and a half later, I have completed the course and am ready to reflect on my experience.&lt;/p&gt;
&lt;p&gt;Overall, it was a beneficial experience. I learned a lot more about types and how to write meaningful generics that will help make my code more reusable.&lt;/p&gt;
&lt;p&gt;I also gained a greater appreciation for TypeScript as a language. There were some examples where I needed to stop the video and try to read what was happened. I know TS is technically a super-set of JavaScript, but it is 100% a proficiency of its own.&lt;/p&gt;
&lt;h2 id=&quot;updated-mega-course&quot; tabindex=&quot;-1&quot;&gt;Updated Mega-course&lt;/h2&gt;
&lt;p&gt;After completing the course, I want to update and annotate the original syllabus. Here is the updated course playlist:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Optional: &lt;a href=&quot;https://egghead.io/courses/up-and-running-with-typescript&quot;&gt;&lt;em&gt;Up and Running with TypeScript&lt;/em&gt;&lt;/a&gt; by John Lindquist (22 min)
&lt;ul&gt;
&lt;li&gt;This was helpful, but very basic. Consider skipping this if you already know how to set up a TypeScript project&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/use-types-effectively-in-typescript&quot;&gt;&lt;em&gt;Use Types Effectively in TypeScript&lt;/em&gt;&lt;/a&gt; by Ari Picker (29 min)
&lt;ul&gt;
&lt;li&gt;This was a great introduction into TypeScript on its own. I learned a lot about generics, which are an important feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/practical-advanced-typescript&quot;&gt;&lt;em&gt;Practical Advanced TypeScript&lt;/em&gt;&lt;/a&gt; by Rares Matei (62 min)
&lt;ul&gt;
&lt;li&gt;I took more notes on this course than any of the others. This was definitely the material I needed to introduce me to more advanced TypeScript.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/advanced-static-types-in-typescript&quot;&gt;&lt;em&gt;Advanced Static Types in TypeScript&lt;/em&gt;&lt;/a&gt; by Marius Schulz (67 min)
&lt;ul&gt;
&lt;li&gt;There was some overlap between this course and the previous, but they both did a good job of explaining core type concepts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The updated runtime is 2 hours and 38 minutes to 3 hours, depending on whether you include the optional introduction.&lt;/p&gt;
&lt;p&gt;It also drops both of Basarat Ali Syed‚Äôs courses, &lt;em&gt;Async/Await using TypeScript&lt;/em&gt; and &lt;em&gt;Use Typescript to develop React Applications&lt;/em&gt;. Both were fine but ultimately weren‚Äôt substantial enough to be included in the mega-course.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I hope that was helpful! Let me know if you take this TypeScript ‚Äúmega-course‚Äù on &lt;a href=&quot;http://egghead.io/&quot;&gt;Egghead.io&lt;/a&gt; and what you think about it.&lt;/p&gt;
&lt;p&gt;Happy learning!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Fix &#39;EMFILE: too many open files&#39; error in Jest</title>
            <link href="https://seanmcp.com/articles/fix-emfile-too-many-open-files-error-in-jest/"/>
            <updated>2020-07-29T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/fix-emfile-too-many-open-files-error-in-jest/</id>
            <content type="html">&lt;p&gt;When I tried to run &lt;code&gt;jest --watch&lt;/code&gt; in a codebase, I received the following error:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;Error: EMFILE: too many &lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt; files, &lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;br /&gt;    at FSEvent.FSWatcher._handle.onchange &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fs.js:1372:28&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;Emitted &lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt; event at:&lt;br /&gt;    at NodeWatcher.checkedEmitError &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/Users/seanmcp/dev/REPO/node_modules/sane/src/node_watcher.js:143:12&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    at FSWatcher.emit &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;events.js:182:13&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    at FSEvent.FSWatcher._handle.onchange &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fs.js:1378:12&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A Google search of the error message produced three (!) results. &lt;a href=&quot;https://buildmedia.readthedocs.org/media/pdf/delivery-console/stable/delivery-console.pdf&quot;&gt;The second was a PDF from Mozilla&lt;/a&gt; that recommended installing &lt;a href=&quot;https://facebook.github.io/watchman/&quot;&gt;&lt;code&gt;watchman&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;why-watchman%3F&quot; tabindex=&quot;-1&quot;&gt;Why &lt;code&gt;watchman&lt;/code&gt;?&lt;/h2&gt;
&lt;p&gt;Watchman is a file-watching service from Facebook that will respond to changes in your files. Jest (also by Facebook) &lt;a href=&quot;https://jestjs.io/docs/en/cli#--watchman&quot;&gt;default to using watchman in &lt;code&gt;--watch&lt;/code&gt; mode&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot;&gt;Watchman is available on all major platforms&lt;/a&gt;. On a Mac or Linux with Homebrew installed, you can run:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; watchman&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that installed, Jest‚Äôs &lt;code&gt;--watch&lt;/code&gt; flag works as expected.&lt;/p&gt;
&lt;p&gt;I hope that works for you (and saves you some valuable time)!&lt;/p&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>The Economics of Software Development, Part III</title>
            <link href="https://seanmcp.com/articles/the-economics-of-software-development-part-iii/"/>
            <updated>2020-07-29T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/the-economics-of-software-development-part-iii/</id>
            <content type="html">&lt;p&gt;&lt;em&gt;This is the third post in a series on how economics helps explain the decisions we make when developing software. It is a response to ‚ÄúSummer School‚Äù, a series from &lt;a href=&quot;https://www.npr.org/sections/money/&quot;&gt;NPR‚Äôs Planet Money&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This week‚Äôs &lt;a href=&quot;https://www.npr.org/2020/07/22/894368822/summer-school-3-profit-cocaine&quot;&gt;episode from Planet Money‚Äôs ‚ÄúSummer School‚Äù&lt;/a&gt; was about &lt;strong&gt;elastic and inelastic demand&lt;/strong&gt;. The elasticity of demand refers to how responsive consumers are to changes in price. If a small change in price has a big impact on demand, then it is considered elastic. If the consumer will buy the good no matter the price, then it is inelastic.&lt;/p&gt;
&lt;p&gt;The best example of this I can think of is sitting on the desk in front of me.&lt;/p&gt;
&lt;h2 id=&quot;case-study%3A-the-macbook-pro&quot; tabindex=&quot;-1&quot;&gt;Case study: the MacBook Pro&lt;/h2&gt;
&lt;p&gt;Apple has done a fantastic job of creating inelastic demand for their laptops. While it is by no means a monopoly, the popularity of the MacBook Pro in developer circles cannot be overstated. If you are developer, some people argue, you need to use a MacBook.&lt;/p&gt;
&lt;p&gt;But Apple computers are very expensive, and they seem to grow more so every release. The &lt;a href=&quot;https://www.businessinsider.com/apple-50000-mac-pro-price-not-for-you-2019-12&quot;&gt;latest iMac is priced between &lt;strong&gt;$6,000 and $50,000&lt;/strong&gt;&lt;/a&gt;, depending on the features. Most people would never pay that much, but the fact that Apple can even consider charging that much illustrates the inelasticity of the demand.&lt;/p&gt;
&lt;p&gt;Recent releases of the MacBook, however, have received mixed reviews. Apple‚Äôs transition to the butterfly keyboard was largely unpopular, and &lt;a href=&quot;https://www.wsj.com/graphics/apple-still-hasnt-fixed-its-macbook-keyboard-problem/&quot;&gt;seems to have resulted in hardware issues&lt;/a&gt;. I am typing this on a MacBook Pro that regularly has issues with overheating, visual bugs, and display inconsistencies.&lt;/p&gt;
&lt;p&gt;Despite this, many developers (myself included) are still convinced that they need to have a MacBook to do their work. So the demand for the product remains fixed, regardless of rising prices or falling quality.&lt;/p&gt;
&lt;h2 id=&quot;how-to-encourage-elasticity&quot; tabindex=&quot;-1&quot;&gt;How to encourage elasticity&lt;/h2&gt;
&lt;p&gt;Whenever possible, we as consumers need to push back against inelastic demand. As developers, we can structure our tools and processes in a way that one could easily be exchanged for another.&lt;/p&gt;
&lt;p&gt;If you are using a cloud provider, write a wrapper interface than can be switched from AWS to Google Cloud Platform or Microsoft Azure without touching any business logic. Architect your products so that they run on multiple platforms, environments, and browsers.&lt;/p&gt;
&lt;p&gt;In JavaScript land, that can be as simple as using double quotes in Node.js scripts so that they work on Windows.&lt;/p&gt;
&lt;p&gt;By embracing the inevitability of future change and planning for it, we will be in a better position to stay ahead of the competition.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Don&#39;t remove default focus styles, enhance them</title>
            <link href="https://seanmcp.com/articles/dont-remove-default-focus-styles-enhance-them/"/>
            <updated>2020-07-30T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/dont-remove-default-focus-styles-enhance-them/</id>
            <content type="html">&lt;style&gt;
.example {
    margin: 2rem 0;
}

.example &gt; * {
    margin: 0 !important;
}

.live {
    background-color: hsl(0, 0%, 95%);
    box-shadow: inset 0 0 0.5rem hsla(0, 0%, 0%, 8%);
    display: grid;
    place-items: center;
    padding: 1rem;
}

@media screen and (min-width: 640px) {
    .example {
        display: grid;
        grid-template-columns: 1fr 1fr;
    }
}

.article input[class] {
    border: 1px solid hsla(0, 0%, 0%, 17.5%);
    border-radius: 0.5rem;
    font-family: inherit;
    font-size: inherit;
    padding: 0.5rem;
}
&lt;/style&gt;
&lt;p&gt;I can‚Äôt tell you how many times over the past fifteen years that I have searched ‚Äúhow to remove default focus styles‚Äù. Something about that fuzzy blue glow around form elements has always looked terrible to me. So I, and countless other developers like me, have stumbled upon the code to remove focus styles:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;*:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt;        I&#39;m sharing this for an illustration;&lt;br /&gt;        please don&#39;t use this code.&lt;br /&gt;    */&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But by removing those styles, you are removing a key feature of user agent styles: the focus outline! Let‚Äôs look at why they are so important and what you can do to make them look less ugly.&lt;/p&gt;
&lt;h2 id=&quot;why-focus-styles%3F&quot; tabindex=&quot;-1&quot;&gt;Why focus styles?&lt;/h2&gt;
&lt;p&gt;That glowing blue outline lets you know when the browser is focused on a particular element. This is as necessary as having a &lt;code&gt;:hover&lt;/code&gt; state for links; you shouldn‚Äôt deploy without it.&lt;/p&gt;
&lt;p&gt;Focus styles are also important for accessibility. Visual users who navigate by the keyboard need those distinct focus styles to indicate where they are on the page.&lt;/p&gt;
&lt;p&gt;Imagine trying to navigate a webpage with an invisible mouse; it would be terrible. When you remove focus styles, you are doing the same thing to keyboard users.&lt;/p&gt;
&lt;p&gt;Focus styles are a critical part of your website or applications design.&lt;/p&gt;
&lt;h2 id=&quot;better-focus-styles&quot; tabindex=&quot;-1&quot;&gt;Better focus styles&lt;/h2&gt;
&lt;p&gt;Just because these styles are necessary, doesn‚Äôt mean that they have to be a chore. By using the same kind of CSS properties that you style a site, you can give your focus styles the love they deserve.&lt;/p&gt;
&lt;p&gt;All of the examples below are interactive, so make sure to click inside the input box to see the focus styles illustrated.&lt;/p&gt;
&lt;p&gt;For comparison, this is what your browser‚Äôs default focus styles look like:&lt;/p&gt;
&lt;div class=&quot;live&quot;&gt;
&lt;input aria-label=&quot;dummy input to illustrate focus styles&quot; placeholder=&quot;Focus here...&quot; /&gt;
&lt;/div&gt;
&lt;h3 id=&quot;outline&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;outline&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Instead of removing the outline with CSS, you can customize it. &lt;code&gt;outline&lt;/code&gt; has accompanying &lt;code&gt;-weight&lt;/code&gt;, &lt;code&gt;-style&lt;/code&gt;, and &lt;code&gt;-color&lt;/code&gt; properties that give you the same flexibility as &lt;code&gt;border&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The one hangup is that it looks to the bounding box and ignores things like border radius:&lt;/p&gt;
&lt;div class=&quot;example&quot;&gt;
&lt;style&gt;
.example .outline:focus {
    outline: 2px solid red;
}
&lt;/style&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;input:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2px solid red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;live&quot;&gt;
&lt;input aria-label=&quot;dummy input to illustrate focus styles&quot; class=&quot;outline&quot; placeholder=&quot;Focus here...&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That doesn‚Äôt look great for rounded buttons, so you can use the &lt;code&gt;outline-offset&lt;/code&gt; style to give your outline some more character:&lt;/p&gt;
&lt;div class=&quot;example&quot;&gt;
&lt;style&gt;
.example .outline--character:focus {
    outline: 4px dotted red;
    outline-offset: 4px;
}
&lt;/style&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;input:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4px dotted red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;outline-offset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;live&quot;&gt;
&lt;input aria-label=&quot;dummy input to illustrate focus styles&quot; class=&quot;outline--character&quot; placeholder=&quot;Focus here...&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://niche.com/&quot;&gt;Niche.com&lt;/a&gt; does this for their button focus styles, and I think it looks great. I matches the brand while clearly signifying that the button is focused.&lt;/p&gt;
&lt;h3 id=&quot;box-shadow&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;For a more flexible ‚Äúoutline‚Äù, &lt;code&gt;box-shadow&lt;/code&gt; is your probably your best option. You can dial down the ‚Äúblur radius‚Äù and get an outline that honors the border radius of a button:&lt;/p&gt;
&lt;div class=&quot;example&quot;&gt;
&lt;style&gt;
.box-shadow:focus {
    box-shadow: 0 0 0 2px red;
    outline: 4px solid transparent;
}
&lt;/style&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;input:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 0 2px red&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4px solid transparent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;live&quot;&gt;
&lt;input aria-label=&quot;dummy input to illustrate focus styles&quot; class=&quot;box-shadow&quot; placeholder=&quot;Focus here...&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice how I‚Äôm not removing the &lt;code&gt;outline&lt;/code&gt; styles entirely. Some operating systems have a ‚Äúhigh-contrast mode‚Äù that will alter the color of the outline, so leaving it as transparent will work for users with those settings.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Tab focus not working in Safari?</title>
            <link href="https://seanmcp.com/articles/tab-focus-not-working-in-safari/"/>
            <updated>2020-08-04T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/tab-focus-not-working-in-safari/</id>
            <content type="html">&lt;p&gt;While doing some cross-browser testing in Safari, I noted that &lt;kbd&gt;tab&lt;/kbd&gt; was not working as expected. I was looking at a focus-managed component, so my first thought was that I had done something in my JavaScript that did not work in Safari.&lt;/p&gt;
&lt;p&gt;After trying to debug the issue for a few minutes, I finally noticed that &lt;strong&gt;&lt;kbd&gt;tab&lt;/kbd&gt; wasn‚Äôt working anywhere&lt;/strong&gt;, not just my component. This was both a relief (it wasn‚Äôt me!) and a mystery. How could tab not work?&lt;/p&gt;
&lt;p&gt;A quick Google search for ‚ÄúSafari tab order‚Äù lead me to this StackOverflow question and answer: &lt;a href=&quot;https://stackoverflow.com/questions/1848390/safari-ignoring-tabindex&quot;&gt;&lt;em&gt;Safari ignoring tabindex&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As it turns out, Safari does not enable tab highlighting by default. To turn it on:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to ‚ÄúPreferences‚Äù&lt;/li&gt;
&lt;li&gt;Select the ‚ÄúAdvanced‚Äù tab&lt;/li&gt;
&lt;li&gt;Check ‚ÄúPress Tab to highlight each item on a webpage‚Äù&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With that setting enabled, &lt;kbd&gt;tab&lt;/kbd&gt; worked as I expected. &lt;a href=&quot;https://stackoverflow.com/a/1914496/8486161&quot;&gt;Thanks &lt;code&gt;graphicdivine&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;While you‚Äôre fiddling with settings, the A11y Project has a guide for &lt;a href=&quot;https://www.a11yproject.com/posts/2017-12-29-macos-browser-keyboard-navigation/&quot;&gt;enabling browser keyboard navigation on macOS&lt;/a&gt; that is worth checking out.&lt;/p&gt;
&lt;p&gt;Setting you computer up for accessibility testing makes it that much easier to ensure that you‚Äôre building a product that will work for everyone.&lt;/p&gt;
&lt;p&gt;Happy tabbing!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Remove an item at a given index in JavaScript</title>
            <link href="https://seanmcp.com/articles/remove-an-item-at-a-given-index-in-javascript/"/>
            <updated>2020-08-05T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/remove-an-item-at-a-given-index-in-javascript/</id>
            <content type="html">&lt;p&gt;Removing an item from an array at a given index is a pretty common task in programming. So it is a little disappointing that the Array prototype in JavaScript doesn‚Äôt have a method for that exact task.&lt;/p&gt;
&lt;p&gt;If you search for an answer, you‚Äôll find solutions that use &lt;code&gt;Array#slice&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;removeAtWithSlice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And answers with &lt;code&gt;Array#splice&lt;/code&gt; (which mutates the original array):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;removeAtWithSplice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; copy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  copy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; copy&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both of these require that you remember the difference between the two methods, their behavior, and the arguments they require.&lt;/p&gt;
&lt;p&gt;Personally, neither of these solutions are memorable, so I often find myself searching ‚Äúhow to remove an item at a given index JS‚Äù.&lt;/p&gt;
&lt;h2 id=&quot;filtering&quot; tabindex=&quot;-1&quot;&gt;Filtering&lt;/h2&gt;
&lt;p&gt;Instead of using &lt;code&gt;slice&lt;/code&gt;/&lt;code&gt;splice&lt;/code&gt;, I came upon a new method that is my favorite yet: &lt;code&gt;Array#filter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; method will iterate over your array and return a new one with values that pass a certain criterion. You have probably used &lt;code&gt;Array#filter&lt;/code&gt; for a todo-like example before:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; done &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; todos&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;todo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; todo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isComplete &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like other array methods, you also have access to the current index as a parameter. So to use &lt;code&gt;Array#filter&lt;/code&gt; to remove an item from an array, check if the indices match:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;removeAtWithFilter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I‚Äôm using the &lt;code&gt;_&lt;/code&gt; to indicate a parameter that I don‚Äôt intend to reference and a non-description &lt;code&gt;i&lt;/code&gt; variable because &lt;code&gt;index&lt;/code&gt; is already in scope.&lt;/p&gt;
&lt;p&gt;As I mentioned above, this is now my preferred method of removing an item from an array. I am more familiar with &lt;code&gt;Array#filter&lt;/code&gt; and the idea of ‚Äúfiltering out‚Äù in the unwanted index makes sense. The other two methods are harder for me to conceptualize.&lt;/p&gt;
&lt;p&gt;There are two objective benefits to this method as well. First, it doesn‚Äôt mutate the array (unlike &lt;code&gt;Array#splice&lt;/code&gt;), which allows for functional programming without an additional step. And second, it only iterates the length of the array once (vs a potential two iterations for &lt;code&gt;Array#slice&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For all those reasons, I recommend you use &lt;code&gt;Array#filter&lt;/code&gt; for removing an item from an array at a given index in JavaScript. Let me know if you have an even better method; I‚Äôd love to hear it!&lt;/p&gt;
&lt;p&gt;Happy filtering!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Why you shouldn&#39;t mutate parameters</title>
            <link href="https://seanmcp.com/articles/why-you-shouldnt-mutate-parameters/"/>
            <updated>2020-08-05T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/why-you-shouldnt-mutate-parameters/</id>
            <content type="html">&lt;!-- https://repl.it/@SeanMcP/why-you-shouldnt-mutate-parameters --&gt;
&lt;p&gt;When you pass an argument to a function, you can then access it as a parameter within the function.&lt;/p&gt;
&lt;h2 id=&quot;value-arguments&quot; tabindex=&quot;-1&quot;&gt;Value arguments&lt;/h2&gt;
&lt;p&gt;When you pass a value argument like &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, or &lt;code&gt;hello&lt;/code&gt;, you have access to that value within the function. As a result, you can mutate it like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; number &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; number&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;strong&gt;value&lt;/strong&gt;, or&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;reference&lt;/strong&gt; to a value?&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- ## Values and references

When you declare a variable in JavaScript, you are doing two things: 1) storing a value in memory, and 2) creating a reference to that value. Take the following code:

```js
let name = &#39;sean&#39;
```

With this expression, I am storing the string `&#39;sean&#39;` in memory, and then creating the variable `name` that references that value. --&gt;
&lt;h2 id=&quot;mutating-parameters&quot; tabindex=&quot;-1&quot;&gt;Mutating parameters&lt;/h2&gt;
&lt;p&gt;When you pass a variable as an argument, you are handing a &lt;em&gt;reference&lt;/em&gt; to the function ‚Äì¬†not a value. So when the function references its parameter, JavaScript traces the reference chain to the stored value.&lt;/p&gt;
&lt;p&gt;Let‚Äôs look at an example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; colors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;red&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;orange&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;yellow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;green&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; warmColors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colors&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &#39;green&#39; is not a warm color&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// üéó Remember: [] === [] is false&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; colors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What would you expect the console output to be? You might be surprised to see that the log is &lt;code&gt;true&lt;/code&gt;. That‚Äôs because we passed a &lt;em&gt;reference to&lt;/em&gt; &lt;code&gt;colors&lt;/code&gt; and &lt;strong&gt;not&lt;/strong&gt; the value.&lt;/p&gt;
&lt;p&gt;So if we go on to mutate the &lt;code&gt;array&lt;/code&gt; parameter, we will make changes to the value that it &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;colors&lt;/code&gt; reference:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; colors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;red&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;orange&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;yellow&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;green&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; warmColors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colors&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;colors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;warmColors&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The log after running our &lt;code&gt;remove()&lt;/code&gt; function shows that &lt;code&gt;colors&lt;/code&gt; has been modified:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;orange&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;yellow&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;red&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;orange&#39;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&#39;yellow&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
        </entry>
        
        <entry>
            <title>Make a POST request with fetch</title>
            <link href="https://seanmcp.com/articles/make-a-post-request-with-fetch/"/>
            <updated>2020-08-07T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/make-a-post-request-with-fetch/</id>
            <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&quot;&gt;&lt;code&gt;fetch&lt;/code&gt; is utility for making HTTP requests&lt;/a&gt; from the browser. It is &lt;a href=&quot;https://caniuse.com/#feat=fetch&quot;&gt;available in all modern browsers&lt;/a&gt; and has a &lt;a href=&quot;https://github.com/github/fetch&quot;&gt;popular polyfill for older browsers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To make a &lt;code&gt;GET&lt;/code&gt; request, just pass the endpoint to the global &lt;code&gt;fetch&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://mirror-api.seanmcp.repl.co/get&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It returns a promise that will resolve with the server response. From there, you can convert the response to JSON and read the value in your code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://mirror-api.seanmcp.repl.co/get&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But &lt;code&gt;fetch&lt;/code&gt; also handles other request methods. After &lt;code&gt;GET&lt;/code&gt;, the first you will reach for is &lt;code&gt;POST&lt;/code&gt;. But it isn‚Äôt immediately apparent how to make a request with a different method.&lt;/p&gt;
&lt;h2 id=&quot;how-to-post-with-fetch&quot; tabindex=&quot;-1&quot;&gt;How to &lt;code&gt;POST&lt;/code&gt; with &lt;code&gt;fetch&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The global &lt;code&gt;fetch&lt;/code&gt; function accepts a second options argument. There you can set the method, add a body, and set headers.&lt;/p&gt;
&lt;p&gt;Here is an example POST request that sends a JSON body:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://mirror-api.seanmcp.repl.co/post&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;POST&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello API!&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token string-property property&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have the request in order, you can handle the promises and get the server response.&lt;/p&gt;
&lt;p&gt;For more information on the available including examples with other methods, checkout &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;&lt;em&gt;Using Fetch&lt;/em&gt; on MDN&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy fetching!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Get started with Preact</title>
            <link href="https://seanmcp.com/articles/get-started-with-preact/"/>
            <updated>2020-08-18T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/get-started-with-preact/</id>
            <content type="html">&lt;p&gt;Preact is a lightweight alternative to React. It provides the same&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/get-started-with-preact/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; modern API but at only 3kB minified and gzipped. For comparison, bundlephobia has &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt; at 38.5kB.&lt;/p&gt;
&lt;p&gt;With many of the same features at a fraction of the size, Preact might be a better alternative for your simple client-side React app.&lt;/p&gt;
&lt;h2 id=&quot;sandbox&quot; tabindex=&quot;-1&quot;&gt;Sandbox&lt;/h2&gt;
&lt;h3 id=&quot;repl&quot; tabindex=&quot;-1&quot;&gt;REPL&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://preactjs.com/repl&quot;&gt;Preact website has a REPL&lt;/a&gt; where you can test drive the library. The example as of writing using state and effect hooks and makes a request to the GitHub API with &lt;code&gt;fetch&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setItems&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://api.github.com/search/repositories?q=preact&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setItems&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;codesandbox.io&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;http://codesandbox.io/&quot;&gt;CodeSandbox.io&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CodeSandbox has 54,000+ templates&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/get-started-with-preact/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt; for Preact, including &lt;a href=&quot;https://codesandbox.io/s/preact-preact&quot;&gt;a starter template from the CodeSandbox Team&lt;/a&gt;. The code is similar to the official REPL, but with a class component:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://api.github.com/search/repositories?q=preact&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; r&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;json &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; json&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; results &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Example&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h1&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Result result&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Mostly. &lt;a href=&quot;https://seanmcp.com/articles/get-started-with-preact/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Based on a template search for ‚Äúpreact‚Äù. I did not verify this count. &lt;a href=&quot;https://seanmcp.com/articles/get-started-with-preact/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Emulate iPhone &amp; iPad in Safari</title>
            <link href="https://seanmcp.com/articles/emulate-iphone-and-ipad-in-safari/"/>
            <updated>2020-09-02T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/emulate-iphone-and-ipad-in-safari/</id>
            <content type="html">&lt;p&gt;To emulate an iPhone or iPad in Safari, you first need to have &lt;a href=&quot;https://support.apple.com/guide/safari/use-the-developer-tools-in-the-develop-menu-sfri20948/mac&quot;&gt;the developer tools enabled&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then when visiting a page that you want to test, select ‚ÄúDevelop‚Äù in the application toolbar then ‚ÄúEnter Responsive Design Mode‚Äù.&lt;/p&gt;
&lt;p&gt;This will open a special window where you can emulate your website on an array of Apple devices and user agents.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/safari-responsive-design-mode.png&quot; alt=&quot;Viewing SeanMcP.com on an iPad mini in Safari&#39;s responsive design mode&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;keyboard-shortcut&quot; tabindex=&quot;-1&quot;&gt;Keyboard shortcut&lt;/h2&gt;
&lt;p&gt;To enter Responsive Design Mode without going through the toolbar, you can use the shortcut &lt;kbd&gt;control&lt;/kbd&gt; &lt;kbd&gt;command&lt;/kbd&gt; &lt;kbd&gt;r&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;Happy emulating!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>TypeScript without TypeScript</title>
            <link href="https://seanmcp.com/articles/typescript-without-typescript/"/>
            <updated>2020-12-08T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/typescript-without-typescript/</id>
            <content type="html">&lt;p&gt;As a superset of JavaScript, TypeScript provides a lot of useful features. It‚Äôs no mystery why it is one of the &lt;a href=&quot;https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved&quot;&gt;‚Äúmost loved‚Äù languages in software engineering&lt;/a&gt;. When everything is running smoothly, TypeScript can been a huge boon to productivity.&lt;/p&gt;
&lt;p&gt;However, therein lies one of TypeScript‚Äôs weaknesses: the setup. TS adds a level of overhead that is, in my opinion, prohibitively complex for most of my projects. So while I would love the benefits of working in TypeScript, I don‚Äôt want to go through the trouble of setting it up.&lt;/p&gt;
&lt;p&gt;In searching for a solution to my problem, I came across &lt;a href=&quot;https://fettblog.eu/typescript-jsdoc-superpowers/&quot;&gt;&lt;em&gt;TypeScript without TypeScript ‚Äì JSDoc superpowers&lt;/em&gt;&lt;/a&gt; by &lt;a href=&quot;https://twitter.com//ddprrt&quot;&gt;@ddprrt&lt;/a&gt; on &lt;a href=&quot;http://fettblog.eu/&quot;&gt;fettblog.eu&lt;/a&gt;. In it, the author highlights how &lt;a href=&quot;https://jsdoc.app/&quot;&gt;JSDoc&lt;/a&gt; can provide some of the features of TypeScript without the setup.&lt;/p&gt;
&lt;p&gt;I found the &lt;a href=&quot;https://fettblog.eu/typescript-jsdoc-superpowers/#defining-objects&quot;&gt;‚ÄúDefining Objects‚Äù section&lt;/a&gt; to be particularly helpful. The ability to create ‚Äúinterfaces‚Äù for functions and objects in JavaScript is really powerful. If you combine that with &lt;a href=&quot;https://code.visualstudio.com/docs/nodejs/working-with-javascript#_type-checking-javascript&quot;&gt;&lt;code&gt;// @ts-check&lt;/code&gt;&lt;/a&gt; and a TS-centric IDE like VS Code, you‚Äôll find yourself in a great position when developing.&lt;/p&gt;
&lt;p&gt;Give the article a read and &lt;a href=&quot;https://seanmcp.com/articles/typescript-without-typescript/#comment-link&quot;&gt;let me know what you think&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy typing!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>See all package versions in npm cli</title>
            <link href="https://seanmcp.com/articles/see-all-package-versions-in-npm-cli/"/>
            <updated>2020-12-09T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/see-all-package-versions-in-npm-cli/</id>
            <content type="html">&lt;p&gt;At work, I ran into an issue that may have been related to an external dependency. I wanted to update the package to see if a future release fixed the issue.&lt;/p&gt;
&lt;p&gt;To get the latest version of a package, you can use the &lt;code&gt;@latest&lt;/code&gt; tag:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i package-name@latest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what if you need the next most recent release? Or five versions ago? I wanted to see a list of published versions without having to leave the command line.&lt;/p&gt;
&lt;p&gt;A quick search led me to &lt;a href=&quot;https://willi.am/blog/2015/07/17/viewing-all-versions-of-an-npm-package-including-pre-release/&quot;&gt;&lt;em&gt;Viewing All Versions of an NPM Package (Including Pre-Release)&lt;/em&gt;&lt;/a&gt; by Will Anderson. He pointed to the &lt;code&gt;npm view&lt;/code&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/see-all-package-versions-in-npm-cli/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; command and illustrated how to use it:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; view package-name versions&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will print all of the published versions of any package on the registry. Pretty handy!&lt;/p&gt;
&lt;p&gt;Anderson mentions that this was undocumented in 2015, but today we have &lt;a href=&quot;https://docs.npmjs.com/cli/v6/commands/npm-view&quot;&gt;a page dedicated to the &lt;code&gt;view&lt;/code&gt; command on npm&lt;/a&gt;.&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Anderson used the alias &lt;code&gt;npm show&lt;/code&gt; &lt;a href=&quot;https://seanmcp.com/articles/see-all-package-versions-in-npm-cli/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Standardize character width with CSS</title>
            <link href="https://seanmcp.com/articles/standardize-character-width-with-css/"/>
            <updated>2020-12-09T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/standardize-character-width-with-css/</id>
            <content type="html">&lt;p&gt;&lt;strong&gt;Authors note&lt;/strong&gt;: Before you read this article, you will want to click the ‚ÄúStart timer‚Äù button below to enable the live demos. You can cancel it at any time by clicking ‚ÄúStop timer‚Äù.&lt;/p&gt;
&lt;div class=&quot;button-container&quot;&gt;
    &lt;button onclick=&quot;startTimer()&quot;&gt;Start timer&lt;/button&gt;
    &lt;button onclick=&quot;stopTimer()&quot;&gt;Stop timer&lt;/button&gt;
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;The width of a character is the amount of horizontal space that it occupies. This width varies between characters, weights, and typefaces. In Lato, for example, the letter &lt;strong&gt;W&lt;/strong&gt; is wider than the letter &lt;strong&gt;I&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For most use cases, the varied width of characters isn‚Äôt an issue. However, when you are creating an component like a timer, the differences in width can produce some undesirable movements as the numbers change.&lt;/p&gt;
&lt;p&gt;Take a look at this example when timer running. Since the characters are all different widths, the number ‚Äújitters‚Äù around as it increments:&lt;/p&gt;
&lt;div aria-label=&quot;Default&quot; class=&quot;example&quot;&gt;
    &lt;span class=&quot;count&quot;&gt;0&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;This isn‚Äôt the end of the world, but it‚Äôs not preferable.&lt;/p&gt;
&lt;p&gt;To alleviate this, I have in the past turned to monospace typefaces. These allocate the same width for each character, regardless of the space that the stroke needs.&lt;/p&gt;
&lt;p&gt;In this example, we can see that the jittering is resolved and the timer increments smoothly:&lt;/p&gt;
&lt;div aria-label=&quot;Monospaced&quot; class=&quot;example&quot;&gt;
    &lt;span class=&quot;count&quot;&gt;0&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;However, altering the typeface might not be the best solution for your product. Especially when the change was only made to prevent the jittering.&lt;/p&gt;
&lt;p&gt;Instead, we can use two CSS properties&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/standardize-character-width-with-css/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; to standardize the character width of an element:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.standardize-character-width&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;font-feature-settings&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tnum&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;font-variant-numeric&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; tabular-nums&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With those two in place, we can preserve the original typeface and avoid visual jittering:&lt;/p&gt;
&lt;div aria-label=&quot;Standardized&quot; class=&quot;example&quot;&gt;
    &lt;span class=&quot;count&quot;&gt;0&lt;/span&gt;
&lt;/div&gt;
&lt;p&gt;A few things to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Adding these properties changes the &lt;a href=&quot;https://en.wikipedia.org/wiki/Letter-spacing&quot;&gt;tracking&lt;/a&gt;, or letter spacing, of the characters. This is necessary to standardize widths but might be undesirable for typography aficionados.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-variant-numeric&lt;/code&gt; does not work in Internet Explorer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-feature-settings&lt;/code&gt; supports IE but only works with &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenType&quot;&gt;OpenType fonts&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That being said, this is CSS progressive enhancement: for whom it works, it improves the experience. I‚Äôm pretty happy with this solution, and I have used it in production with &lt;a href=&quot;https://contractions.toollama.com/&quot;&gt;Toollama‚Äôs Contraction Tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information about the CSS properties, you can read about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings&quot;&gt;&lt;code&gt;font-feature-settings&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric&quot;&gt;&lt;code&gt;font-variant-numetric&lt;/code&gt;&lt;/a&gt; on MDN.&lt;/p&gt;
&lt;p&gt;Happy standardizing!&lt;/p&gt;
&lt;style&gt;
.button-container {
    text-align: center;
}

.button-container button {
    background-color: var(--primary);
    border: none;
    border-radius: 2px;
    color: white;
    font-family: inherit;
    font-size: inherit;
    font-weight: bold;
    margin: 0 0.5rem;
    padding: 0.5rem 1rem;
}

.button-container button:focus,
.button-container button:hover {
    box-shadow: 0 2px 4px hsla(0, 0%, 0%, 25%);
    filter: brightness(1.2);
}

.example {
    background-color: var(--off-background);
    padding: 1rem;
    margin: 1rem 0;
    position: relative;
    text-align: center;
}

.example::before {
    content: attr(aria-label);
    font-size: 0.75rem;
    left: 0;
    padding: 5px;
    position: absolute;
    top: 0;
}

.example .count {
    font-size: 3rem;
}

.example[aria-label=&quot;Monospaced&quot;] .count {
    font-family: Menlo, Monaco, Fira Code, monospace;
}

.example[aria-label=&quot;Standardized&quot;] .count {
    font-feature-settings: &quot;tnum&quot;;
    font-variant-numeric: tabular-nums;
}
&lt;/style&gt;
&lt;script&gt;
let countEls = document.querySelectorAll(&#39;.count&#39;)
function incrementCount() {
    let nextNumber
    countEls.forEach(el =&gt; {
        if (!nextNumber) nextNumber = Number(el.textContent) + 1
        if (nextNumber &gt; 10000) stopTimer() 
        el.textContent = nextNumber
    })
}
function startTimer() {
    window._interval = setInterval(incrementCount, 100)
}
function stopTimer() {
    clearInterval(window._interval)
}
&lt;/script&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I first saw this solution from &lt;a href=&quot;https://twitter.com/sulco/status/1293862293139337217&quot;&gt;Tomek Su≈Çkowski (@sulco) on Twitter&lt;/a&gt;. He shares lots of great tips like this and is worth the follow. &lt;a href=&quot;https://seanmcp.com/articles/standardize-character-width-with-css/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Increase the playback speed on any audio or video online</title>
            <link href="https://seanmcp.com/articles/increase-the-playback-speed-on-any-audio-or-video-online/"/>
            <updated>2020-12-15T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/increase-the-playback-speed-on-any-audio-or-video-online/</id>
            <content type="html">&lt;p&gt;I like learning from audio and video, from podcasts to YouTube videos. My favorite applications let you alter the playback speed of the audio and video so that you can consume the content faster (or slower).&lt;/p&gt;
&lt;p&gt;I find this particularly useful for unscripted podcasts or coding videos and will usually increase the speed to 2x (or more). At that rate, I can get through a 60 minute podcast in half the time!&lt;/p&gt;
&lt;p&gt;However, I sometimes find myself on websites where they do not allow you to change the playback speed. Recently I was watching a coding tutorial on Vimeo and was stuck at the normal speed. Not a good use of my time.&lt;/p&gt;
&lt;p&gt;Since online audio and video are played through native HTML elements, we have the ability to customize their behavior with the developer console.&lt;/p&gt;
&lt;p&gt;First &lt;a href=&quot;https://seanmcp.com/articles/increase-the-playback-speed-on-any-audio-or-video-online/how-to-open-dev-tools&quot;&gt;open the dev tools with your favorite method&lt;/a&gt;, and click on the ‚ÄúConsole‚Äù tab. Then enter and run the following script&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/increase-the-playback-speed-on-any-audio-or-video-online/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;audio,video&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playbackRate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This grabs all of the &lt;code&gt;audio&lt;/code&gt; and &lt;code&gt;video&lt;/code&gt; elements from the DOM, loops over each node, and sets the playback rate to &lt;code&gt;2.0&lt;/code&gt; or 2x. If you prefer a different rate, you will only need to edit that last number.&lt;/p&gt;
&lt;p&gt;If you are working on an application that plays audio or video, make sure to give the user the ability to change the playback rate. That way everyone can listen at the speed that is best for them&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/increase-the-playback-speed-on-any-audio-or-video-online/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Happy listening/watching!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools/console/utilities#queryselectorall&quot;&gt;&lt;code&gt;$$&lt;/code&gt; is a shorthand for &lt;code&gt;document.querySelectorAll()&lt;/code&gt;&lt;/a&gt; and works in all modern browsers &lt;a href=&quot;https://seanmcp.com/articles/increase-the-playback-speed-on-any-audio-or-video-online/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;For some light reading on the subject, checkout &lt;a href=&quot;https://homes.cs.washington.edu/~reinecke//Publications_files/Bragg_CHI2018.pdf&quot;&gt;this paper on &lt;em&gt;Human Listening Rates&lt;/em&gt;&lt;/a&gt; by the University of Washington CS department &lt;a href=&quot;https://seanmcp.com/articles/increase-the-playback-speed-on-any-audio-or-video-online/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Change extensions of all files in a directory</title>
            <link href="https://seanmcp.com/articles/change-extensions-of-all-files-in-a-directory/"/>
            <updated>2020-12-17T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/change-extensions-of-all-files-in-a-directory/</id>
            <content type="html">&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; *.jsx&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; -- &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$f&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;${f&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;.jsx}&lt;/span&gt;.tsx&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</content>
        </entry>
        
        <entry>
            <title>Sass converts hsla to hex incorrectly</title>
            <link href="https://seanmcp.com/articles/sass-converts-hsla-to-hex-incorrectly/"/>
            <updated>2020-12-17T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/sass-converts-hsla-to-hex-incorrectly/</id>
            <content type="html">&lt;p&gt;I ran into an issue where Sass was converting &lt;code&gt;hsla()&lt;/code&gt; values to hex incorrectly. It would take an input like this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* input.scss */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.subtle-blue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hsla&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;212&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 10%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And convert it into:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* output.css */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.subtle-blue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #407bbf&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That is &lt;strong&gt;not&lt;/strong&gt; the same color. When processing the input styles, Sass ignores the alpha (opacity) value and converts it into a standard hex.&lt;/p&gt;
&lt;p&gt;You can see the different between the two values here:&lt;/p&gt;
&lt;style&gt;
.exs {
    display: grid;
    gap: 0.5rem;
    grid-template-columns: repeat(2, 1fr);
    margin: 2rem 0;
}
.ex {
    padding: 4rem 0.5rem 0.5rem;
}
.ex code {
    background-color: black !important;
    color: white !important;
    padding: 2px 4px;
}
&lt;/style&gt;
&lt;div class=&quot;exs&quot;&gt;
    &lt;div class=&quot;ex&quot; style=&quot;background-color:hsla(212, 50%, 50%, 10%)&quot;&gt;
        &lt;code&gt;hsla(212, 50%, 50%, 10%)&lt;/code&gt;
    &lt;/div&gt;
    &lt;div class=&quot;ex&quot; style=&quot;background-color:#407bbf;&quot;&gt;
        &lt;code&gt;#407bbf&lt;/code&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you search around for an answer, you will find a few suggestions to &lt;a href=&quot;https://github.com/sass/sass/issues/469#issuecomment-461675216&quot;&gt;use strings for &lt;code&gt;hsl&lt;/code&gt; values&lt;/a&gt; or &lt;a href=&quot;https://github.com/sass/sass/issues/469#issuecomment-77290544&quot;&gt;recreating the &lt;code&gt;hsl&lt;/code&gt; and &lt;code&gt;hsla&lt;/code&gt; functions in Sass&lt;/a&gt;. Neither of those seemed an idea solution.&lt;/p&gt;
&lt;p&gt;Instead of changing how you declare &lt;code&gt;hsl&lt;/code&gt; value or recreating the function, you can fix this issue by &lt;strong&gt;using decimal alpha values instead of percent&lt;/strong&gt;. Going back to the original example, change &lt;code&gt;10%&lt;/code&gt; to &lt;code&gt;0.1&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* Input Sass */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.subtle-blue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hsla&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;212&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And Sass will convert it to alpha-supporting &lt;code&gt;rgba&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* Output css */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.subtle-blue&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;64&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 123&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 191&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These values aren‚Äôt identical because &lt;a href=&quot;https://stackoverflow.com/questions/31613667/hsl-to-rgb-conversion-math&quot;&gt;math is required&lt;/a&gt;, but they‚Äôre infinitely closer than the non-alpha hex value:&lt;/p&gt;
&lt;div class=&quot;exs&quot;&gt;
    &lt;div class=&quot;ex&quot; style=&quot;background-color:hsla(212, 50%, 50%, 0.1)&quot;&gt;
        &lt;code&gt;hsla(212, 50%, 50%, 0.1)&lt;/code&gt;
    &lt;/div&gt;
    &lt;div class=&quot;ex&quot; style=&quot;background-color:rgba(64, 123, 191, 0.1);&quot;&gt;
        &lt;code&gt;rgba(64, 123, 191, 0.1)&lt;/code&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can see this behavior for yourself in &lt;a href=&quot;https://sass.js.org/&quot;&gt;this Sass playground&lt;/a&gt; but not in &lt;a href=&quot;https://www.sassmeister.com/&quot;&gt;Sassmeister&lt;/a&gt;. So it may depend on the flavor and version of Sass that you are using.&lt;/p&gt;
&lt;p&gt;But for a quick fix that doesn‚Äôt involve wading into the release notes of your dependencies, opt for decimal alpha values in &lt;code&gt;hsla&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Happy styling!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Add text to the beginning of every file</title>
            <link href="https://seanmcp.com/articles/add-text-to-the-beginning-of-every-file/"/>
            <updated>2020-12-18T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/add-text-to-the-beginning-of-every-file/</id>
            <content type="html">&lt;p&gt;While converting a JavaScript &lt;code&gt;create-react-app&lt;/code&gt; project to TypeScript, I wanted a single line of text to every &lt;code&gt;.tsx&lt;/code&gt; file. Searching for an answer brought me to &lt;a href=&quot;https://superuser.com/questions/246837/how-do-i-add-text-to-the-beginning-of-a-file-in-bash&quot;&gt;this question on StackExchange&lt;/a&gt;, specifically &lt;a href=&quot;https://superuser.com/a/521654&quot;&gt;this answer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;echo&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt;, you can add new text to the old file‚Äôs contents and send it to the original file. Combined with a &lt;code&gt;for&lt;/code&gt; loop to iterate over the matching files, I came up with a one-liner&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/add-text-to-the-beginning-of-every-file/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; that saved me a lot of time:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token for-or-select variable&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; **/*.tsx&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;// @ts-nocheck&lt;br /&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$f&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$f&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This script looks for all &lt;code&gt;.tsx&lt;/code&gt; files in any directory, then adds &lt;code&gt;// @ts-nocheck&lt;/code&gt; and a newline to the beginning of the file. But there is nothing magic about the selector or added text; you can use whatever you want for those values.&lt;/p&gt;
&lt;p&gt;Hope that saves you a bit of time too!&lt;/p&gt;
&lt;p&gt;Happy scripting!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Okay, with the newline it‚Äôs kind of a two-liner, but you can copy and paste it directly into the command line. &lt;a href=&quot;https://seanmcp.com/articles/add-text-to-the-beginning-of-every-file/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Make all properties required in TypeScript</title>
            <link href="https://seanmcp.com/articles/make-all-properties-required-in-typescript/"/>
            <updated>2020-12-19T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/make-all-properties-required-in-typescript/</id>
            <content type="html">&lt;p&gt;I have a type interface for shapes that looks something like this:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    height&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    width&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I want to extend my interface for rectangles, but I want both &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; to be required. You can do that in TypeScript with a &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/utility-types.html#requiredtype&quot;&gt;&lt;code&gt;Required&lt;/code&gt; utility type&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Required&lt;/code&gt; takes a type and returns one with all required properties. You can use it by declaring a new &lt;code&gt;type&lt;/code&gt; and passing the &lt;code&gt;Shape&lt;/code&gt; interface:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Required&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Shape&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when I try to create a new rectangle, I can use the &lt;code&gt;Rectangle&lt;/code&gt; type to ensure that I provided all the required properties:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rect&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Rectangle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    height&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    width&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can play around with these types in &lt;a href=&quot;https://www.typescriptlang.org/play?#code/JYOwLgpgTgZghgYwgAgMoAs4AcUG8BQyRy6EwA5umAPwBcyIArgLYBG0A3IcQO7AAmYdHQYt2ULgF98+MAE8cyAEoQEYOCHIAbFAF5lEAI6NgUCPwA8GbBAB8MhAHsQAZzDIza+irUbte5AJiEjJKMHoAFgAabiI+QXR6AA58SSA&quot;&gt;this TypeScript playground&lt;/a&gt;, and &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/utility-types.html&quot;&gt;read more about Utility types&lt;/a&gt; on the TypeScript website.&lt;/p&gt;
&lt;p&gt;Happy requiring!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Checkout the previous git branch</title>
            <link href="https://seanmcp.com/articles/checkout-the-previous-git-branch/"/>
            <updated>2021-01-22T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/checkout-the-previous-git-branch/</id>
            <content type="html">&lt;p&gt;Today I needed to checkout a branch, pull the latest, then checkout &lt;code&gt;dev&lt;/code&gt;, pull the latest, and merge &lt;code&gt;dev&lt;/code&gt; into my branch.&lt;/p&gt;
&lt;p&gt;This flow is pretty typical of my work, but I wondered: is there an easier way to go back to the previous branch in git?&lt;/p&gt;
&lt;p&gt;Turns out there is, and &lt;a href=&quot;https://stackoverflow.com/a/7207542/8486161&quot;&gt;StackOverflow came to the rescue&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout -&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will checkout the most recent branch. For more of an explanation, read the full response on StackOverflow.&lt;/p&gt;
&lt;p&gt;To complete the steps above, I could run the following commands:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout feature/branch-with-a-long-name&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; pull&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout dev&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; pull&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout -&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; merge dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If I can remember that command, it will be more efficient that going back through my command history. Hope that helps you too!&lt;/p&gt;
&lt;p&gt;Happy version controlling!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Send data to the window with Eleventy</title>
            <link href="https://seanmcp.com/articles/send-data-to-the-window-with-eleventy/"/>
            <updated>2021-01-25T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/send-data-to-the-window-with-eleventy/</id>
            <content type="html">&lt;p&gt;Static-site generators like Eleventy are great at building websites. But when you want to add additional functionality, like a search feature, it might feel like they fall short.&lt;/p&gt;
&lt;p&gt;All the data to generate your site exists at build time, how can you access that with some client-side JavaScript?&lt;/p&gt;
&lt;p&gt;Here we‚Äôll look at one solution with Eleventy to expose data on the global &lt;code&gt;window&lt;/code&gt; object to add interactive elements to your static site.&lt;/p&gt;
&lt;p&gt;Besides familiarity with Eleventy, the only prerequisite here is &lt;a href=&quot;https://www.11ty.dev/docs/shortcodes/#universal-shortcodes&quot;&gt;creating custom shortcodes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;nunjucks&quot; tabindex=&quot;-1&quot;&gt;Nunjucks&lt;/h2&gt;
&lt;p&gt;Out-of-the-box, you can use Nunjucks‚Äô &lt;code&gt;dump&lt;/code&gt; and &lt;code&gt;safe&lt;/code&gt; filters to stringify data and leave it unescaped, respectively. Put that all within a &lt;code&gt;script&lt;/code&gt; tag, and you have a simple method for exposing data:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- index.njk --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__DATA__ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hello&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;there&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; dump &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; safe &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works but is a little fiddly and limited to Nunjucks. For a more universal solution, let‚Äôs create a custom shortcode.&lt;/p&gt;
&lt;h2 id=&quot;shortcode&quot; tabindex=&quot;-1&quot;&gt;Shortcode&lt;/h2&gt;
&lt;p&gt;A better solution to send data to the client is with a reusable shortcode. Let‚Äôs add a it to &lt;code&gt;.eleventy.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// .eleventy.js&lt;/span&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addShortcode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;expose&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;script&gt;&lt;br /&gt;            window.__DATA__=JSON.parse(&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;);&lt;br /&gt;        &amp;lt;/script&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then use the new shortcode like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- index.njk --&gt;&lt;/span&gt;&lt;br /&gt;{% expose [&#39;hello&#39;, &#39;there&#39;] %}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice and simple! I‚Äôm going to offer an optional improvement to cleanup after exposing the data:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addShortcode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;expose&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;script id=&quot;__EXPOSE__&quot;&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        window.__DATA__=JSON.parse(&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;);&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;        document.getElementById(&quot;__EXPOSE__&quot;).remove();&lt;/mark&gt;&lt;br /&gt;    &amp;lt;/script&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With those changes, the script will execute on the client, add the data to the &lt;code&gt;window&lt;/code&gt;, and then remove the &lt;code&gt;script&lt;/code&gt; tag.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Hope that helps! Let me know if you have a better method of exposing data on the &lt;code&gt;window&lt;/code&gt;, or how you can accomplish this with your favorite static-site generator.&lt;/p&gt;
&lt;p&gt;Happy scripting!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Geddes&#39; Guide to Crafting</title>
            <link href="https://seanmcp.com/articles/dave-geddes-guide-to-crafting/"/>
            <updated>2021-01-29T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/dave-geddes-guide-to-crafting/</id>
            <content type="html">&lt;p&gt;I spent some time this week enjoying &lt;a href=&quot;https://mastery.games/&quot;&gt;Dave Geddes‚Äô content&lt;/a&gt;. Three resources in particular have left me with a lot to think about, and I‚Äôm combining them into what I call ‚ÄúGeddes‚Äô Guide to Crafting‚Äù.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mastery.games/post/practice-css/&quot;&gt;&lt;em&gt;Practice CSS Like an Artist&lt;/em&gt; (article)&lt;/a&gt;: Geddes‚Äô draws comparisons between designing an application and painting a portrait. First you start with a rough sketch, then filling with broad strokes. Only once you have the foundation set do you add fine details.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mastery.games/post/polish/&quot;&gt;&lt;em&gt;When Should You Polish Your UI?&lt;/em&gt; (article)&lt;/a&gt;: Geddes reflects of a few strategies for polishing the design for your application. Following the previous theme, he recommends a rough sketch with broad strokes (&lt;em&gt;i.e&lt;/em&gt; prototyping) before polishing with fine details.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=7zBpd3wWsnU&quot;&gt;&lt;em&gt;Build the zelda UI with Web Tech&lt;/em&gt; (video)&lt;/a&gt;: Geddes completes the first phase of recreating Zelda: Breath of the Wild‚Äôs menu screen in HTML and CSS. Here you can see rough sketching and broad strokes in practice. The video alludes to a part two, but it was never posted on YouTube.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a developer, it can be tempting to spend too much time worrying about the fine details of what you are developing. But the best of products were not created perfect on the first try. They come from an on-going process of sketching, filling, and eventually polish.&lt;/p&gt;
&lt;p&gt;So don‚Äôt sweat the fine details in the beginning. Create a something that works, and then fill in those details later.&lt;/p&gt;
&lt;p&gt;Happy crafting!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Fix &quot;Error: Could not resolve pagination key in template data&quot; in Eleventy</title>
            <link href="https://seanmcp.com/articles/fix-error-could-not-resolve-pagination-key-in-template-data-in-eleventy/"/>
            <updated>2021-02-06T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/fix-error-could-not-resolve-pagination-key-in-template-data-in-eleventy/</id>
            <content type="html">&lt;p&gt;In a recent Eleventy project, I wanted to create a single collection for tags with two keys: &lt;code&gt;alphabetical&lt;/code&gt; for an array of all tags, and &lt;code&gt;popular&lt;/code&gt; for an array of arrays with the tag and number of times it was used.&lt;/p&gt;
&lt;p&gt;To access either ‚Äúsub-collection‚Äù, I could dive into the object like &lt;code&gt;collections.tagList.alphabetical&lt;/code&gt;. This worked like a dream in my template and markdown files, and I thought maybe I was on to a new cool pattern for Eleventy.&lt;/p&gt;
&lt;p&gt;But when I tried to paginate the sub-collection, everything fell apart. Eleventy errored with the following message:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;Problem writing Eleventy templates: &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;more &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; DEBUG output&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Could not resolve pagination key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; template data: collections.tagList.alphabetical&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;Error&lt;span class=&quot;token variable&quot;&gt;`&lt;/span&gt;&lt;/span&gt; was thrown:&lt;br /&gt;    Error: Could not resolve pagination key &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; template data: collections.tagList.alphabetical&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The pagination code in question looked like:&lt;/p&gt;
&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;token front-matter-block&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token front-matter yaml language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; collections.tagList.alphabetical&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; tag&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /tag/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; tag &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interesting. Maybe the collection hasn‚Äôt been created by the time the pagination code runs, I guessed. To test this, I tried paginating &lt;code&gt;collections.tagList&lt;/code&gt; to see if the &lt;code&gt;alphabetical&lt;/code&gt; key was present:&lt;/p&gt;
&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;token front-matter-block&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token front-matter yaml language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; collections.tagList&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; tag&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /tag/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; tag &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This created pages for &lt;code&gt;alphabetical&lt;/code&gt; and &lt;code&gt;popular&lt;/code&gt;, which proved my hypothesis wrong: the alphabetical data does exist when the pagination occurs.&lt;/p&gt;
&lt;p&gt;Maybe it had something to do with paginating nested objects? To confirm, I added a test object to the frontmatter and tried to paginate it:&lt;/p&gt;
&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;token front-matter-block&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token front-matter yaml language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test.test.test&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; tag&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /tag/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; tag &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;/&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This worked as expected, creating pages for a, b, and c. So it isn‚Äôt an issue with paginating deep objects.&lt;/p&gt;
&lt;p&gt;With two incorrect hypotheses, it was time to look for outside help. I &lt;a href=&quot;https://discord.com/channels/741017160297611315/741017160297611319/807589091814146060&quot;&gt;posted in 11ty Discord&lt;/a&gt; and did some searching. My initial queries brought up two issues: &lt;a href=&quot;https://github.com/11ty/eleventy/issues/171&quot;&gt;an actual bug from 2018&lt;/a&gt; and &lt;a href=&quot;https://github.com/11ty/eleventy/issues/690&quot;&gt;some invalid JSON from 2019&lt;/a&gt;. Neither of which provided the solution here.&lt;/p&gt;
&lt;p&gt;Feeling at a dead end, I decided to rethink the problem. I couldn‚Äôt paginate over a nested collection object, but normal collections work just fine. If I could flatten my clever &lt;code&gt;tagsList&lt;/code&gt; into multiple collections, the problem would be solved.&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;collections.tagList.alphabetical&lt;/code&gt; and &lt;code&gt;collections.tagList.popular&lt;/code&gt;, I created two collections: &lt;code&gt;collections.tagsAll&lt;/code&gt; and &lt;code&gt;collections.tagsPopular&lt;/code&gt;. This required an addition iteration over the post data (one for each collection), but that small increase in build time isn‚Äôt an issue for this project.&lt;/p&gt;
&lt;p&gt;The final code to fix the ‚ÄúError: could not resolve pagination key in template data‚Äù is a flattened collection:&lt;/p&gt;
&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;token front-matter-block&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token front-matter yaml language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;pagination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; collections.tagsAll&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; tag&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /tag/&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; tag &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works well, but I would still love to find a way to get the original solution to work. Let me know if you have a better way to solve this problem. &lt;span aria-hidden=&quot;true&quot; class=&quot;eleventy-emoji&quot; role=&quot;img&quot;&gt;üëç&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Happy paginating!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Setup Netlify CMS with Eleventy</title>
            <link href="https://seanmcp.com/articles/setup-netlify-cms-with-eleventy/"/>
            <updated>2021-02-08T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/setup-netlify-cms-with-eleventy/</id>
            <content type="html">&lt;p&gt;Netlify‚Äôs guide for &lt;a href=&quot;https://www.netlifycms.org/docs/add-to-your-site/&quot;&gt;adding Netlify CMS to your site&lt;/a&gt; was really helpful. Consider this a supplemental guide to getting your Eleventy site up and running with Netlify CMS.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Your posts will probably have tags, or a list of strings for organizing content. Netlify CMS has a &lt;a href=&quot;https://www.netlifycms.org/docs/widgets/#list&quot;&gt;list widget type&lt;/a&gt; that will work nicely:&lt;/p&gt;
&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# admin/config.yml&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blog&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token key atrule&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tags&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tags&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;list&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want editors to select from a specific set of options, the &lt;a href=&quot;https://www.netlifycms.org/docs/widgets/#select&quot;&gt;select widget type&lt;/a&gt; should work for you.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Eleventy will ignore Netlify CMS‚Äô &lt;code&gt;config.yml&lt;/code&gt; when building your site, so you‚Äôll need to tell it to copy the file into your build directory:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// .eleventy.js&lt;/span&gt;&lt;br /&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addPassthroughCopy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;src/admin/config.yml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The actual path may vary based on your project structure.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Search all files for two strings</title>
            <link href="https://seanmcp.com/articles/search-all-files-for-two-strings/"/>
            <updated>2021-02-15T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/search-all-files-for-two-strings/</id>
            <content type="html">&lt;p&gt;To search the current directory for all files that contain two independent strings, you can use the following terminal command:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -lr &lt;span class=&quot;token string&quot;&gt;&quot;common&quot;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -lr &lt;span class=&quot;token string&quot;&gt;&quot;rare&quot;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In essence, this is saying &amp;quot;Recursively find all the files in the current directory with the string &lt;code&gt;rare&lt;/code&gt;, and then look through those files to find any with the string &lt;code&gt;common&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Depending on the directory, you may want to limit the number of directories that &lt;code&gt;grep&lt;/code&gt; has to inspect. For me, that often includes directories like &lt;code&gt;node_modules/&lt;/code&gt; and &lt;code&gt;cache&lt;/code&gt;. Here‚Äôs the same command with a few excluded directories:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -lr &lt;span class=&quot;token string&quot;&gt;&quot;common&quot;&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -lr --exclude-dir&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;node_modules --exclude-dir&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;.git --exclude-dir&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;build --exclude-dir&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;cache &lt;span class=&quot;token string&quot;&gt;&quot;rare&quot;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The order of the strings does matter, but putting the less commonly occurring string second is a little more efficient.&lt;/p&gt;
&lt;p&gt;Happy searching!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Let&#39;s stop skinning cats</title>
            <link href="https://seanmcp.com/articles/lets-stop-skinning-cats/"/>
            <updated>2021-02-18T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/lets-stop-skinning-cats/</id>
            <content type="html">&lt;p&gt;Idioms are interesting. They‚Äôre phrases that have a functional meaning that is independent of their literal meaning. In English, we have idioms like ‚Äúbeating around the bush,‚Äù which means to avoid saying what you really mean because it‚Äôs uncomfortable &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/lets-stop-skinning-cats/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;When I was teaching a classroom of first- and second-generation Americans, we explicitly taught idioms so that students would understand the form if not remember examples when reading or speaking with others. I had an illustrated poster on the wall with some common US idioms.&lt;/p&gt;
&lt;p&gt;Someone could certainly go on a crusade to rid a language of idioms. ‚ÄúWhy say something purposely incorrect when you really mean something else?‚Äù they could argue. I‚Äôm not going to go that far; I think learning of &lt;a href=&quot;https://www.thatsanegg.com/about&quot;&gt;idioms in other languages in kind of neat&lt;/a&gt;. That said, there is one English idiom that I would like to remove:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is more than one way to skin a cat. &lt;span aria-hidden=&quot;true&quot; class=&quot;eleventy-emoji&quot; role=&quot;img&quot;&gt;üòø&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are unfamiliar, the idiom means that there are multiple ways to complete a particular task. Since that is an axiom of sorts in programming, &lt;a href=&quot;https://duckduckgo.com/?q=site%3Astackoverflow.com+%22more+than+one+way+to+skin+a+cat%22&quot;&gt;I see the idiom used relatively frequently&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Where it differs from an idiom like ‚Äúbarking up the wrong tree,‚Äù is that the literal meaning of ‚Äúskinning a cat‚Äù is so odd. Sure, you &lt;em&gt;can&lt;/em&gt; skin a cat. But who does that?&lt;/p&gt;
&lt;p&gt;I am not very old, nor have I had a vast set of life experiences. But I have never once needed to, seen, or heard of anyone skinning a cat. I don‚Äôt know of any uses for cat fur, so skinning one seems unnecessary. Also, many people like cats and a phrase that involves removing their skin is a little insensitive.&lt;/p&gt;
&lt;p&gt;I propose replacing this idiom with another:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is more than one way to bake a cake. &lt;span aria-hidden=&quot;true&quot; class=&quot;eleventy-emoji&quot; role=&quot;img&quot;&gt;üç∞&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This works on multiple levels. One, cakes are fun. Two, most people have heard of baking cakes and may have baked one themselves. And three, it doesn‚Äôt involve skinning a beloved animal. And four, &lt;a href=&quot;https://www.allrecipes.com/search/results/?sort=re&amp;amp;wt=cake&quot;&gt;there &lt;em&gt;is&lt;/em&gt; more than one way to make a cake&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;At the end of the day, I don‚Äôt care all that much. But I have started using ‚Äúthere is more than one way to bake a cake‚Äù in personal and professional conversations, and I haven‚Äôt (to my knowledge) been misunderstood. So why not? Language is what we make of it, so let‚Äôs make English a little more fun.&lt;/p&gt;
&lt;p&gt;Happy baking!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;I‚Äôve made my way to this website on a number of occasions, and I think it‚Äôs neat: &lt;a href=&quot;https://www.ef.com/ca/english-resources/english-idioms/&quot;&gt;https://www.ef.com/ca/english-resources/english-idioms/&lt;/a&gt; &lt;a href=&quot;https://seanmcp.com/articles/lets-stop-skinning-cats/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Building browser extensions</title>
            <link href="https://seanmcp.com/articles/building-browser-extensions/"/>
            <updated>2021-02-23T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/building-browser-extensions/</id>
            <content type="html">&lt;p&gt;These are resources that I reference and guides that I follow while developing browser add-ons/extensions. Hopefully this garden will be helpful to you along the way!&lt;/p&gt;
&lt;h2 id=&quot;resources&quot; tabindex=&quot;-1&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Your_first_WebExtension#installing&quot;&gt;How to install temporary add-ons in Firefox (MDN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/docs/extensions/mv2/manifest/icons/&quot;&gt;Icons for Chrome extensions (chrome.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json&quot;&gt;&lt;code&gt;manifest.json&lt;/code&gt; documentation (MDN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/SeanMcP/popsicle-sticks-mini/master/build.sh&quot;&gt;Sample build script (GitHub)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;guides&quot; tabindex=&quot;-1&quot;&gt;Guides&lt;/h2&gt;
&lt;h3 id=&quot;how-to-add-to-browser-while-developing&quot; tabindex=&quot;-1&quot;&gt;How to add to browser while developing&lt;/h3&gt;
&lt;h4 id=&quot;chrome&quot; tabindex=&quot;-1&quot;&gt;Chrome&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href=&quot;chrome://extensions&quot;&gt;&lt;code&gt;chrome://extensions&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Enable ‚ÄúDeveloper mode‚Äù&lt;/li&gt;
&lt;li&gt;Select ‚ÄúLoad unpacked‚Äù&lt;/li&gt;
&lt;li&gt;Select the project directory&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;firefox&quot; tabindex=&quot;-1&quot;&gt;Firefox&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href=&quot;about:debugging#/runtime/this-firefox&quot;&gt;&lt;code&gt;about:debugging#/runtime/this-firefox&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Select ‚ÄúLoad Temporary Add-on‚Ä¶‚Äù&lt;/li&gt;
&lt;li&gt;Select the project directory&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;Happy extending!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Set innerHTML of an element in Svelte</title>
            <link href="https://seanmcp.com/articles/set-innerhtml-of-an-element-in-svelte/"/>
            <updated>2021-02-25T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/set-innerhtml-of-an-element-in-svelte/</id>
            <content type="html">&lt;p&gt;When working on a Svelte application, I wanted to replace newline characters in a string with &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; elements and render the result as HTML. If you do the replace in your component markup, then the rendered output has escaped angle brackets:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Component.svelte --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{notes.replace(/\n/g, &#39;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&#39;)}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Output markup --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Line one&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;br&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt;Line two&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From previous experience, I know that we‚Äôre not rendering the replaced string as HTML, so I tried searching online for a solution involving &lt;code&gt;innerHTML&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the Svelte API docs, there are only three mentions of &lt;code&gt;innerHTML&lt;/code&gt;, two of which refer to bindings with &lt;code&gt;contenteditable&lt;/code&gt; elements. But I wanted to set the &lt;code&gt;innerHTML&lt;/code&gt; of an element that would never change.&lt;/p&gt;
&lt;p&gt;While searching through the Svelte Discord for &lt;code&gt;innerHTML&lt;/code&gt;, I came across an unrelated post that mentioned &lt;code&gt;{@html}&lt;/code&gt;. I had never encountered this before, so I looked it up in the Svelte docs&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/set-innerhtml-of-an-element-in-svelte/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a text expression, characters like &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; are escaped; however, with HTML expressions, they‚Äôre not.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not the longest explanation, but that sounds like my problem. Back in my code, I tried wrapping the replaced text with &lt;code&gt;{@html}&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Component.svelte --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    {@html notes.replace(/\n/g, &#39;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&#39;)}&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that, everything rendered as expected:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Output markup --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    Line one&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    Line two&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So next time you want to set the &lt;code&gt;innerHTML&lt;/code&gt; of an element in Svelte, use an HTML express with &lt;code&gt;{@html}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Happy escaping!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://svelte.dev/docs#html&quot;&gt;https://svelte.dev/docs#html&lt;/a&gt; &lt;a href=&quot;https://seanmcp.com/articles/set-innerhtml-of-an-element-in-svelte/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>Create a URL shortener with Netlify</title>
            <link href="https://seanmcp.com/articles/create-a-url-shortener-with-netlify/"/>
            <updated>2021-02-26T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/create-a-url-shortener-with-netlify/</id>
            <content type="html">&lt;p&gt;After hearing of a few people doing the same, I set up a mostly-free URL shortener with Netlify: &lt;a href=&quot;https://smcp.dev/&quot;&gt;smcp.dev&lt;/a&gt;. Here‚Äôs the steps I followed to get it done.&lt;/p&gt;
&lt;h2 id=&quot;1.-register-a-domain&quot; tabindex=&quot;-1&quot;&gt;1. Register a domain&lt;/h2&gt;
&lt;p&gt;Go to your favorite registrar and buy a new domain. Aim for something short and memorable, and consider the &lt;code&gt;.link&lt;/code&gt; TLD. I heard a recommendation for &lt;a href=&quot;https://hover.com/&quot;&gt;Hover&lt;/a&gt;, which seems pretty cool, but I went with Google Domains for smcp.dev.&lt;/p&gt;
&lt;p&gt;This is the only step that costs money, and the amount will depend on the domain/TLD that you choose. &lt;code&gt;.dev&lt;/code&gt; TLDs on Google Domains cost $12/year.&lt;/p&gt;
&lt;h2 id=&quot;2.-create-a-repo&quot; tabindex=&quot;-1&quot;&gt;2. Create a repo&lt;/h2&gt;
&lt;p&gt;I modelled &lt;a href=&quot;https://github.com/seanmcp/smcp.dev&quot;&gt;my repo&lt;/a&gt; off of &lt;a href=&quot;https://github.com/cassidoo/cass.run&quot;&gt;&lt;code&gt;cassidoo/cass.run&lt;/code&gt;&lt;/a&gt;, which seems to be based off of &lt;a href=&quot;https://github.com/kentcdodds/netlify-shortener-example&quot;&gt;kentcdodds/netlify-shortener-example&lt;/a&gt;. In order of importance, you have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;_redirect&lt;/code&gt; file that maps short urls to destinations,&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;package.json&lt;/code&gt; with a single (optional) dependency for adding links,&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;README.md&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;and some git stuff.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3.-add-your-project-to-netlify&quot; tabindex=&quot;-1&quot;&gt;3. Add your project to Netlify&lt;/h2&gt;
&lt;p&gt;Login to Netlify (or create an account) and add a new project from git. Select your repository, and enter the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build command&lt;/strong&gt;: Nothing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Publish directory&lt;/strong&gt;: Nothing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4.-setup-your-custom-domain&quot; tabindex=&quot;-1&quot;&gt;4. Setup your custom domain&lt;/h2&gt;
&lt;p&gt;In the main project view on Netlify, select ‚Äú&lt;span aria-hidden=&quot;true&quot; class=&quot;eleventy-emoji&quot; role=&quot;img&quot;&gt;‚öôÔ∏è&lt;/span&gt; Domain settings‚Äù, then ‚ÄúAdd custom domain‚Äù. Enter the domain that you registered in step one and go through the flow.&lt;/p&gt;
&lt;p&gt;You‚Äôll need to update the DNS settings with your registrar to point to Netlify‚Äôs servers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dns1.p05.nsone.net
dns2.p05.nsone.net
dns3.p05.nsone.net
dns4.p05.nsone.net
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;5.-wait&quot; tabindex=&quot;-1&quot;&gt;5. Wait&lt;/h2&gt;
&lt;p&gt;Depending on how quickly you went through steps 1-4, you may have to wait a few hours for everything to get setup from registrar and the DNS. For me, this took about thirty minutes, but your mileage may vary.&lt;/p&gt;
&lt;h2 id=&quot;6.-enjoy&quot; tabindex=&quot;-1&quot;&gt;6. Enjoy&lt;/h2&gt;
&lt;p&gt;With all that in place, you should be able to use your URL shortener: &lt;a href=&quot;https://smcp.dev/yt&quot;&gt;smcp.dev/yt&lt;/a&gt;! To add a new URL, you can add a new line to the &lt;code&gt;_redirect&lt;/code&gt; file manually or use the &lt;a href=&quot;https://github.com/kentcdodds/netlify-shortener#usage&quot;&gt;&lt;code&gt;shorten&lt;/code&gt; script&lt;/a&gt;(if you added it)&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Happy shortening!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Add Heroicons to an Eleventy site</title>
            <link href="https://seanmcp.com/articles/add-heroicons-to-an-eleventy-site/"/>
            <updated>2021-03-09T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/add-heroicons-to-an-eleventy-site/</id>
            <content type="html">&lt;p&gt;In a recent &lt;a href=&quot;https://11ty.dev/&quot;&gt;Eleventy&lt;/a&gt; project, I wanted an easy way to add &lt;a href=&quot;https://heroicons.com/&quot;&gt;Heroicons&lt;/a&gt;. That lead me to creating an Eleventy plugin that adds some handy Heroicon shortcodes. Here‚Äôs how to get started:&lt;/p&gt;
&lt;p&gt;First, install &lt;a href=&quot;https://npm.im/eleventy-plugin-heroicons&quot;&gt;&lt;code&gt;eleventy-plugin-heroicons&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i -D eleventy-plugin-heroicons&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, add the plugin to your &lt;code&gt;.eleventy.js&lt;/code&gt; settings file with any other plugins:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// .eleventy.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;eleventy-plugin-heroicons&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that in place, you are ready to use the &lt;code&gt;heroicon&lt;/code&gt; shortcode. Head over to a markdown or template file and try it out:&lt;/p&gt;
&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- contact.md --&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; {% heroicon &quot;outline&quot;, &quot;mail&quot; %} Send me an email&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These examples are using Nunjucks syntax. If you are using Liquid, you can reference the official documentation for examples.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;heroicon&lt;/code&gt; shortcode takes a few arguments:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The style of icon (outline or solid)&lt;/li&gt;
&lt;li&gt;The name of the icon&lt;/li&gt;
&lt;li&gt;An optional alt tag for the SVG&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To save yourself a bit of time, you can use the &lt;code&gt;heroicon_outline&lt;/code&gt; or &lt;code&gt;heroicon_solid&lt;/code&gt; shortcodes which pass the style automatically. We could replace the previous example with:&lt;/p&gt;
&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- contact.md --&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; {% heroicon_outline &quot;mail&quot; %} Send me an email&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And it would work the same.&lt;/p&gt;
&lt;p&gt;If you use the shortcode without alt text, and &lt;code&gt;aria-hidden=&amp;quot;true&amp;quot;&lt;/code&gt; attribute is applied to the &lt;code&gt;svg&lt;/code&gt; element. When alt text is provided, a &lt;code&gt;title&lt;/code&gt; element is added as the first child to the &lt;code&gt;svg&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Input --&gt;&lt;/span&gt;&lt;br /&gt;{% heroicon_outline &quot;heart&quot;, &quot;Love&quot; %}&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Output --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 24 24&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;currentColor&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token attr-name&quot;&gt;data-heroicon-name&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;heart&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token attr-name&quot;&gt;data-heroicon-style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;outline&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Love&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;stroke-linecap&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;round&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;stroke-linejoin&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;round&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will enable screen-reader and other assistive technology users to understand what the icon represents. Without an alt tag, you‚Äôll want to make sure that the meaning can be derived from context:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  {% heroicon_solid &quot;plus&quot; %}&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Add item&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  {% heroicon_solid &quot;x&quot; %}&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;visually-hidden&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Close menu&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All of the icons have &lt;code&gt;data-heroicon-name&lt;/code&gt; and &lt;code&gt;data-heroicon-style&lt;/code&gt; attributes applied to the &lt;code&gt;svg&lt;/code&gt; that you can use for styling:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;[data-heroicon-style=&quot;outline&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 24px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;[data-heroicon-style=&quot;solid&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;[data-heroicon-name]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you‚Äôd prefer to use a class name, you can pass one on a configuration object while adding the plugin:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// .eleventy.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;eleventy-plugin-heroicons&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;icon&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is also &lt;a href=&quot;https://github.com/SeanMcP/eleventy-plugin-heroicons#configuration&quot;&gt;an option to &lt;code&gt;errorOnMissing&lt;/code&gt; icons&lt;/a&gt;, which might be nice to ensure that all icons display as intended.&lt;/p&gt;
&lt;p&gt;Hopefully that helps! Let me know if you have any suggestions for the package. &lt;a href=&quot;https://github.com/SeanMcP/eleventy-plugin-heroicons/pulls&quot;&gt;PRs are most welcome &lt;span aria-hidden=&quot;true&quot; class=&quot;eleventy-emoji&quot; role=&quot;img&quot;&gt;üòä&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Copy the last git commit hash on macOS</title>
            <link href="https://seanmcp.com/articles/copy-the-last-git-commit-hash-on-macos/"/>
            <updated>2021-03-24T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/copy-the-last-git-commit-hash-on-macos/</id>
            <content type="html">&lt;p&gt;When responding to code-review requests, I like to point the reviewer to the specific commit where the issue was addressed with a message like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fixed in 4908c91a06258814077b1358210eb78cc718609c&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;GitHub will automatically detect the hash, shorten it, and convert it into a link to the commit view.&lt;/p&gt;
&lt;p&gt;Rather than going into &lt;code&gt;git log&lt;/code&gt; and copying the hash manually, I use the following one-liner in the terminal on macOS:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; rev-parse HEAD &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; pbcopy&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first half of the command returns the last commit hash from &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Internals-Git-References#ref_the_ref&quot;&gt;&lt;code&gt;HEAD&lt;/code&gt;&lt;/a&gt;, which is a reference to the current branch. You could use &lt;code&gt;git rev-parse name_of_branch&lt;/code&gt; too, but that is often longer to type.&lt;/p&gt;
&lt;p&gt;The output of &lt;code&gt;git rev-parse&lt;/code&gt; is then piped to &lt;a href=&quot;https://ss64.com/osx/pbcopy.html&quot;&gt;&lt;code&gt;pbcopy&lt;/code&gt;&lt;/a&gt;, the clipboard utility for macOS. If you were using a different platform like Unix or Windows, there are &lt;a href=&quot;https://stackoverflow.com/questions/749544/pipe-to-from-the-clipboard-in-bash-script&quot;&gt;other options for you&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To save some more time, I added an alias my shell‚Äôs rc file:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# git last commit (hash)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;glc&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;git rev-parse HEAD | pbcopy&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy copying!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>COVID-19 journal</title>
            <link href="https://seanmcp.com/articles/covid-19-journal/"/>
            <updated>2021-03-24T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/covid-19-journal/</id>
            <content type="html">&lt;p&gt;I tested positive for COVID-19 in November of 2020, a few weeks after the birth of my second son. My wife was the first in our household to show symptoms, and I followed a few days later.&lt;/p&gt;
&lt;p&gt;Most of my symptoms were mild. I had full-body aches and congestion but no fever nor loss of taste. The most dramatic symptom was fatigue that came in waves for the duration of my illness. I would go from feeling mostly fine, to feeling like I didn‚Äôt have the energy to situp, then back to mostly fine in the span of thirty minutes. I‚Äôm thankful that I was on parental leave for the whole duration of my illness, because I would have been unable to work effectively through the waves of fatigue.&lt;/p&gt;
&lt;p&gt;Once I recovered, that seemed to be the end of it. I warned by coworkers to take the virus seriously (they already were) and tried to be especially careful during the holidays.&lt;/p&gt;
&lt;p&gt;Fast-forward to March of 2021, and now a new symptom has emerged. There are now certain scents that have changed for the worse: bananas, toothpaste, and shampoo. They all share the same smell, and it is quite unpleasant. A kind of savory/overly-ripe odor that I am keen to avoid. I used to eat a banana a day (or more), and now I can‚Äôt stand to be too near to them.&lt;/p&gt;
&lt;p&gt;I have heard that some people report a return to normal taste and smell after being vaccinated. Hopefully that is true, because I‚Äôd really like to enjoy eating bananas and brushing my teeth again.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In April of 2021, I got the first round of the Moderna COVID-19 vaccine. By the following morning, I experienced some typical ‚Äúflu-like‚Äù symptoms: fatigue, full-body soreness, and skin sensitivity. The injection site ‚Äì¬†my left shoulder ‚Äì was especially sore. By day two, most of the symptoms had resided.&lt;/p&gt;
&lt;p&gt;Bananas, shampoo, and toothpaste still smell odd but to a lesser degree. I‚Äôm optimistic that that will improve in the coming weeks! The second round of vaccination is scheduled for early May ‚Äì¬†four weeks after the first round. By then, Lord willing, I‚Äôll be back to a banana a day!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Fix Netlify CMS YAML error &#39;Implicit map keys need to be on a single line&#39;</title>
            <link href="https://seanmcp.com/articles/fix-netlify-cms-yaml-error-implicit-map-keys-need-to-be-on-a-single-line/"/>
            <updated>2021-03-25T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/fix-netlify-cms-yaml-error-implicit-map-keys-need-to-be-on-a-single-line/</id>
            <content type="html">&lt;p&gt;When trying to setup Netlify CMS on a project, I kept getting this error on the &lt;code&gt;/admin&lt;/code&gt; page:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error loading the CMS configuration
Config Errors:

YAMLSemanticError: Implicit map keys need to be on a single line at line 1, column 1:

&amp;lt;!DOCTYPE html&amp;gt;
^^^^^^^^^^^^^^^‚Ä¶

Check your config.yml file.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I checked and doubled checked the YAML in my &lt;code&gt;config.yml&lt;/code&gt; file, and everything was valid. I went through the Netlify Identity steps to verify that they were followed correctly, but that didn‚Äôt help either.&lt;/p&gt;
&lt;p&gt;Googling the error message brought up nothing useful.&lt;/p&gt;
&lt;p&gt;Then it occurred to me: ‚ÄúWhat if Netlify CMS isn‚Äôt getting the config file at all?‚Äù&lt;/p&gt;
&lt;p&gt;Sure enough, my static-site generator was skipping the unrecognized &lt;code&gt;.yml&lt;/code&gt; file when building the site. I added the configuration to copy that file to the build folder, and &lt;em&gt;voil√†&lt;/em&gt;: everything works as expected.&lt;/p&gt;
&lt;p&gt;So if you are getting the same error, check to make sure that the &lt;code&gt;config.yml&lt;/code&gt; file is making it to your built &lt;code&gt;admin/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Happy debugging!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Fix &#39;downloadable font: rejected by sanitizer&#39; error in Firefox</title>
            <link href="https://seanmcp.com/articles/fix-downloadable-font-rejected-by-sanitizer-error-in-firefox/"/>
            <updated>2021-04-01T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/fix-downloadable-font-rejected-by-sanitizer-error-in-firefox/</id>
            <content type="html">&lt;p&gt;I ran into an issue today when I tried to serve a typeface I downloaded from Google Fonts. When I added the files and &lt;code&gt;@font-face&lt;/code&gt; rules to my CSS, I got the following error in the Firefox console:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;downloadable font: rejected by sanitizer
    (font-family: &amp;quot;Inter&amp;quot; style:normal weight:400 stretch:100 src index:0)
    source: http://localhost:8080/fonts/Inter-Regular.ttf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Chrome console had nothing, so I figured this was a Firefox issue. After some searching around, I learned that &lt;a href=&quot;https://support.mozilla.org/en-US/questions/913498&quot;&gt;Firefox is checking&lt;/a&gt; that a font file is valid before loading it, which can protect you against some attacks.&lt;/p&gt;
&lt;p&gt;Inter is a pretty popular typeface, so I ruled out corrupt or malicious font files. Further digging lead me to some solutions, but &lt;a href=&quot;https://github.com/FortAwesome/Font-Awesome/issues/8078&quot;&gt;they seemed&lt;/a&gt; &lt;a href=&quot;https://stackoverflow.com/questions/57835543/how-to-fix-downloadable-font-rejected-by-sanitizer&quot;&gt;situation specific&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was prepared to live with the error, when I gave it one last look. The source url (which I‚Äôve wrapped here but was broken on two lines in the console) was incorrect. The path to the font files should have been &lt;code&gt;assets/fonts/Inter-Regular.ttf&lt;/code&gt;. Fixing that path in &lt;code&gt;@font-face&lt;/code&gt;‚Äôs &lt;code&gt;src&lt;/code&gt; resolved the issue.&lt;/p&gt;
&lt;p&gt;If you encounter a similar error, check to make sure that the path to your font file is correct. It would be helpful if the message was more descriptive: ‚Äúdownloadable font: rejected by sanitizer (file not found)‚Äù.&lt;/p&gt;
&lt;p&gt;Happy font serving!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Read URL search parameters with JavaScript</title>
            <link href="https://seanmcp.com/articles/read-url-search-parameters-with-javascript/"/>
            <updated>2021-05-01T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/read-url-search-parameters-with-javascript/</id>
            <content type="html">&lt;div id=&quot;params-message&quot; hidden=&quot;&quot;&gt;
    &lt;h2&gt;Hello search params!&lt;/h2&gt;
    &lt;p&gt;The following parameters were detected on this page:&lt;/p&gt;
    &lt;ul id=&quot;params-list&quot;&gt;&lt;/ul&gt;
    &lt;p&gt;To learn how I did this, read on or inspect the source code for this page.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Search parameters, or query strings, are handy ways to store data on URLs. JavaScript provides an interface for reading search parameters called &lt;code&gt;URLSearchParams&lt;/code&gt;. To use it, create an instance with the &lt;code&gt;new&lt;/code&gt; keyword and pass your search parameter string as an argument:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;?name=Sam&amp;amp;name=Ezra&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; usp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The returned &lt;code&gt;URLSearchParams&lt;/code&gt; object has a few &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#methods&quot;&gt;a bunch of useful methods&lt;/a&gt;, but we‚Äôre going to focus on three:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get()&lt;/code&gt;: Returns the first value for a particular key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getAll()&lt;/code&gt;: Returns all of the values for a particular key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forEach()&lt;/code&gt;: Iterates over keys with a callback that receives &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I call the &lt;code&gt;get()&lt;/code&gt; method for &lt;code&gt;name&lt;/code&gt;, then it will return the first value from my search parameter string:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;usp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// &#39;Sam&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you are dealing with unique parameters, this method is all you need to get the job done. But in our example, there are multiple names being passed. To retrieve all of those values, we will call &lt;code&gt;getAll()&lt;/code&gt; with &lt;code&gt;name&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;usp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// [&#39;Sam&#39;, &#39;Ezra&#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are working with a few exact keys, you can probably stop there. But if you are dealing with a lot of keys or just want an easier way to read search parameters, you can use a helper function that iterates over all of the keys and stores them in an object:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt; * Read the search parameters from window location&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; usp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    usp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;            params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        params&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; params&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then call the function whenever you need to reference the current location‚Äôs search parameters:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// https://seanmcp.com/articles/read-url-search-parameters-with-javascript/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// ?greeting=Hello&amp;amp;name=World&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;readSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;greeting&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// [&#39;Hello&#39;]&lt;/span&gt;&lt;br /&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//[&#39;World&#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see it in action, try going to &lt;a href=&quot;https://seanmcp.com/articles/read-url-search-parameters-with-javascript/?greeting=Hello&amp;amp;name=World&quot;&gt;that url&lt;/a&gt;, or try adding your own search parameters.&lt;/p&gt;
&lt;p&gt;Happy reading!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Handy git commands</title>
            <link href="https://seanmcp.com/articles/handy-git-commands/"/>
            <updated>2021-05-04T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/handy-git-commands/</id>
            <content type="html">&lt;p&gt;Here are some of the git commands that I find useful when doing by work as a software engineer. Hopefully you will find them helpful too!&lt;/p&gt;
&lt;h2 id=&quot;commands&quot; tabindex=&quot;-1&quot;&gt;Commands&lt;/h2&gt;
&lt;h3 id=&quot;git-checkout--&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;git checkout -&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Quick: Checkout the previous branch&lt;/p&gt;
&lt;p&gt;This is super handy when working with long or unwieldy branch names. With the &lt;code&gt;-&lt;/code&gt; reference, you can convert the following set of commands into a reusable alias:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout dev &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; pull &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; checkout - &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; merge dev&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;git-checkout----.&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;git checkout -- .&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Quick: Delete all changes in the current branch&lt;/p&gt;
&lt;p&gt;When you just want to start from scratch on the current branch, this command is a huge timesaver. The &lt;code&gt;--&lt;/code&gt; refers to the current branch, while the &lt;code&gt;.&lt;/code&gt; refers to all files. If you want to reset a particular file, you could swap the name with the &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;git-commit--m-%22init%22---allow-empty&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;git commit -m &amp;quot;init&amp;quot; --allow-empty&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Quick: Create a commit with no changes&lt;/p&gt;
&lt;p&gt;When starting on a development task, sometimes it‚Äôs nice to set up branches and PRs before getting started on the work. The &lt;code&gt;--allow-empty&lt;/code&gt; flag enables you to create commits without changing any files.&lt;/p&gt;
&lt;p&gt;I use this when I have a feature branch that will be the target of bunch of smaller branches. Initializing a those with an empty commit helps be get organized in the beginning.&lt;/p&gt;
&lt;h3 id=&quot;git-diff-branch_name--s-%22todo%3A%22&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;git diff branch_name -S &amp;quot;TODO:&amp;quot;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Quick: Search the diff between the current branch and &lt;code&gt;branch_name&lt;/code&gt; for all strings matching &lt;code&gt;TODO:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When working on a new feature, I like to leave myself todos to address before the branch is merged. Tracking these down can be tricky because there are other &lt;code&gt;TODO:&lt;/code&gt;s in the codebase. I used to &lt;code&gt;grep&lt;/code&gt; through the diff, but git‚Äôs &lt;code&gt;-S&lt;/code&gt; flag is much easier.&lt;/p&gt;
&lt;h3 id=&quot;git-diff-branch_name--g-%22%2F*-action%22&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;git diff branch_name -G &amp;quot;/*-action&amp;quot;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Quick: Search the diff between the current branch and &lt;code&gt;branch_name&lt;/code&gt; for all strings matching the &lt;code&gt;/*-action&lt;/code&gt; RegEx pattern&lt;/p&gt;
&lt;p&gt;Similar to the &lt;code&gt;-S&lt;/code&gt; flag, &lt;code&gt;-G&lt;/code&gt; lets you search through the diff using RegEx. I don‚Äôt know too much about regular expressions, but it‚Äôs nice to have the option in your toolbelt.&lt;/p&gt;
&lt;h3 id=&quot;git-log---before%3D%222021-01-01-00%3A00%22&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;git log --before=&amp;quot;2021-01-01 00:00&amp;quot;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Quick: Limit the log output to all commits before the provided date.&lt;/p&gt;
&lt;p&gt;This is handy when you want to look at commits from a particular date or before a date (and/or after with &lt;code&gt;--after=&lt;/code&gt;).&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Let me know if you have &lt;a href=&quot;https://seanmcp.com/articles/handy-git-commands/#comment-link&quot;&gt;any commands to add to the list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy versioning!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Latin phrases to know</title>
            <link href="https://seanmcp.com/articles/latin-phrases-to-know/"/>
            <updated>2021-06-07T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/latin-phrases-to-know/</id>
            <content type="html">&lt;h2 id=&quot;phrases&quot; tabindex=&quot;-1&quot;&gt;Phrases&lt;/h2&gt;
&lt;h3 id=&quot;ad-hoc-ergo-propter-hoc&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;ad hoc ergo propter hoc&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;‚ÄúAfter that, because of that‚Äù&lt;/p&gt;
&lt;h3 id=&quot;ad-nauseum&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;ad nauseum&lt;/em&gt;&lt;/h3&gt;
&lt;h3 id=&quot;ceteris-paribus&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;ceteris paribus&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;‚ÄúAll other things constant‚Äù&lt;/p&gt;
&lt;h3 id=&quot;et-al&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;et al&lt;/em&gt;&lt;/h3&gt;
&lt;h3 id=&quot;et-cetera&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;et cetera&lt;/em&gt;&lt;/h3&gt;
</content>
        </entry>
        
        <entry>
            <title>A modest redesign for 2021</title>
            <link href="https://seanmcp.com/articles/a-modest-redesign-for-2021/"/>
            <updated>2021-06-15T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/a-modest-redesign-for-2021/</id>
            <content type="html">&lt;p&gt;It had been a minute since I last worked on the design for this site, so I decided to make some changes for 2021. I didn‚Äôt want to undertake anything major ‚Äì just tweak a few things to freshen everything up.&lt;/p&gt;
&lt;p&gt;A few of the changes are a return to previous designs: I brought the scroll progress bar (top of the screen) and centered the content. I lightened the default background color and reduced the size of the headings.&lt;/p&gt;
&lt;p&gt;There are two new features that I added, and the most notable of which is the light/dark mode toggle in the header. Under the hood, this is a checkbox with a &lt;code&gt;change&lt;/code&gt; event listener that persists state in &lt;code&gt;localStorage&lt;/code&gt;. The boxes are 100% CSS with &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo elements with a small transition. Pretty neat what can be done with CSS and a teeny bit of JavaScript!&lt;/p&gt;
&lt;p&gt;The other new feature is a search listbox on &lt;a href=&quot;https://seanmcp.com/articles/&quot;&gt;/articles&lt;/a&gt;. Rather than implement something super complex, I opted for a search &lt;code&gt;input&lt;/code&gt; with a &lt;code&gt;datalist&lt;/code&gt; of articles. I added an event listener that redirects when an article is selected. You can &lt;a href=&quot;https://seanmcp.com/js/article-search.js&quot;&gt;view the implementation&lt;/a&gt; in &lt;code&gt;article-search.js&lt;/code&gt;. This is a pattern that I‚Äôve used twice now and might warrant its own article.&lt;/p&gt;
&lt;p&gt;Beyond that, I updated some of the copy, changed the links in the header, included a picture to the &lt;a href=&quot;https://seanmcp.com/about/&quot;&gt;/about&lt;/a&gt; page, and added a new page for my &lt;a href=&quot;https://seanmcp.com/are-you-looking-for-work/&quot;&gt;work availability (hey recruiters!)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overall, I‚Äôm pretty happy with how the redesign turned out. We‚Äôll see how long that contentedness lasts!&lt;/p&gt;
&lt;p&gt;Happy reading!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Count class methods in JavaScript</title>
            <link href="https://seanmcp.com/articles/count-class-methods-in-javascript/"/>
            <updated>2021-06-21T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/count-class-methods-in-javascript/</id>
            <content type="html">&lt;p&gt;If you have a class in JavaScript and want to know the number of methods it contains, there are a few steps that you need to follow.&lt;/p&gt;
&lt;p&gt;Let‚Äôs say we have a class like the following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pet&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; comes running&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We don‚Äôt have handy tools like &lt;code&gt;Object.keys()&lt;/code&gt; for classes, so to count the number of methods in our &lt;code&gt;Pet&lt;/code&gt; class, we need to first create an instance:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; abby &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Abby&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can pass our instance to two &lt;code&gt;Object&lt;/code&gt; methods that will grab the methods for us:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;abby&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns an array of property names for the prototype of &lt;code&gt;abby&lt;/code&gt;, which is the following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;constructor&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;call&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you‚Äôre dealing with a simple class like the example above, you can add a &lt;code&gt;.length&lt;/code&gt; to the end of the returned array and be done.&lt;/p&gt;
&lt;p&gt;However, if you are dealing with subclasses, you may want to go a little deeper.&lt;/p&gt;
&lt;p&gt;Let‚Äôs update the example so that the class who‚Äôs methods you want to count extends another:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pet&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39; comes running&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pet&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;pet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; wags its tail&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if we try the following code with &lt;code&gt;abby&lt;/code&gt; the &lt;code&gt;Dog&lt;/code&gt;, we get a different answer:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; abby &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Abby&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;abby&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// [&#39;constructor&#39;, &#39;pet&#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We lost the methods on the parent &lt;code&gt;Pet&lt;/code&gt; class. To grab those too, we can create a reusable function to dive through the prototype chain:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;countClassMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; methods &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; keepDiving &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_class&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keepDiving&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOwnPropertyNames&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; methods&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    prototype &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__proto__&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; keepDiving &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; methods&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function takes a class and grabs its prototype. Then in a &lt;code&gt;while&lt;/code&gt; loop, it iterates through the prototype‚Äôs property names and adds them to a set. It then looks ahead to the next prototype to determine whether it should continue. If the next prototype‚Äôs &lt;code&gt;__proto__&lt;/code&gt; property is falsy, then leave the loop and return the size of the set.&lt;/p&gt;
&lt;p&gt;If you want to see a list of the methods, you could rename the function and return &lt;code&gt;[...methods]&lt;/code&gt; or do something with &lt;code&gt;method.values()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now when I call my function with an instance of the &lt;code&gt;Dog&lt;/code&gt; class, I get the answer that I‚Äôm expecting:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; abby &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Abby&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;countClassMethods&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;abby&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 3&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Values: [&#39;constructor&#39;, &#39;pet&#39;, &#39;call&#39;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a pretty niche scenario, but I hope that is helpful for someone else.&lt;/p&gt;
&lt;p&gt;Happy counting!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Use remark to covert markdown into HTML</title>
            <link href="https://seanmcp.com/articles/use-remark-to-covert-markdown-into-html/"/>
            <updated>2021-07-03T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/use-remark-to-covert-markdown-into-html/</id>
            <content type="html">&lt;p&gt;I‚Äôve used &lt;a href=&quot;https://npm.im/remark&quot;&gt;remark&lt;/a&gt; in a few different projects, and each time I found it difficult to get started. For such a popular project, the &lt;a href=&quot;https://remark.js.org/&quot;&gt;documentation is quite terse&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To save myself the trouble of looking up how to do it in the future, here are the basic steps you need to get started converting markdown to HTML with remark.&lt;/p&gt;
&lt;p&gt;First, install remark dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i remark remark-html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will need the core library and a plugin for generating HTML. Then, import your dependencies and use them like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; remark &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;remark&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; remarkHTML &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;remark-html&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; html &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;remark&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;remarkHTML&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;processSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Some **markdown** text&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That‚Äôs all you need to get going. To help jump-start your progress, checkout this working &lt;a href=&quot;https://replit.com/@SeanMcP/remark-example#index.js&quot;&gt;repl in Node.js&lt;/a&gt; or &lt;a href=&quot;https://codesandbox.io/s/react-remark-example-kofy0&quot;&gt;sandbox in React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hope this guide helps you get up and running too!&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Get innerHTML of Enzyme wrapper</title>
            <link href="https://seanmcp.com/articles/get-innerhtml-of-enzyme-wrapper/"/>
            <updated>2021-07-12T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/get-innerhtml-of-enzyme-wrapper/</id>
            <content type="html">&lt;p&gt;In Enzyme, wrapper‚Äôs have a handle &lt;code&gt;.html()&lt;/code&gt; method that will return the &lt;code&gt;outerHTML&lt;/code&gt; for that element in the tree. It‚Äôs handy in the rare instance when the markup that your code outputs needs to be precise. You can &lt;a href=&quot;https://enzymejs.github.io/enzyme/docs/api/ShallowWrapper/html.html&quot;&gt;read more about in the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, there isn‚Äôt a method that returns the &lt;code&gt;innerHTML&lt;/code&gt;. A use case I came across for this was caring about the children of an element, but not caring about the element itself. I didn‚Äôt want this test to fail if I needed to add an attribute to the parent element, only if the children changed.&lt;/p&gt;
&lt;p&gt;So I wrote this little helper function to grab the &lt;code&gt;innerHTML&lt;/code&gt; of a shallow wrapper in Enzyme:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getInnerHTML&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;string&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// A text node&#39;s html method doesn&#39;t return&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;// anything, so we use text instead.&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; string &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There might be other strategies using some of Enzyme‚Äôs built-in methods like &lt;code&gt;.reduce()&lt;/code&gt; or &lt;code&gt;.forEach()&lt;/code&gt;, so let me know if you come up with a better alternative.&lt;/p&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Add a YouTube-embedder shortcode to your Eleventy site</title>
            <link href="https://seanmcp.com/articles/add-a-youtube-embedder-shortcode-to-your-eleventy-site/"/>
            <updated>2021-08-10T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/add-a-youtube-embedder-shortcode-to-your-eleventy-site/</id>
            <content type="html">&lt;p&gt;For a recent article, I wanted to add some embedded YouTube videos. Through the share menu beneath the video, you can select ‚ÄúEmbed‚Äù to copy and paste the code for an &lt;code&gt;iframe&lt;/code&gt; that will load the YouTube video.&lt;/p&gt;
&lt;p&gt;That works well, but if you want to customize that code at all for embedded videos, you need to remember to do that every time you copy and paste it into one of your pages. Rather than fiddling with that, I decided to create a custom shortcode to handle all of that for me.&lt;/p&gt;
&lt;p&gt;Here is the code for my Eleventy site, but with a little tweaking you could make this work for any static-site generator:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// .eleventy.js&lt;/span&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addShortcode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;youtube&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;videoURL&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;videoURL&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;searchParams&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;v&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;&amp;lt;iframe class=&quot;yt-shortcode&quot; src=&quot;https://www.youtube-nocookie.com/embed/&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; title=&quot;YouTube video player&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;br /&gt;      title &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; for &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;title&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&amp;lt;/iframe&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I removed a lot of the default permissions from the YouTube embed code, and opted for &lt;code&gt;youtube-nocookie.com&lt;/code&gt; instead to save my visitors from some tracking. You can &lt;a href=&quot;https://dri.es/how-to-remove-youtube-tracking&quot;&gt;read more about that on Dries Buytaert‚Äôs blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With that shortcode added, you can use it in any of your template files with the &lt;code&gt;{% youtube %}&lt;/code&gt; syntax:&lt;/p&gt;
&lt;pre class=&quot;language-md&quot;&gt;&lt;code class=&quot;language-md&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- With title --&gt;&lt;/span&gt;&lt;br /&gt;{% youtube &quot;https://www.youtube.com/watch?v=DhKHAopx7D0&quot;, &quot;&#39;Time Bomb&#39; by&lt;br /&gt;Rancid&quot; %}&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Without title --&gt;&lt;/span&gt;&lt;br /&gt;{% youtube &quot;https://www.youtube.com/watch?v=LnaeImQ0TSg&quot; %}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, I added a bit of CSS to help the videos look good on my site. These styles might be different for your site:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;iframe.yt-shortcode&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1rem 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;max-height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if I want to change the way I handle YouTube embeds, I need only to change the code in one place. Hope that helps!&lt;/p&gt;
&lt;p&gt;Happy embedding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>What is the song from Boston Dynamic&#39;s Spot Launch video?</title>
            <link href="https://seanmcp.com/articles/what-is-the-song-from-boston-dynamics-spot-launch-video/"/>
            <updated>2021-08-10T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/what-is-the-song-from-boston-dynamics-spot-launch-video/</id>
            <content type="html">&lt;p&gt;My three-year-old son &lt;em&gt;really&lt;/em&gt; likes Boston Dynamics videos. He frequently requests to watch them and will parade around the house as Spot, Atlas, or Stretch/Handle. As far as little kid fixations on machines go, I think robots are a pretty cool option; he‚Äôs much more likely to work on/with robots in the future than steam engines!&lt;/p&gt;
&lt;p&gt;One video he likes is &lt;a href=&quot;https://www.youtube.com/watch?v=wlkCQXHEgjA&quot;&gt;&lt;em&gt;Spot Launch&lt;/em&gt;&lt;/a&gt;, which features the titular robot navigating through a bunch of simulated work environments. It‚Äôs an entertaining video, and my son really likes dancing to the song.&lt;/p&gt;
&lt;p&gt;The song wasn‚Äôt listed in the video description, and I couldn‚Äôt find an answer via a Google search. I did find &lt;a href=&quot;https://www.reddit.com/r/NameThatSong/comments/isqmyu/what_is_the_song_in_the_spot_launch_ad_from/&quot;&gt;two unanswered&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/Music/comments/d9fn4j/help_identifying_song_from_spot_launch_boston/&quot;&gt;archived questions&lt;/a&gt; on Reddit asking for help identifying the song.&lt;/p&gt;
&lt;p&gt;With my wife‚Äôs help, I tried using the &lt;a href=&quot;https://blog.google/products/search/hum-to-search/&quot;&gt;Google app‚Äôs music recognition feature&lt;/a&gt;. I played the YouTube video on my phone, and she let the app listen on hers. Within 5 seconds, Google had identified the song as &lt;a href=&quot;https://www.youtube.com/watch?v=tZaAmapkp4Q&quot;&gt;&lt;em&gt;Banana&lt;/em&gt; by Stony Pony&lt;/a&gt;. Neat!&lt;/p&gt;
&lt;p&gt;Here are the two videos for comparison:&lt;/p&gt;
&lt;iframe class=&quot;yt-shortcode&quot; src=&quot;https://www.youtube-nocookie.com/embed/tZaAmapkp4Q&quot; title=&quot;YouTube video player for &#39;Banana&#39; by Stony Pony&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;iframe class=&quot;yt-shortcode&quot; src=&quot;https://www.youtube-nocookie.com/embed/wlkCQXHEgjA&quot; title=&quot;YouTube video player for &#39;Spot Launch&#39; by Boston Dynamics&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;The version in the Boston Dynamics video has removed the word ‚ÄúBanana‚Äù a few times, but it is otherwise the same song.&lt;/p&gt;
&lt;p&gt;It‚Äôs too late to answer those Reddit questions, but I added &lt;a href=&quot;https://www.youtube.com/watch?v=wlkCQXHEgjA&amp;amp;lc=UgwqRUzrTpMJJlVCMQt4AaABAg&quot;&gt;a comment to the video on YouTube&lt;/a&gt;. And hopefully the next person searching stumbles upon that or this article.&lt;/p&gt;
&lt;p&gt;Happy listening!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>What is Hermes in React Native?</title>
            <link href="https://seanmcp.com/articles/what-is-hermes-in-react-native/"/>
            <updated>2021-08-17T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/what-is-hermes-in-react-native/</id>
            <content type="html">&lt;p&gt;React Native is framework for building Android and iOS application using React and native capabilities. It allows developers to write JavaScript code that will interact with platform APIs and native components to build interactive user interfaces.&lt;/p&gt;
&lt;p&gt;To accomplish that, React Native needs an engine to run JavaScript code on mobile devices. Apple includes &lt;a href=&quot;https://developer.apple.com/documentation/javascriptcore&quot;&gt;JavaScriptCore (JSCore) on iOS devices&lt;/a&gt;, but &lt;a href=&quot;https://stackoverflow.com/questions/8374016/how-to-execute-javascript-on-android&quot;&gt;Android does not have a JavaScript engine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So React Native included a version of JSCore in Android builds to execute JavaScript. This resulted in larger Android application packages (APKs) for React Native apps, and some noticeable performance issues.&lt;/p&gt;
&lt;p&gt;In 2019, the &lt;a href=&quot;https://reactnative.dev/blog/2019/07/17/hermes&quot;&gt;React Native team announced Hermes&lt;/a&gt; as ‚Äúa new JavaScript engine optimized for React Native.‚Äù Android apps built with React Native and Hermes were &lt;a href=&quot;https://engineering.fb.com/2019/07/12/android/hermes/&quot;&gt;smaller, interactive faster, and used less memory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/react-native-community/releases/blob/master/CHANGELOG.md#v0601&quot;&gt;React Native version 0.60.1&lt;/a&gt; (2019) replaced JSCore with Hermes for Android builds. Later in version 0.64 (2021), React Native added &lt;a href=&quot;https://reactnative.dev/blog/2021/03/12/version-0.64&quot;&gt;support for Hermes on iOS&lt;/a&gt;. &lt;a href=&quot;https://reactnative.dev/blog/2021/03/12/version-0.64#hermes-opt-in-on-ios&quot;&gt;With one small change to your project‚Äôs &lt;code&gt;Podfile&lt;/code&gt;&lt;/a&gt;, you can include Hermes to improve your app‚Äôs performance:&lt;/p&gt;
&lt;pre class=&quot;language-ruby&quot;&gt;&lt;code class=&quot;language-ruby&quot;&gt;use_react_native&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token symbol&quot;&gt;:path&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token symbol&quot;&gt;:reactNativePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token comment&quot;&gt;# to enable hermes on iOS, change `false` to `true` and then install pods&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token symbol&quot;&gt;:hermes_enabled&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You‚Äôll want to do some profiling of iOS apps with JSCore and Hermes before committing to the change, but it is exciting to see more alignment between the two platforms.&lt;/p&gt;
&lt;p&gt;To read more information about to use Hermes and how to debug it, &lt;a href=&quot;https://reactnative.dev/docs/hermes&quot;&gt;check out the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Reflecting on a new role</title>
            <link href="https://seanmcp.com/articles/reflections-on-a-new-role/"/>
            <updated>2021-08-18T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/reflections-on-a-new-role/</id>
            <content type="html">&lt;p&gt;Recently I accepted a new position at Niche as a senior mobile software engineer. I will take the reigns of our mobile app (&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.nicheinc.nichealpha&quot;&gt;Android&lt;/a&gt;, &lt;a href=&quot;https://apps.apple.com/us/app/niche-colleges-k-12-places/id1356697847&quot;&gt;iOS&lt;/a&gt;) and work on a dedicated product team building new features for our users. This is a shift in focus for my career but not uncharted territory.&lt;/p&gt;
&lt;p&gt;While working for TSYS in 2018, I helped work on an unnamed mobile app in the consumer finance space. After joining Niche in 2019, I helped implement Apple Sign-In in our app and resolved some other issues. Now that I am fully dedicated to working on the mobile app, I‚Äôm looking forward to building new things and learning lots along the way.&lt;/p&gt;
&lt;p&gt;I‚Äôm going to start sharing more mobile and React Native articles on this site as I learn. The first of those came out earlier this week: &lt;a href=&quot;https://seanmcp.com/articles/what-is-hermes-in-react-native&quot;&gt;&lt;em&gt;What is Hermes in React Native?&lt;/em&gt;&lt;/a&gt;. Some of the information may be applicable in React contexts, so I‚Äôll try to &lt;a href=&quot;https://seanmcp.com/tags/&quot;&gt;tag articles appropriately&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That said, I‚Äôm not leaving the web world entirely. &lt;a href=&quot;https://chrome.google.com/webstore/detail/popsicle-sticks-random-st/lnckbgaeagindapiodcmccfokcmnfecm&quot;&gt;A Chrome extension for teachers&lt;/a&gt; that I launched in 2018 has over 10,000 weekly users during the school year, and I just released a new version with some great features. I‚Äôm committed to continued development on that and &lt;a href=&quot;https://toollama.com/&quot;&gt;all the other tools I‚Äôve created&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am so grateful for the opportunities that I have been given in software development. From the ability to attend a coding bootcamp full-time, to that first developer job with TSYS, to a new position closer to home with Niche, and now greater acclaim and responsibility at a company that is going places. If any one of those doors had been closed, then my situation now could look completely different.&lt;/p&gt;
&lt;p&gt;It‚Äôs humbling to remember that I don‚Äôt deserve any of this; it‚Äôs ultimately grace. But now my responsibility is to do the best I can with all that God has given me. To Him be the glory, now and forever. Amen.&lt;/p&gt;
&lt;p&gt;If you‚Äôre reading this and have experience working in mobile development or with React Native, &lt;a href=&quot;https://seanmcp.com/articles/reflections-on-a-new-role/#comment-link&quot;&gt;then please reach out&lt;/a&gt;. I‚Äôd love to pick your brain for a bit.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Using BEM names in React Native</title>
            <link href="https://seanmcp.com/articles/using-bem-names-in-react-native/"/>
            <updated>2021-09-10T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/using-bem-names-in-react-native/</id>
            <content type="html">&lt;p&gt;When writing CSS classes, I prefer BEM‚Äôs naming system. The pattern is clear to read and names are easy to generate. I believe the unwieldy length of some names is offset by the benefits.&lt;/p&gt;
&lt;p&gt;React Native doesn‚Äôt use CSS but &lt;a href=&quot;https://reactnative.dev/docs/style&quot;&gt;JSON-based stylesheets that are applied directly to elements&lt;/a&gt;. This system has some advantages, notably &lt;a href=&quot;https://kentcdodds.com/blog/colocation&quot;&gt;co-locating concerns&lt;/a&gt; within the component file.&lt;/p&gt;
&lt;p&gt;But you still have to name things within you style objects, and I find myself reaching for BEM even when removed from CSS.&lt;/p&gt;
&lt;p&gt;For a quick overview of BEM, &lt;a href=&quot;http://getbem.com/introduction/&quot;&gt;checkout the official documentation&lt;/a&gt;. The page is pretty short and summarizes the system with images. Okay, 1‚Ä¶ 2‚Ä¶ 3‚Ä¶ I‚Äôm going to assume you‚Äôre familiar with BEM.&lt;/p&gt;
&lt;p&gt;To be fair, this is perfectly valid JavaScript and works out of the box:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; styles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; StyleSheet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;message--warning&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;message__text&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;warning&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; styles&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message--warning&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message__text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I‚Äôm following the pattern from BEM of naming blocks at the top level, using underscores for elements within a block, and hyphens for modifiers. And again, this works fine.&lt;/p&gt;
&lt;p&gt;But I &lt;em&gt;really&lt;/em&gt; dislike using strings as properties for an object. They‚Äôre annoying to create and even worse to reference. And when we use hyphens to create modifier names, we‚Äôre stuck with &lt;code&gt;styles[&#39;message--warning&#39;]&lt;/code&gt;. I just want to use BEM without the added discomfort of string keys. What are our alternatives?&lt;/p&gt;
&lt;p&gt;Turns out, there aren‚Äôt many options. The underscore is taken, and most special characters are not valid in object properties. Numbers are an option, but none of them seemed to fit. The only other option on my keyboard was, perhaps surprisingly, the dollar sign: &lt;code&gt;$&lt;/code&gt;. (Side note: Are all currency symbols valid for object properties?)&lt;/p&gt;
&lt;p&gt;jQuery and Svelte both use the &lt;code&gt;$&lt;/code&gt; symbol for JavaScript, so why not here in React Native? If we swap double hyphens for double dollar signs in the previous snippet, we get:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; styles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; StyleSheet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;message$$warning&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;message__text&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;View style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; type &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;warning&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message$$warning &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Text style&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message__text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Text&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;View&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not bad. And I‚Äôd much rather use a slightly foreign symbol in a familiar system than string properties.&lt;/p&gt;
&lt;p&gt;What do you think: good idea or bad idea? Or should I just use styled components already? Or maybe something else entirely? &lt;a href=&quot;https://seanmcp.com/articles/using-bem-names-in-react-native/#comment-link&quot;&gt;Let me know&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Until then, happy naming!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Find an iOS simulator identifier</title>
            <link href="https://seanmcp.com/articles/find-an-ios-simulator-identifier/"/>
            <updated>2021-10-04T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/find-an-ios-simulator-identifier/</id>
            <content type="html">&lt;p&gt;When running a device simulator on macOS, it is possible to navigate that system‚Äôs directly through the command line (or Finder, if you‚Äôd prefer). To do that, navigate to to the following directory:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /Library/Developer/CoreSimulator&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you look around in this directory, you will probably see a number of subdirectories with &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;UUIDs&lt;/a&gt;. Each of these corresponds to a simulator device which contains all of the data for that instance. In order to browse a specific simulator‚Äôs files, you need to know its ID.&lt;/p&gt;
&lt;p&gt;There are two ways to find that, one using the Xcode UI and another using the terminal.&lt;/p&gt;
&lt;h2 id=&quot;through-xcode&quot; tabindex=&quot;-1&quot;&gt;Through Xcode&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;In the top menu, select ‚ÄúWindow‚Äù &amp;gt; ‚ÄúDevices and Simulators‚Äù
&lt;ul&gt;
&lt;li&gt;You can use the shortcut &lt;kbd&gt;shift&lt;/kbd&gt;+&lt;kbd&gt;command&lt;/kbd&gt;+&lt;kbd&gt;2&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In the left menu of the new window, select the ‚ÄúSimulators‚Äù tab&lt;/li&gt;
&lt;li&gt;Select the device from the list below
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: Make sure you match the device specs &lt;em&gt;and&lt;/em&gt; iOS version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Look for ‚ÄúIdentifier:‚Äù in the main panel and copy the value&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;through-the-terminal&quot; tabindex=&quot;-1&quot;&gt;Through the terminal&lt;/h2&gt;
&lt;p&gt;The following command require Xcode command-line tools, which you probably already have installed if you are running Xcode.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From anywhere on your system, run &lt;code&gt;xcrun simctl list devices&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Find the ID from the output by iOS version and device specs and copy the ID&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the device is already running, you can save yourself some time by passing a search argument:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Show only running simulators&lt;/span&gt;&lt;br /&gt;xcrun simctl list devices booted&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should surface the current simulator faster for copying.&lt;/p&gt;
&lt;h2 id=&quot;take-a-look-around!&quot; tabindex=&quot;-1&quot;&gt;Take a look around!&lt;/h2&gt;
&lt;p&gt;Once you have the simulator ID copied, you can navigate there in the terminal with:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /Library/Developer/CoreSimulator/SIMULATOR-ID-THAT-YOU-COPIED&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, if you want to look into a specific app‚Äôs bundle, you can find that data within the simulator directory at &lt;code&gt;./data/Containers/Bundle/Application/APP-ID&lt;/code&gt;. I have found this useful when debugging image paths in the final app bundle.&lt;/p&gt;
&lt;p&gt;Happy browsing!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>What happened to @react-native-community packages?</title>
            <link href="https://seanmcp.com/articles/what-happened-to-react-native-community-packages/"/>
            <updated>2021-10-05T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/what-happened-to-react-native-community-packages/</id>
            <content type="html">&lt;p&gt;When React Native was first released, it included extra modules that were helpful for mobile development like &lt;code&gt;WebView&lt;/code&gt;, &lt;code&gt;NetInfo&lt;/code&gt;, and &lt;code&gt;AsyncStorage&lt;/code&gt;. Later in 2018, &lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals/issues/6&quot;&gt;the RN team made the decision&lt;/a&gt; to deprecate those internal modules and hand them off to the community to maintain.&lt;/p&gt;
&lt;p&gt;This spawned &lt;a href=&quot;https://github.com/react-native-community&quot;&gt;the &lt;code&gt;@react-native-community&lt;/code&gt; organization on GitHub&lt;/a&gt; and a number of community-maintained packages like &lt;code&gt;react-native-webview&lt;/code&gt; and &lt;code&gt;react-native-netinfo&lt;/code&gt;. If you were working in React Native in the late 20-teens, you probably remember adding these dependencies and switching out imports.&lt;/p&gt;
&lt;p&gt;In most cases, the community proved capable to maintain current packages and continue development. However, some packages were abandoned as requirements changes or maintainers moved on. Alternative options popped up and gained the support of the community, driven by individual developers or those at different organizations like Expo, Wix, Callstack, or Software Mansion.&lt;/p&gt;
&lt;p&gt;Developers who were new to React Native might defer to &lt;code&gt;@react-native-community&lt;/code&gt; packages, not because they were better than those alternatives but because they appeared to be ‚Äúthe approved solution‚Äù from the community. That wasn‚Äôt ideal for developers, which might end up with unmaintained projects, nor for the greater React Native community that was driving things forward.&lt;/p&gt;
&lt;p&gt;At the end of 2019, the &lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals/issues/176&quot;&gt;&lt;code&gt;@react-native-community&lt;/code&gt; decided to move modules out of the organization&lt;/a&gt; and into individual project organizations. In &lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals/issues/176#issuecomment-719172928&quot;&gt;the words of one maintainer&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These modules aren‚Äôt being maintained by fewer people, and aren‚Äôt any less supported. But now perception can match the reality.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a result, scoped packages like &lt;code&gt;@react-native-community/async-storage&lt;/code&gt; moved to &lt;code&gt;react-native-async-storage/async-storage&lt;/code&gt;. But besides the name, little to nothing else changed about how they were maintained.&lt;/p&gt;
&lt;p&gt;By offloading packages, &lt;code&gt;@react-native-community&lt;/code&gt; is free to focus on higher-level goals for the community, like tools to discover and maintain high-quality React Native packages. Two projects still owned by the community organization are &lt;a href=&quot;https://github.com/react-native-community/upgrade-helper&quot;&gt;&lt;code&gt;upgrade-helper&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://reactnative.directory/&quot;&gt;React Native Directory&lt;/a&gt;, both exemplifying its new focus.&lt;/p&gt;
&lt;p&gt;So while you won‚Äôt be adding &lt;code&gt;@react-native-community&lt;/code&gt; packages to your projects going forward, that is ultimately for the best. Instead, use resources like &lt;a href=&quot;https://reactnative.directory/&quot;&gt;React Native Directory&lt;/a&gt; or &lt;a href=&quot;https://github.com/jondot/awesome-react-native&quot;&gt;&lt;code&gt;awesome-react-native&lt;/code&gt;&lt;/a&gt; to find the best solution for you and your application.&lt;/p&gt;
&lt;h2 id=&quot;further-reading&quot; tabindex=&quot;-1&quot;&gt;Further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals/issues/6&quot;&gt;Learn Core (2018)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals/issues/176&quot;&gt;What packages belong in react-native-community (2019)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/react-native-community/discussions-and-proposals/blob/master/partners/0001-organization-repository-policy.md&quot;&gt;Organization repository policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
        
        <entry>
            <title>React Native Glossary</title>
            <link href="https://seanmcp.com/articles/react-native-glossary/"/>
            <updated>2021-10-07T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/react-native-glossary/</id>
            <content type="html">&lt;p&gt;Building applications with React Native requires a high-level understanding of mobile development on Android and iOS devices in addition to React and React Native fundamentals. This glossary of terms will serve as a helpful reference when working across these environments.&lt;/p&gt;
&lt;hr /&gt;
&lt;!--
TERMS TO ADD:
- JDK
- JRE
--&gt;
&lt;h2 id=&quot;aab&quot; tabindex=&quot;-1&quot;&gt;AAB&lt;/h2&gt;
&lt;p&gt;Android App Bundles (AABs) are a new format for publishing applications on Android. AABs can contain multiple APKs. Since August 2021, Google Play requires AABs for new apps.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/guide/app-bundle&quot;&gt;About Android App Bundles (Android)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;apk&quot; tabindex=&quot;-1&quot;&gt;APK&lt;/h2&gt;
&lt;p&gt;Android Package Kits (APKs) are an older format for publishing applications on Android.&lt;/p&gt;
&lt;h2 id=&quot;build.gradle&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;build.gradle&lt;/code&gt; file contains all of the information for Gradle to compile Android apps, including dependency resolutions and tasks to process the source.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://seanmcp.com/articles/what-is-a-build-gradle-file&quot;&gt;&lt;em&gt;What is a &lt;code&gt;build.gradle&lt;/code&gt; file?&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gradle&quot; tabindex=&quot;-1&quot;&gt;Gradle&lt;/h2&gt;
&lt;p&gt;Gradle is an automated build tool that is used to compile Android apps from source code. It is configured in &lt;code&gt;build.gradle&lt;/code&gt; files and run through a wrapper: &lt;code&gt;gradlew&lt;/code&gt;/&lt;code&gt;gradlew.bat&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle Build Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-dtcEMLNmn0&quot;&gt;Gradle tutorial for complete beginners (YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hermes&quot; tabindex=&quot;-1&quot;&gt;Hermes&lt;/h2&gt;
&lt;p&gt;Hermes is a mobile-optimized JavaScript engine that is included in React Native builds for Android and iOS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://reactnative.dev/docs/hermes&quot;&gt;Using Hermes (React Native)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://seanmcp.com/articles/what-is-hermes-react-native/&quot;&gt;What is Hermes in React Native?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;info.plist&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;Info.plist&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The information property list or &lt;code&gt;Info.plist&lt;/code&gt; is an XML file that contains all of the configuration data for your application. You can update these values directly or through the Xcode UI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Introduction/Introduction.html&quot;&gt;About Info.plist Keys and Values (Apple)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;javascriptcore%2Fjscore&quot; tabindex=&quot;-1&quot;&gt;JavaScriptCore/JSCore&lt;/h2&gt;
&lt;p&gt;JavaScript Core or JSCore is a JavaScript engine that is included on iOS devices. It was included in Android builds to run JS code by React Native versions prior to &lt;code&gt;0.60&lt;/code&gt;. It has since been replaced with &lt;a href=&quot;https://seanmcp.com/articles/react-native-glossary/#hermes&quot;&gt;Hermes&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/javascriptcore&quot;&gt;JavaScriptCore (Apple)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
## JRE

A Java Runtime Environment (JRE) is the code required to run a Java application. It contains all of the libraries and software that Java programs, and starts the Java Virtual Machine (JVM).

- [Java Runtime Environment (IBM)](https://www.ibm.com/cloud/learn/jre)
--&gt;
&lt;h2 id=&quot;sdk&quot; tabindex=&quot;-1&quot;&gt;SDK&lt;/h2&gt;
&lt;p&gt;Software Development Kits (SDKs) are bundles of code to add to your application. Third parties will often have an SDK to integrate with their service.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Three new games on Toollama</title>
            <link href="https://seanmcp.com/articles/three-new-games-on-toollama/"/>
            <updated>2021-10-27T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/three-new-games-on-toollama/</id>
            <content type="html">&lt;p&gt;I don‚Äôt think I‚Äôve written about &lt;a href=&quot;http://toollama.com/&quot;&gt;Toollama.com&lt;/a&gt; yet on this site, so here‚Äôs a quick introduction. Toollama is a loose collection of education-focused productivity tools and games. For the past year, it has been the home of all of the little apps that I create for myself, teachers, or my kids.&lt;/p&gt;
&lt;p&gt;Over the past three weeks, I have created two new games and one new activity to help children develop core computer skills:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;üê¢ &lt;a href=&quot;https://turtle-guide.toollama.com/&quot;&gt;Turtle Guide&lt;/a&gt;: Use the arrow keys to help a little turtle find his way home&lt;/li&gt;
&lt;li&gt;üê∑ &lt;a href=&quot;https://paint-pig.toollama.com/&quot;&gt;Paint Pig&lt;/a&gt;: Use the arrow keys to help Pig paint a picture&lt;/li&gt;
&lt;li&gt;üî¶ &lt;a href=&quot;https://spotlight.toollama.com/&quot;&gt;Spotlight&lt;/a&gt;: Use the mouse/trackpad to reveal animals hidden in color nature scenes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From a technical perspective, these are all vanilla JS, CSS, and HTML served from GitHub Pages. I‚Äôve found that solving problems with simple tools has been a relaxing change of pace from the complex environments of work. As always, the code is open source on GitHub: &lt;a href=&quot;https://github.com/seanmcp/turtle-guide&quot;&gt;&lt;code&gt;turtle-guide&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/seanmcp/paint-pig&quot;&gt;&lt;code&gt;paint-pig&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/seanmcp/spotlight&quot;&gt;&lt;code&gt;spotlight&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These additions bring the grand total on Toollama up to 13 apps! &lt;a href=&quot;https://toollama.com/&quot;&gt;Check it out, if you haven‚Äôt already&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy learning!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>What is a build.gradle file?</title>
            <link href="https://seanmcp.com/articles/what-is-a-build-gradle-file/"/>
            <updated>2021-11-04T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/what-is-a-build-gradle-file/</id>
            <content type="html">&lt;p&gt;When working on a React Native app, you will probably make some changes to the &lt;code&gt;build.gradle&lt;/code&gt; file in your projects &lt;code&gt;android/&lt;/code&gt; directory. This file is the core component of your build process and has all of the instructions necessary to compile an Android app from source.&lt;/p&gt;
&lt;p&gt;Your &lt;code&gt;build.gradle&lt;/code&gt; file is read and executed by &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt;, an automation tool that is popular in Java development. Gradle‚Äôs job is to resolve the dependency tree of your application and run everything through the Java compiler to generate code that can be run in the Java Virtual Machine (JVM). All of that work is divided in to tasks that can be mixed and matched as needed.&lt;/p&gt;
&lt;p&gt;The nearest equivalent in the world of web development might be &lt;a href=&quot;https://gulpjs.com/&quot;&gt;Gulp, a composable task runner&lt;/a&gt;, or perhaps &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack, a bundler&lt;/a&gt;. But &lt;code&gt;build.gradle&lt;/code&gt; also manages dependencies, so mix a little bit of &lt;code&gt;package.json&lt;/code&gt; in there too. Essentially, &lt;code&gt;build.gradle&lt;/code&gt; is the main configuration file for your Android project.&lt;/p&gt;
&lt;p&gt;When you look at &lt;a href=&quot;https://github.com/facebook/react-native/blob/main/template/android/build.gradle&quot;&gt;a &lt;code&gt;build.gradle&lt;/code&gt; file&lt;/a&gt; through the lens of a web developer, it looks like a bunch of nested objects with a few method calls. However, that is completely wrong!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build.gradle&lt;/code&gt; files are often written in &lt;a href=&quot;https://groovy-lang.org/&quot;&gt;Groovy, which is its own Java-based programming language&lt;/a&gt;. What looks like an object declaration in JavaScript is actually a function call in Groovy. Let‚Äôs take a look at the following block:&lt;/p&gt;
&lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;repositories &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    maven &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; url &lt;span class=&quot;token string&quot;&gt;&#39;https://www.jitpack.io&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we are calling the &lt;code&gt;repositories&lt;/code&gt; function and passing a closure, identified by the curly brackets &lt;code&gt;{}&lt;/code&gt;. Within that closure, we are calling more functions: &lt;code&gt;google&lt;/code&gt; with no parameters, and &lt;code&gt;maven&lt;/code&gt; with another closure and another function &lt;code&gt;url&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I‚Äôm still working to wrap my head around closures, but the takeaway here is that there is more going on that you might first assume.&lt;/p&gt;
&lt;p&gt;The best part about using a programming language for a build configuration file is that you can add variables and functions as needed. Variables and functions can be defined with the &lt;code&gt;def&lt;/code&gt; keyword customize the build process:&lt;/p&gt;
&lt;pre class=&quot;language-groovy&quot;&gt;&lt;code class=&quot;language-groovy&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; version &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string gstring&quot;&gt;&quot;1.2.3&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;customFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    println &lt;span class=&quot;token string gstring&quot;&gt;&quot;Building v&lt;span class=&quot;token expression&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;version&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;!&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;customFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last bit of information you should know about &lt;code&gt;build.gradle&lt;/code&gt; is that all of the tasks are executed via a wrapper. This is the executable &lt;code&gt;gradlew&lt;/code&gt; (Linux/Mac) or &lt;code&gt;gradlew.bat&lt;/code&gt; (Windows) file that is included in your project. By running everything through the wrapper, you remove the need to have Gradle installed on your computer.&lt;/p&gt;
&lt;p&gt;To start the build task, run the following in your terminal:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;./gradlew build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully that demystifies the &lt;code&gt;build.gradle&lt;/code&gt; file in your Android/React-Native project a little bit. This is not yet my area of expertise, so &lt;a href=&quot;https://seanmcp.com/articles/what-is-a-build-gradle-file/#comment-link&quot;&gt;please let me know&lt;/a&gt; if I need to make any corrections.&lt;/p&gt;
&lt;p&gt;Happy building!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Helpful online tools for diagramming</title>
            <link href="https://seanmcp.com/articles/helpful-online-tools-for-diagramming/"/>
            <updated>2021-12-15T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/helpful-online-tools-for-diagramming/</id>
            <content type="html">&lt;p&gt;A good diagram can make a big difference when communicating a message. I often turn to a diagramming tool when trying to explain a complex idea or organize my thoughts when brainstorming. Thankfully, there a bunch of online tools to help you make quality diagrams. Here are a few options for your to use:&lt;/p&gt;
&lt;h2 id=&quot;excalidraw&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://excalidraw.com/&quot;&gt;Excalidraw&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/excalidraw-example.png&quot; alt=&quot;Excalidraw example diagram&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Excalidraw makes it easy to create quick diagrams that look sketchy. It saves your changes to local storage (which is super handy), and supports a backup option to download/upload an illustration. There is a live collaboration feature that I haven‚Äôt tried, and some premium offerings with Excalidraw+.&lt;/p&gt;
&lt;h2 id=&quot;tl-draw&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://www.tldraw.com/&quot;&gt;TL Draw&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/tldraw-example.png&quot; alt=&quot;TL Draw example diagram&quot; /&gt;&lt;/p&gt;
&lt;p&gt;TL Draw has a similar feature set to Excalidraw but diagrams look a little more neat and tidy. Depending on the style you are aiming for, this may be the better option for you. The biggest difference is that your changes are not saved to local storage; so make sure to backup your illustration!&lt;/p&gt;
&lt;h2 id=&quot;draw.io&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://draw.io/&quot;&gt;Draw.io&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/draw-io-example.png&quot; alt=&quot;Draw.io example diagram&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://draw.io/&quot;&gt;Draw.io&lt;/a&gt; makes creating diagrams and flowcharts easy and painless. It supports a lot of different element options and seems to be a go-to option for diagramming complex microservice systems. It has a desktop application and backs up to the cloud. My only criticism is that the illustrations from &lt;a href=&quot;http://draw.io/&quot;&gt;Draw.io&lt;/a&gt; are not pretty; it‚Äôs definitely function over form.&lt;/p&gt;
&lt;h2 id=&quot;google-drawings&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://drive.google.com/&quot;&gt;Google Drawings&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/google-drawings-example.png&quot; alt=&quot;Google Drawings example diagram&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One of the forgotten tools of Google Drive, Drawings is an adequate option for simple diagrams. If you or your organization are already using Google, it will be the easiest option if not the most inspired.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If you have any other suggestions to add to this list, &lt;a href=&quot;https://seanmcp.com/articles/helpful-online-tools-for-diagramming/#comment-link&quot;&gt;please let me know&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy diagramming!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>My best Slack emojis</title>
            <link href="https://seanmcp.com/articles/my-best-slack-emojis/"/>
            <updated>2022-01-04T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/my-best-slack-emojis/</id>
            <content type="html">&lt;p&gt;I like reaction emojis and have spent an embarrassing amount of time &lt;a href=&quot;https://seanmcp.com/articles/my-best-slack-emojis/tools-for-custom-slack-emojis&quot;&gt;making new ones for myself and my coworkers&lt;/a&gt;. These are some of my creations that were popular or just my favorites:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Image&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/ack.jpg&quot; alt=&quot;ack&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:ack:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/all-in-this-together.gif&quot; alt=&quot;all in this together&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:all-in-this-together:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/all-seeing-eye.jpg&quot; alt=&quot;all seeing eye&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:all-seeing-eye:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/avalanche.png&quot; alt=&quot;avalanche&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:avalanche:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/awe.gif&quot; alt=&quot;awe&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:awe:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/do-it.gif&quot; alt=&quot;do it&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:do-it:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/does-not-equal.png&quot; alt=&quot;does not equal&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:does-not-equal:&lt;/code&gt;/&lt;code&gt;:dne:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/eagle-eye.jpg&quot; alt=&quot;eagle eye&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:eagle-eye:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/frankensteins-monster.jpg&quot; alt=&quot;frankenstein&#39;s monster&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:frankensteins-monster:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/good-point.png&quot; alt=&quot;good point&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:good-point:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/good-question.png&quot; alt=&quot;good question&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:good-question:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/interesting.gif&quot; alt=&quot;interesting&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:interesting:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/its-alive.jpg&quot; alt=&quot;it&#39;s alive&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:its-alive:&lt;/code&gt;/&lt;code&gt;:frankenstein:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/nail-biter.gif&quot; alt=&quot;nail biter&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:nail-biter:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/nerves.gif&quot; alt=&quot;nerves&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:nerves:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/nice-catch.png&quot; alt=&quot;nice catch&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:nice-catch:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/not-crying.png&quot; alt=&quot;not crying&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:not-crying:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/ope.png&quot; alt=&quot;ope&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:ope:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/save-your-money.png&quot; alt=&quot;save your money&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:save-your-money:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/shakes-head.gif&quot; alt=&quot;shakes head&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:shakes-head:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/shivers.gif&quot; alt=&quot;shivers&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:shivers:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/so-close.jpg&quot; alt=&quot;so close&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:so-close:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/team.gif&quot; alt=&quot;team&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:team:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/this.png&quot; alt=&quot;this&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:this:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/this-week-i-learned.png&quot; alt=&quot;this week i learned&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:this-week-i-learned:&lt;/code&gt;/&lt;code&gt;:twil:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/thumbs-down.gif&quot; alt=&quot;thumbs down&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:thumbs-down:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/too-big.jpg&quot; alt=&quot;too big&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:too-big:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/very-interesting.gif&quot; alt=&quot;very interesting&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:very-interesting:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/yuck.gif&quot; alt=&quot;yuck&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:yuck:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://seanmcp.com/img/emojis/yikes.png&quot; alt=&quot;yikes&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;:yikes:&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Feel free to take inspiration or add to your workspace.&lt;/p&gt;
&lt;p&gt;Happy reacting!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Prevent Chrome from adjusting audio input levels on Mac</title>
            <link href="https://seanmcp.com/articles/prevent-chrome-from-adjusting-audio-input-levels-on-mac/"/>
            <updated>2022-01-11T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/prevent-chrome-from-adjusting-audio-input-levels-on-mac/</id>
            <content type="html">&lt;p&gt;Starting Fall of 2021, I noticed that my bluetooth headphones would periodically mute me while I was speaking during video chats on Google Meet. I tried multiple sets of bluetooth headphones, and they all had the same issue.&lt;/p&gt;
&lt;p&gt;I learned last week that macOS will automatically mute an audio input when the input level is set to zero. While in meetings, I kept an eye on the level in System Preferences &amp;gt; Sound &amp;gt; Input and noticed that it would decrease as I spoke. As soon as the level reached zero, my headset would notify me that it had been muted.&lt;/p&gt;
&lt;p&gt;There are no settings in Google Chrome (on in my case, the new Microsoft Edge) nor Google Meet to disable those input level adjustments, and there is &lt;a href=&quot;https://support.google.com/chrome/thread/7542181/chrome-is-auto-adjusting-the-microphone-level?hl=en&quot;&gt;an unanswered help question&lt;/a&gt;) with a lot of folks experiencing the same issue.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://support.google.com/chrome/thread/7542181/chrome-is-auto-adjusting-the-microphone-level?hl=en&quot;&gt;One of the responders&lt;/a&gt; came up with a solution: &lt;a href=&quot;https://chrome.google.com/webstore/detail/disable-automatic-gain-co/clpapnmmlmecieknddelobgikompchkk&quot;&gt;a Chrome extension&lt;/a&gt; that prevents certain domains from changing the input levels.&lt;/p&gt;
&lt;p&gt;After installing that from the Chrome Web Store, I navigated to Google Meet, activated the extension, and gave it permissions on that domain. The page refreshed, and the issue was resolved: no more adjusted input levels and no more unwanted muting.&lt;/p&gt;
&lt;p&gt;It‚Äôs great that there are creative solutions like this available, h/t &lt;a href=&quot;https://github.com/joeywatts&quot;&gt;Joey Watts&lt;/a&gt;, but its frustrating that issues like this can go unresolved for so long on popular projects like Google Chrome.&lt;/p&gt;
&lt;p&gt;Happy resolving!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Make a web component</title>
            <link href="https://seanmcp.com/articles/make-a-web-component/"/>
            <updated>2022-01-14T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/make-a-web-component/</id>
            <content type="html">&lt;p&gt;To make a web component, you need to create a new class. You can extend an existing component class if you want to preserve some semantic behavior, but we‚Äôll go with the default &lt;code&gt;HTMLElement&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need to add a &lt;code&gt;constructor&lt;/code&gt; method and call the &lt;code&gt;super&lt;/code&gt; function to ensure that our component is initialized with all the necessary information:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need a DOM to build on. Web components use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM&quot;&gt;a shadow DOM&lt;/a&gt;, which we‚Äôll create by calling our class‚Äôs &lt;code&gt;attachShadow&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; shadow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachShadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;open&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With our shadow DOM declared, we can create a new element. Let‚Äôs go with a span element with the content ‚ÄúHello world!‚Äù and append it to our shadow:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; shadow &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;attachShadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;open&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; span &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;span&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        span&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        shadow&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;span&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last thing we need to do is define our custom web component with:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLElement&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* Collapsed for brevity */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;customElements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hello-world&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; HelloWorld&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, references your new element in the HTML:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;hello-world&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;hello-world&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congratulations, you just made your first web component!&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Upgrading an Eleventy site to 1.0.0</title>
            <link href="https://seanmcp.com/articles/upgrading-an-eleventy-site-to-1-0-0/"/>
            <updated>2022-01-18T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/upgrading-an-eleventy-site-to-1-0-0/</id>
            <content type="html">&lt;p&gt;I initially published a &lt;a href=&quot;https://seanmcp.com/notes&quot;&gt;note&lt;/a&gt; about how easy it was to upgrade to Eleventy &lt;code&gt;1.0.0&lt;/code&gt;, but I hit a snag which warrants a quick article. Here are the two steps that I needed to complete to update this website to the latest version of Eleventy.&lt;/p&gt;
&lt;p&gt;First, update &lt;code&gt;@11ty/eleventy&lt;/code&gt; with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i -D @11ty/eleventy@latest&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After updating that, both the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;build&lt;/code&gt; scripts for the site worked as expected. &lt;a href=&quot;https://github.com/11ty/eleventy/releases/tag/v1.0.0&quot;&gt;There are breaking changes to be aware of&lt;/a&gt;, so your mileage may vary.&lt;/p&gt;
&lt;p&gt;I took the time to update some other dependencies and pushed the changes to GitHub. I have the repo connected to Netlify for CI/CD, which usually works without a hitch. Today, however, I noticed that the build failed with the following log:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10:03:16 AM: $ eleventy
10:03:16 AM: Eleventy requires Node 12. You will need to upgrade Node to use Eleventy!
10:03:16 AM: ‚Äã
10:03:16 AM: ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
10:03:16 AM:   &amp;quot;build.command&amp;quot; failed                                        
10:03:16 AM: ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
10:03:16 AM: ‚Äã
10:03:16 AM:   Error message
10:03:16 AM:   Command failed with exit code 1: eleventy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There weren‚Äôt any build configurations in Netlify for Node.js version, but a quick search led me to &lt;a href=&quot;https://docs.netlify.com/configure-builds/manage-dependencies/#node-js-and-javascript&quot;&gt;this guide on managing build dependencies&lt;/a&gt;. Good documentation; another reason to use Netlify!&lt;/p&gt;
&lt;p&gt;I added an environment variable for &lt;code&gt;NODE_VERSION&lt;/code&gt; and set it to the current Node.js LTS (&lt;code&gt;16.13.2&lt;/code&gt; as of writing), and the build was successful.&lt;/p&gt;
&lt;p&gt;Regardless of your setup, just make sure that you are using Node.js version &lt;code&gt;12&lt;/code&gt; or later and you should be good to go. &lt;span aria-hidden=&quot;true&quot; class=&quot;eleventy-emoji&quot; role=&quot;img&quot;&gt;üöÄ&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Happy upgrading!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Add a custom emulated device in Chrome</title>
            <link href="https://seanmcp.com/articles/add-a-custom-emulated-device-in-chrome/"/>
            <updated>2022-02-05T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/add-a-custom-emulated-device-in-chrome/</id>
            <content type="html">&lt;p&gt;Google Chrome provides a feature in the dev tools to emulate a device within the desktop browser. This is really helpful to get a quick preview of what a webpage will look like on different types and sizes of devices.&lt;/p&gt;
&lt;p&gt;You can also add a custom emulated device that meets the specifications of your users. For example, if you work on a product that is primarily used by school students on Chromebooks, then it would be useful to have an emulated device that you could easily select.&lt;/p&gt;
&lt;p&gt;To add a custom emulated device in Chrome, first &lt;a href=&quot;https://seanmcp.com/articles/how-to-open-dev-tools&quot;&gt;open the dev tools with your favorite method&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/custom-emulated-device-1.png&quot; alt=&quot;step 1: open the dev tools&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Then select toggle the device toolbar by clicking the phone/tablet icon or using the shortcut &lt;kbd&gt;ctrl&lt;/kbd&gt;/&lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;m&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/custom-emulated-device-2.png&quot; alt=&quot;step 2: open the device toolbar&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Open the dropdown to see all of the default devices available in Chrome. To add a new one, select ‚ÄúEdit‚Äù at the bottom of the list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/custom-emulated-device-3.png&quot; alt=&quot;step 3: select to edit devices&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This should review a new dev-tools panel. Here you can select from a greater list of default devices. To add a new device, select ‚ÄúAdd custom device‚Ä¶‚Äù.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/custom-emulated-device-4.png&quot; alt=&quot;step 4: select &amp;quot;add custom device&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Next, input the dimensions for your custom device. I have two Chromebooks with two different window dimensions: 1366x649 and 1300x605. I‚Äôd rather test again the more extreme device, but you do whatever makes sense for you.&lt;/p&gt;
&lt;p&gt;Make sure to select the correct user agent type! For a Chromebook, I‚Äôm going with ‚ÄúDesktop (touch)‚Äù.&lt;/p&gt;
&lt;p&gt;When you are done, select ‚ÄúAdd‚Äù.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/custom-emulated-device-5.png&quot; alt=&quot;step 5: input device dimensions&quot; /&gt;&lt;/p&gt;
&lt;p&gt;With your custom emulated device added, you can now selected it from the responsive device dropdown menu back on the far left.&lt;/p&gt;
&lt;p&gt;The screenshot below illustrates just how different the real estate is for a Chromebook user compared to someone on a full-sized laptop or desktop:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/custom-emulated-device-6.png&quot; alt=&quot;step 6: use your custom device&quot; /&gt;&lt;/p&gt;
&lt;p&gt;With custom emulated devices, we can test to make sure that our webpages and applications will work well for all of our users.&lt;/p&gt;
&lt;p&gt;Happy customizing!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Music to code to</title>
            <link href="https://seanmcp.com/articles/music-to-code-to/"/>
            <updated>2022-02-15T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/music-to-code-to/</id>
            <content type="html">&lt;p&gt;Whenever I need to put my head down and focus on a coding task, I have found that listening to music can help me focus and increase my productivity.&lt;/p&gt;
&lt;p&gt;There are two main criteria that I have for music while I am programming: 1) it needs to be instrumental, and 2) it needs to have a decent beat/tempo. If a song can check both of those boxes, then it gets added to the rotation.&lt;/p&gt;
&lt;p&gt;Here is a list of songs/artists that I enjoy listening to while I work, in alphabetical order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://music.youtube.com/channel/UCT7LeKzJCc5P1AKY1Ghxjiw&quot;&gt;Arcade High&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://music.youtube.com/channel/UC3G1cV92stSGOy4cLgXmgJQ&quot;&gt;Com Truise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://music.youtube.com/channel/UCov2JBrKDko0xcwfIwhEAfw&quot;&gt;Dynatron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://music.youtube.com/channel/UCnl2TnNDgp2rUepf5VnXJ1g&quot;&gt;Magic Sword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://music.youtube.com/channel/UCec-IpmkXJQhgnkBIx1EGxQ&quot;&gt;S U R V I V E&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://music.youtube.com/channel/UCVjNyglpxEwPoB65b0Oc4Ew&quot;&gt;Timecop1983&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://music.youtube.com/channel/UCzdwXtAUt8VgaDXfTfttx8A&quot;&gt;Waveshaper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As of writing, these artists are all in similar, but as the lists grows I plan on organizing things by genre.&lt;/p&gt;
&lt;p&gt;Happy listening!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>English words by consonant-vowel pattern</title>
            <link href="https://seanmcp.com/articles/english-words-by-consonant-vowel-pattern/"/>
            <updated>2022-03-03T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/english-words-by-consonant-vowel-pattern/</id>
            <content type="html">&lt;p&gt;When teaching people (or computers) to read, it‚Äôs useful to group similar words into categories. One such grouping is by consonant-vowel patterns, which represent words by the letters that they contain.&lt;/p&gt;
&lt;p&gt;With consonant-vowel patterns, we can put words like ‚Äúbun‚Äù, ‚Äúcat‚Äù, and ‚Äúdip‚Äù into one bucket as ‚Äúcvc‚Äù words; they are all made up of a consonant, followed by a vowel, and ending in a consonant.&lt;/p&gt;
&lt;p&gt;I put together &lt;a href=&quot;https://github.com/SeanMcP/reading/tree/master/consonant-vowel-patterns&quot;&gt;a list of all English words sorted by their consonant-vowel pairs&lt;/a&gt;. However, that is a long list to search through and I thought it might be nice to have a tool to look up shorter words by their consonant-vowel pattern.&lt;/p&gt;
&lt;section id=&quot;app&quot;&gt;
&lt;form id=&quot;pattern-form&quot;&gt;
&lt;label for=&quot;pattern&quot;&gt;
Consonant-vowel pattern
&lt;/label&gt;
&lt;select id=&quot;pattern&quot; name=&quot;pattern&quot;&gt;
&lt;option value=&quot;cc&quot;&gt;cc&lt;/option&gt;
&lt;option value=&quot;ccc&quot;&gt;ccc&lt;/option&gt;
&lt;option value=&quot;cccc&quot;&gt;cccc&lt;/option&gt;
&lt;option value=&quot;ccccc&quot;&gt;ccccc&lt;/option&gt;
&lt;option value=&quot;ccccv&quot;&gt;ccccv&lt;/option&gt;
&lt;option value=&quot;cccv&quot;&gt;cccv&lt;/option&gt;
&lt;option value=&quot;cccvc&quot;&gt;cccvc&lt;/option&gt;
&lt;option value=&quot;cccvv&quot;&gt;cccvv&lt;/option&gt;
&lt;option value=&quot;ccv&quot;&gt;ccv&lt;/option&gt;
&lt;option value=&quot;ccvc&quot;&gt;ccvc&lt;/option&gt;
&lt;option value=&quot;ccvcc&quot;&gt;ccvcc&lt;/option&gt;
&lt;option value=&quot;ccvcv&quot;&gt;ccvcv&lt;/option&gt;
&lt;option value=&quot;ccvv&quot;&gt;ccvv&lt;/option&gt;
&lt;option value=&quot;ccvvc&quot;&gt;ccvvc&lt;/option&gt;
&lt;option value=&quot;ccvvv&quot;&gt;ccvvv&lt;/option&gt;
&lt;option value=&quot;cv&quot;&gt;cv&lt;/option&gt;
&lt;option value=&quot;cvc&quot;&gt;cvc&lt;/option&gt;
&lt;option value=&quot;cvcc&quot;&gt;cvcc&lt;/option&gt;
&lt;option value=&quot;cvccc&quot;&gt;cvccc&lt;/option&gt;
&lt;option value=&quot;cvccv&quot;&gt;cvccv&lt;/option&gt;
&lt;option value=&quot;cvce&quot;&gt;cvce&lt;/option&gt;
&lt;option value=&quot;cvcv&quot;&gt;cvcv&lt;/option&gt;
&lt;option value=&quot;cvcvc&quot;&gt;cvcvc&lt;/option&gt;
&lt;option value=&quot;cvcvv&quot;&gt;cvcvv&lt;/option&gt;
&lt;option value=&quot;cvv&quot;&gt;cvv&lt;/option&gt;
&lt;option value=&quot;cvvc&quot;&gt;cvvc&lt;/option&gt;
&lt;option value=&quot;cvvcc&quot;&gt;cvvcc&lt;/option&gt;
&lt;option value=&quot;cvvcv&quot;&gt;cvvcv&lt;/option&gt;
&lt;option value=&quot;cvvv&quot;&gt;cvvv&lt;/option&gt;
&lt;option value=&quot;cvvvc&quot;&gt;cvvvc&lt;/option&gt;
&lt;option value=&quot;cvvvv&quot;&gt;cvvvv&lt;/option&gt;
&lt;option value=&quot;v&quot;&gt;v&lt;/option&gt;
&lt;option value=&quot;vc&quot;&gt;vc&lt;/option&gt;
&lt;option value=&quot;vcc&quot;&gt;vcc&lt;/option&gt;
&lt;option value=&quot;vccc&quot;&gt;vccc&lt;/option&gt;
&lt;option value=&quot;vcccc&quot;&gt;vcccc&lt;/option&gt;
&lt;option value=&quot;vcccv&quot;&gt;vcccv&lt;/option&gt;
&lt;option value=&quot;vccv&quot;&gt;vccv&lt;/option&gt;
&lt;option value=&quot;vccvc&quot;&gt;vccvc&lt;/option&gt;
&lt;option value=&quot;vccvv&quot;&gt;vccvv&lt;/option&gt;
&lt;option value=&quot;vcv&quot;&gt;vcv&lt;/option&gt;
&lt;option value=&quot;vcvc&quot;&gt;vcvc&lt;/option&gt;
&lt;option value=&quot;vcvcc&quot;&gt;vcvcc&lt;/option&gt;
&lt;option value=&quot;vcvcv&quot;&gt;vcvcv&lt;/option&gt;
&lt;option value=&quot;vcvv&quot;&gt;vcvv&lt;/option&gt;
&lt;option value=&quot;vcvvc&quot;&gt;vcvvc&lt;/option&gt;
&lt;option value=&quot;vcvvv&quot;&gt;vcvvv&lt;/option&gt;
&lt;option value=&quot;vv&quot;&gt;vv&lt;/option&gt;
&lt;option value=&quot;vvc&quot;&gt;vvc&lt;/option&gt;
&lt;option value=&quot;vvcc&quot;&gt;vvcc&lt;/option&gt;
&lt;option value=&quot;vvccc&quot;&gt;vvccc&lt;/option&gt;
&lt;option value=&quot;vvccv&quot;&gt;vvccv&lt;/option&gt;
&lt;option value=&quot;vvcv&quot;&gt;vvcv&lt;/option&gt;
&lt;option value=&quot;vvcvc&quot;&gt;vvcvc&lt;/option&gt;
&lt;option value=&quot;vvcvv&quot;&gt;vvcvv&lt;/option&gt;
&lt;option value=&quot;vvv&quot;&gt;vvv&lt;/option&gt;
&lt;option value=&quot;vvvc&quot;&gt;vvvc&lt;/option&gt;
&lt;option value=&quot;vvvcc&quot;&gt;vvvcc&lt;/option&gt;
&lt;option value=&quot;vvvcv&quot;&gt;vvvcv&lt;/option&gt;
&lt;option value=&quot;vvvv&quot;&gt;vvvv&lt;/option&gt;
&lt;/select&gt;
&lt;button&gt;Search&lt;/button&gt;
&lt;/form&gt;
&lt;ol id=&quot;results-list&quot;&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;p&gt;The word list isn‚Äôt perfect, but hopefully it will give you all of the data that you need for your use case! Let me know if you have any suggestions or run into any issues.&lt;/p&gt;
&lt;p&gt;Happy reading!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Calculate the sum of everything up to a given number</title>
            <link href="https://seanmcp.com/articles/calculate-the-sum-of-everything-up-to-a-given-number/"/>
            <updated>2022-04-23T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/calculate-the-sum-of-everything-up-to-a-given-number/</id>
            <content type="html">&lt;p&gt;My wife showed me a Tik Tok series where someone was decluttering their life by getting rid of an increasing amount of items every day for 30 days. That‚Äôs kind of hard to type out, but the idea was getting rid of one thing on day 1, then two things on day 2, &lt;em&gt;etc.&lt;/em&gt; until tossing thirty things on day 30.&lt;/p&gt;
&lt;p&gt;It was late a night, and we both struggled with the math of determining how many items this person would give away by the end of the experiment&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/calculate-the-sum-of-everything-up-to-a-given-number/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;. Being an engineer, I set out the next day to create a little tool to calculate that for you.&lt;/p&gt;
&lt;p&gt;Type in the number of steps (in our case 30 for thirty days), and select ‚ÄúCalculate‚Äù to see the sum:&lt;/p&gt;
&lt;div id=&quot;app&quot;&gt;
&lt;form id=&quot;settings&quot;&gt;
    &lt;label for=&quot;x&quot;&gt;Number&lt;/label&gt;
    &lt;input id=&quot;x&quot; min=&quot;1&quot; name=&quot;x&quot; type=&quot;number&quot; value=&quot;30&quot; /&gt;
    &lt;button&gt;Calculate&lt;/button&gt;
&lt;/form&gt;
&lt;div aria-live=&quot;polite&quot; id=&quot;result&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I remember seeing something similar when I was in college and folks would try to raise support to go on a mission trip. They would have a board with every number from 1 to 100 (or so) and try to find people who are willing to donate that amount. With this calculator, you should be able to figure out how long your support board needs to be with some guess and check.&lt;/p&gt;
&lt;p&gt;Hopefully this helps someone else.&lt;/p&gt;
&lt;p&gt;Happy counting!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Spoiler: It‚Äôs 435 items &lt;a href=&quot;https://seanmcp.com/articles/calculate-the-sum-of-everything-up-to-a-given-number/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>When to use React&#39;s memo HOC</title>
            <link href="https://seanmcp.com/articles/when-to-use-reacts-memo-hoc/"/>
            <updated>2022-04-28T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/when-to-use-reacts-memo-hoc/</id>
            <content type="html">&lt;p&gt;When React wants to render a component, it renders all of the components in the tree from that point. So if you have a parent component with two child components, a re-render (‚Üª) of the parent will include re-rendering both children.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parent ‚Üª
‚îú‚îÄ‚îÄ ChildA ‚Üª
‚îî‚îÄ‚îÄ ChildB ‚Üª
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since data typically flows down the tree, this is the behavior that you probably want for the UI to reflect the current state of the application.&lt;/p&gt;
&lt;p&gt;However, there may be instances when you do not want a component to re-render when its ancestor re-renders. Let‚Äôs imagine a similar scenario with two children. One of the components is presentational while the other has a deep tree of its own.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parent
‚îú‚îÄ‚îÄ BasicChild
‚îî‚îÄ‚îÄ ComplexChild
    ‚îú‚îÄ‚îÄ GrandChildA
    ‚îî‚îÄ‚îÄ GrandChildB
        ‚îî‚îÄ‚îÄ GreatGrandChild
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like before, any changes (‚ú¥) to the parent will result in re-rendering all if its children ‚Äì¬†including the complex subtree. Depending on the depth of the tree or the complexity of the render, this could be a time-consuming render cycle.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parent ‚ú¥‚Üª
‚îú‚îÄ‚îÄ BasicChild ‚Üª
‚îî‚îÄ‚îÄ ComplexChild ‚Üª
    ‚îú‚îÄ‚îÄ GrandChildA ‚Üª
    ‚îî‚îÄ‚îÄ GrandChildB ‚Üª
        ‚îî‚îÄ‚îÄ GreatGrandChild ‚Üª
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want to prevent &lt;code&gt;ComplexChild&lt;/code&gt; from re-rendering unnecessarily to improve the performance of our application.&lt;/p&gt;
&lt;p&gt;Thankfully, React has some features to accomplish this.&lt;/p&gt;
&lt;h2 id=&quot;class-components&quot; tabindex=&quot;-1&quot;&gt;Class components&lt;/h2&gt;
&lt;p&gt;Class components have &lt;a href=&quot;https://reactjs.org/docs/react-component.html#shouldcomponentupdate&quot;&gt;a &lt;code&gt;shouldComponentUpdate&lt;/code&gt; lifecycle method&lt;/a&gt; that allow you to determine whether a component should re-render based on props and state.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PreventRerender&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;shouldComponentUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nextProps&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nextState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; nextProps&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://reactjs.org/docs/react-api.html#reactpurecomponent&quot;&gt;&lt;code&gt;PureComponent&lt;/code&gt; goes one step further&lt;/a&gt; by implementing &lt;code&gt;shouldComponentUpdate&lt;/code&gt; with a shallow prop and state comparison. When you component extends &lt;code&gt;PureComponent&lt;/code&gt;, it will only re-render if its props or state have changed.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PreventRerender&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PureComponent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;function-components&quot; tabindex=&quot;-1&quot;&gt;Function components&lt;/h2&gt;
&lt;p&gt;For modern function components with no lifecycle methods, we need a different solution. &lt;a href=&quot;https://reactjs.org/docs/react-api.html#reactmemo&quot;&gt;React exports a &lt;code&gt;memo&lt;/code&gt; higher-order component&lt;/a&gt; (HOC) that takes a function component and returns a wrapped component that will only re-render if a shallow comparison of props indicates a change.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; PreventRerender &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PreventRerender&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more customization, you can pass an optional compare function to &lt;code&gt;React.memo&lt;/code&gt; as a second argument that determines whether to render based on previous and next props.&lt;/p&gt;
&lt;p&gt;Any of the strategies above to prevent unnecessary re-renders come at a small cost, so make sure to implement them only when necessary. You can use the React DevTools‚Äô Profiler panel to determine which areas of the React tree are good candidates for performance improvements.&lt;/p&gt;
&lt;p&gt;In our example above, we could wrap our complex component with &lt;code&gt;React.memo&lt;/code&gt; in order to prevent re-rendering when the props are unchanged:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ComplexChild&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We would not need to do anything to the basic child component, as any memoization or lifecycle checks would probably be more expensive than the cost of re-rendering.&lt;/p&gt;
&lt;p&gt;With that change in place, a change within the parent component would only result in re-renders for &lt;code&gt;Parent&lt;/code&gt; and &lt;code&gt;BasicChild&lt;/code&gt; ‚Äì the expensive tree in &lt;code&gt;ComplexChild&lt;/code&gt; would not change.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parent ‚ú¥‚Üª
‚îú‚îÄ‚îÄ BasicChild ‚Üª
‚îî‚îÄ‚îÄ ComplexChild
    ‚îú‚îÄ‚îÄ GrandChildA
    ‚îî‚îÄ‚îÄ GrandChildB
        ‚îî‚îÄ‚îÄ GreatGrandChild
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope that helps explain when and how to use React‚Äôs &lt;code&gt;memo&lt;/code&gt; HOC.&lt;/p&gt;
&lt;p&gt;Happy memoizing!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Use multiple Chrome Profiles when debugging</title>
            <link href="https://seanmcp.com/articles/use-multiple-chrome-profiles-when-debugging/"/>
            <updated>2022-06-06T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/use-multiple-chrome-profiles-when-debugging/</id>
            <content type="html">&lt;p&gt;Awhile back, I read about using separate Chrome profiles&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://seanmcp.com/articles/use-multiple-chrome-profiles-when-debugging/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; for debugging. The idea is to have specific environments that are specially configured to debug different kinds of issues.&lt;/p&gt;
&lt;p&gt;While the article mentioned many different profiles for different users and scenarios, I‚Äôve found myself settling on three: my main profile, the guest profile, and a DevTools profile.&lt;/p&gt;
&lt;p&gt;The main profile is where I am signed into Google with my personal or work email address. If you use Google Chrome regularly and have a Google account, you probably have a profile setup already. This is where I do most of my development and debugging work. I have a selection of extensions installed and a few resources like bookmarks and snippets to help my workflow. The first step when debugging is to use my current setup ‚Äì¬†if I can get things reproducing here, great! But if I have to alter settings or clear data, then I reach for something else.&lt;/p&gt;
&lt;p&gt;The next option is the default Guest profile in Chrome. When switching to a guest profile, you lose the session and any information stored in the browser. It‚Äôs a clean slate. This is helpful when you want to reproduce the bug in a particular scenario but don‚Äôt want to logout or toggle feature flags on your main profile. Guest profiles have full access to the browser‚Äôs DevTools but do not support extensions. For that, I have a third option.&lt;/p&gt;
&lt;p&gt;Finally, I have a profile specifically for DevTool extensions. Here I have the React DevTools installed, and any additional else that would be helpful when debugging. If I know that I am investigating a React issue, I will switch over to this profile and then explore the tree with the Components panel or run tests in the Profiler. Any created profile will save site data, so I make a point of frequently resetting everything to ensure a clean environment for reproducing bugs.&lt;/p&gt;
&lt;p&gt;With these three profiles, I find that I‚Äôm better able to identify and fix issues that I encounter when developing. Give it a try and let me know how it works for you.&lt;/p&gt;
&lt;p&gt;Happy debugging!&lt;/p&gt;
&lt;hr class=&quot;small&quot; /&gt;
    &lt;section class=&quot;footnotes --clear-child-margins&quot;&gt;
        &lt;h2 class=&quot;--visually-hidden&quot;&gt;Footnotes&lt;/h2&gt;
        &lt;ol&gt;
    &lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;Read Vitaly Friedman‚Äôs &lt;a href=&quot;https://www.smashingmagazine.com/2021/02/useful-chrome-firefox-devtools-tips-shortcuts/&quot;&gt;&lt;em&gt;DevTools Debugging Tips And Shortcuts&lt;/em&gt;&lt;/a&gt; &lt;a href=&quot;https://seanmcp.com/articles/use-multiple-chrome-profiles-when-debugging/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;‚Ü©Ô∏é&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
        </entry>
        
        <entry>
            <title>This article was written by GitHub Copilot</title>
            <link href="https://seanmcp.com/articles/written-by-github-copilot/"/>
            <updated>2022-06-30T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/written-by-github-copilot/</id>
            <content type="html">&lt;p&gt;Last week I decided to give Copilot, GitHub‚Äôs AI-powered code-suggestion engine, a try. In that time, I‚Äôve been using it for personal and professional projects, and I‚Äôve been pleasantly surprised by the quality and promptness of the suggestions it provides.&lt;/p&gt;
&lt;p&gt;Even while writing this article, Copilot is trying to complete my sentences based on the information that it can glean from the document. As the page grows in complexity, the suggestions seem to get more and more accurate.&lt;/p&gt;
&lt;p&gt;This article was written by GitHub Copilot. I started with these introductory sentences and a few starter words for successive paragraphs, but everything else was suggestions from Copilot.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;After a few weeks of writing, I was able to write a few more paragraphs and a few more words. But I was not able to write a whole article. Copilot was not very good at writing articles.&lt;/p&gt;
&lt;p&gt;Sometimes the suggestions from Copilot are not enough. I wrote a few more paragraphs and a few more words. Even then, I was not able to write a whole article.&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Starring content</title>
            <link href="https://seanmcp.com/articles/starring-content/"/>
            <updated>2022-07-13T15:49:15Z</updated>
            <id>https://seanmcp.com/articles/starring-content/</id>
            <content type="html">&lt;p&gt;In June, I added a new feature to this site: stars. Now whenever you &lt;kbd&gt;command&lt;/kbd&gt; or &lt;kbd&gt;windows&lt;/kbd&gt; click anywhere on the site, a little star emoji ‚≠êÔ∏è is added. When you navigate to that page again, the star will be there waiting for you. If you ever want to remove a star, click it and it will vanish.&lt;/p&gt;
&lt;p&gt;Try it out by adding a new star here üëâ&lt;/p&gt;
&lt;p&gt;My thought was that stars could mark specific portions of an article or page that were helpful so that you can quickly find that location again. This is similar to Medium‚Äôs highlight feature, but the data is saved to &lt;code&gt;localStorage&lt;/code&gt; instead of an external database. As a result, stars are for your eyes only.&lt;/p&gt;
&lt;p&gt;To implement this feature, I added a new &lt;code&gt;localStorage&lt;/code&gt; key called &lt;code&gt;com.seanmcp.stars&lt;/code&gt; where I keep a map of pathnames and an array of star coordinates. Whenever you navigate on my site, &lt;code&gt;stars.js&lt;/code&gt; looks to see if there are any stars for that pathname and renders them if present.&lt;/p&gt;
&lt;p&gt;I added a new click event listener that handles the logic of adding and removing stars. To check to see if the &lt;kbd&gt;command&lt;/kbd&gt; or &lt;kbd&gt;windows&lt;/kbd&gt; key is pressed, you can &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey&quot;&gt;reference the readonly &lt;code&gt;metaKey&lt;/code&gt; property on the event&lt;/a&gt;. You can see all of &lt;a href=&quot;https://github.com/SeanMcP/seanmcp.com/blob/master/src/js/stars.js&quot;&gt;the source code for this feature on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was fun to add a new feature, but I‚Äôm realistic about how popular it will be. The meta + click combination is not discoverable, so it will remain a fun surprise for readers who find it.&lt;/p&gt;
&lt;p&gt;Let me know if you have any thoughts about the feature or how to improve it.&lt;/p&gt;
&lt;p&gt;Happy starring!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>How to replace Math.random with crypto in JavaScript</title>
            <link href="https://seanmcp.com/articles/replace-math-random-with-crypto-in-javascript/"/>
            <updated>2022-07-18T18:15:00Z</updated>
            <id>https://seanmcp.com/articles/replace-math-random-with-crypto-in-javascript/</id>
            <content type="html">&lt;p&gt;JavaScript has a method for generating random numbers from 0 to less than 1: &lt;code&gt;Math.random()&lt;/code&gt;. If you‚Äôve ever been working on an app that selects a random item from a list, chances are that you‚Äôve done something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; randomItem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; list&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; list&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will probably work for 99% of the use cases of a random number. However, numbers generated from &lt;code&gt;Math.random&lt;/code&gt; are &lt;strong&gt;not&lt;/strong&gt; cryptographically secure. That means that the ‚Äúrandom‚Äù values are guessable by a computer and therefore not suitable for use in cryptography.&lt;/p&gt;
&lt;p&gt;Thankfully, we have other methods of generating random numbers in the browser: &lt;code&gt;crypto&lt;/code&gt;. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues&quot;&gt;This global object has a &lt;code&gt;getRandomValues&lt;/code&gt; method&lt;/a&gt; that we can use to recreate the functionality above. The method needs to be called with an typed array, so we‚Äôll create one with the &lt;code&gt;Uint8Array&lt;/code&gt; constructor with a length of 1:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; typedArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we pass this to &lt;code&gt;getRandomValues&lt;/code&gt; and select the first (and only) item from the returned array.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; typedArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; randomValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRandomValues&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;typedArray&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// E.g. 122&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we used an &lt;code&gt;Uint8Array&lt;/code&gt;, all of the numbers generated will from 0 to 255. To convert that into the same float returned from &lt;code&gt;Math.random&lt;/code&gt;, we need to divide the value by the total number of possible numbers: 256 or 2&lt;sup&gt;8&lt;/sup&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; typedArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; randomValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRandomValues&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;typedArray&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; randomFloat &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; randomValue &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// E.g. 0.4765625&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these steps in place, we can create a function that is a drop-in replacement for &lt;code&gt;Math.random&lt;/code&gt; called &lt;code&gt;cryptoRandom&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cryptoRandom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; typedArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; randomValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRandomValues&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;typedArray&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; randomFloat &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; randomValue &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; randomFloat&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A few things to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;You‚Äôll (probably) never need this&lt;/strong&gt;. Reach for &lt;code&gt;Math.random&lt;/code&gt; unless you have a very specific reason for cryptographic security.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The floats from this method are shorter&lt;/strong&gt;. &lt;code&gt;Math.random&lt;/code&gt; pretty consistently returns floats that are 10+ decimal places long. If you are depending on a long tail of numbers, then consider switching to &lt;code&gt;Uint32Array&lt;/code&gt; and dividing by &lt;code&gt;Math.pow(2, 32)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I‚Äôm not a security expert&lt;/strong&gt;. All of the information in this article was from a quick Google search; make sure to consult people who know what they‚Äôre talking about before copying and pasting code from a random website.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hope that helps and as always: let me know if you have any corrections to the article.&lt;/p&gt;
&lt;p&gt;Happy randomizing!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>How to use StackBlitz with Firefox</title>
            <link href="https://seanmcp.com/articles/use-stackblitz-with-firefox/"/>
            <updated>2022-08-23T00:00:00Z</updated>
            <id>https://seanmcp.com/articles/use-stackblitz-with-firefox/</id>
            <content type="html">&lt;p&gt;StackBlitz is a great tool for rapidly prototyping web applications. In recent weeks, I has been my go-to tool for testing out new web technologies (&lt;a href=&quot;https://seanmcp.com/note/42/&quot;&gt;CodeSandbox‚Äôs loss&lt;/a&gt;). However, when you try to use StackBlitz with Firefox, the preview window gives the following error message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/stackblitz-firefox-error.png&quot; alt=&quot;Error message reads: Enable Third-Party Cookies. Looks like your browser is blocking our Service Worker. To see this web page, please allow third-party cookies for this site.&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enable Third-Party Cookies&lt;br /&gt;
Looks like your browser is blocking our Service Worker. To see this web page, &lt;a href=&quot;https://developer.stackblitz.com/docs/platform/third-party-blocker/&quot;&gt;please allow third-party cookies for this site&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you follow the link, it leads you to a guide for enabling the feature for Chrome ‚Äì a great addition to the error message but not helpful for Firefox users.&lt;/p&gt;
&lt;p&gt;To enable the StackBlitz preview pane in Firefox, select the shield icon in the URL bar and turn ‚ÄúEnhanced tracking protections‚Äù off for this site:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/stackblitz-firefox-setting.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once that setting is disabled, Firefox will prompt you to reload the page. Once you do that, you should see the shield icon with a line through it to indicate that Firefox is providing no additional protections:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/stackblitz-firefox-off.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;But more excitingly, the preview pane is now working! With that setting configured, you should not be able to use StackBlitz‚Äôs features in Firefox.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://seanmcp.com/img/stackblitz-firefox-working.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Happy blitzing!&lt;/p&gt;
</content>
        </entry>
        
        <entry>
            <title>Solid VS Code extensions</title>
            <link href="https://seanmcp.com/articles/solid-vs-code-extensions/"/>
            <updated>2022-09-06T14:18:37Z</updated>
            <id>https://seanmcp.com/articles/solid-vs-code-extensions/</id>
            <content type="html">&lt;p&gt;IÔªø &lt;a href=&quot;https://seanmcp.com/uses&quot;&gt;use&lt;/a&gt; VS Code as my daily editor, and one of its best features is the wide selection of extensions. However, as with any other large marketplace, discoverability is a real issue.&lt;/p&gt;
&lt;p&gt;IÔªøn an attempt to resolve that issue, here is a curated list of some great VS Code extensions that you might not have tried before:&lt;/p&gt;
&lt;p&gt;-Ôªø &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker&quot;&gt;Code Spell Checker&lt;/a&gt;: This extension has saved me from committing embarrassing spelling mistakes on multiple occasions.&lt;/p&gt;
&lt;p&gt;-Ôªø &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=mattlott.copy-github-url&quot;&gt;Copy GitHub URL&lt;/a&gt;: Adds commands to copy the URL for the current location on GitHub. Obviously more helpful if you use GitHub a lot.&lt;/p&gt;
&lt;p&gt;-Ôªø &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html&quot;&gt;es6-string-html&lt;/a&gt;: Adds syntax highlighting for ES6‚Äôs multiline strings. Just add a comment &lt;code&gt;/*html*/&lt;/code&gt; and your backticked strings are more usable.&lt;/p&gt;
&lt;p&gt;-Ôªø &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=rodrigocfd.format-comment&quot;&gt;Format Comment&lt;/a&gt;: Adds a command to nicely format comments. Really nice if you prefer the &lt;code&gt;//&lt;/code&gt; syntax to &lt;code&gt;/** */&lt;/code&gt; (which VS Code already formats nicely.&lt;/p&gt;
&lt;p&gt;-Ôªø &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer&quot;&gt;Live Server&lt;/a&gt;: Adds a button to the bottom status bar to launch a local development server in the current directory. Never Google ‚Äúserve directory python‚Äù again!&lt;/p&gt;
&lt;p&gt;HÔªøappy extending!&lt;/p&gt;
</content>
        </entry>
</feed>