---
const _items = (await Astro.glob("../pages/articles/*.{md,mdx}")).map(
  (item) => ({
    url: item.url,
    value: item.frontmatter.title + " | " + item.frontmatter.description,
  })
);

interface Props {
  items: { url: string; value: string }[];
}
const { items } = Astro.props;
---

<style>
  #fuzzy-search_results {
    display: grid;
    gap: 0.5em;
    padding: 0.5em;
  }
</style>

<section id="fuzzy-search">
  <form>
    <input
      aria-label="Query"
      autocapitalize="off"
      autocomplete="off"
      id="fuzzy-search_input"
      list="fuzzy-search_datalist"
      name="q"
      type="search"
    />
    <slot name="search-button">
      <button>Search</button>
    </slot>
  </form>
  <datalist id="fuzzy-search_datalist">
    {_items.map((item) => <option data-url={item.url} value={item.value} />)}
  </datalist>
  <nav aria-hidden="true" aria-label="Search results" id="fuzzy-search_results">
  </nav>
</section>

<script is:inline type="module">
  import uFuzzy from "https://unpkg.com/@leeoniya/ufuzzy@0.7.0/dist/uFuzzy.esm.js";

  const containerEl = document.getElementById("fuzzy-search");
  const inputEl = containerEl.querySelector("input[name=q]");
  const resultsEl = containerEl.querySelector("#fuzzy-search_results");

  if (uFuzzy) {
    // Progressive enhancement
    inputEl.removeAttribute("list");
  }

  const valueToURL = {};
  const items = [];
  document.querySelectorAll("#fuzzy-search_datalist option").forEach((n) => {
    items.push(n.value);
    valueToURL[n.value] = n.dataset.url;
  });

  const params = new URLSearchParams(location.search);
  const query = params.get("q");

  if (query) {
    inputEl.value = query;
    searchItems(query);
  }

  function hideResults() {
    resultsEl.textContent = "";
    resultsEl.setAttribute("aria-hidden", "true");
  }

  function showResults() {
    resultsEl.removeAttribute("aria-hidden");
  }

  function searchItems(query) {
    const u = new uFuzzy();
    const indexes = u.filter(items, query);

    if (indexes.length > 0) {
      showResults();
    }

    let innerHTML = "";

    const info = u.info(indexes, items, query);
    const order = u.sort(info, items, query);

    order.forEach((infoIndex) => {
      const html = uFuzzy.highlight(
        items[info.idx[infoIndex]],
        info.ranges[infoIndex]
      );
      const url = valueToURL[items[info.idx[infoIndex]]];
      innerHTML += `<a href="${url}" id="${url}">${html}</a>`;
    });

    containerEl.appendChild(resultsEl);

    resultsEl.innerHTML = innerHTML;
  }

  inputEl.addEventListener("input", (e) => {
    const query = e.target.value;
    if (query) {
      searchItems(query);
    } else {
      resultsEl.textContent = "";
    }
  });

  function focus(element) {
    if (!element) {
      return;
    }
    element.focus();
  }

  containerEl.addEventListener("keydown", (e) => {
    const activeElement = document.activeElement;
    const isResultAnchor = activeElement.matches("#fuzzy-search a");

    switch (e.key) {
      case "ArrowDown": {
        if (activeElement === inputEl) {
          e.preventDefault();
          focus(resultsEl.querySelector("a"));
        } else if (isResultAnchor) {
          e.preventDefault();
          focus(activeElement.nextElementSibling);
        }
        break;
      }
      case "ArrowUp": {
        if (isResultAnchor) {
          e.preventDefault();
          const prev = activeElement.previousElementSibling;
          if (prev) {
            focus(prev);
          } else {
            focus(inputEl);
          }
        }
        break;
      }
      case "Escape": {
        if (activeElement === inputEl) {
          e.preventDefault();
          inputEl.value = "";
          hideResults();
        } else if (isResultAnchor) {
          e.preventDefault();
          focus(inputEl);
        }
        break;
      }
    }
  });
</script>
